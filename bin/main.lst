
bin/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1c4  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800b388  0800b388  0001b388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bab8  0800bab8  0001bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bac0  0800bac0  0001bac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bac8  0800bac8  0001bac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000aec  20000000  0800bacc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020aec  2**0
                  CONTENTS
  8 .bss          000019cc  20000aec  20000aec  00020aec  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200024b8  200024b8  00020aec  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020aec  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002107f  00000000  00000000  00020b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004584  00000000  00000000  00041b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a3d3  00000000  00000000  0004611f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  000504f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017e0  00000000  00000000  00051130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c7d  00000000  00000000  00052910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afc3  00000000  00000000  0006858d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c41b  00000000  00000000  00073550  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000006e  00000000  00000000  000df96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d2c  00000000  00000000  000df9dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000aec 	.word	0x20000aec
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b36c 	.word	0x0800b36c

080001e4 <frame_dummy>:
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <frame_dummy+0x34>)
 80001e6:	b143      	cbz	r3, 80001fa <frame_dummy+0x16>
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <frame_dummy+0x38>)
 80001ea:	490d      	ldr	r1, [pc, #52]	; (8000220 <frame_dummy+0x3c>)
 80001ec:	b510      	push	{r4, lr}
 80001ee:	f3af 8000 	nop.w
 80001f2:	480c      	ldr	r0, [pc, #48]	; (8000224 <frame_dummy+0x40>)
 80001f4:	6803      	ldr	r3, [r0, #0]
 80001f6:	b923      	cbnz	r3, 8000202 <frame_dummy+0x1e>
 80001f8:	bd10      	pop	{r4, pc}
 80001fa:	480a      	ldr	r0, [pc, #40]	; (8000224 <frame_dummy+0x40>)
 80001fc:	6803      	ldr	r3, [r0, #0]
 80001fe:	b933      	cbnz	r3, 800020e <frame_dummy+0x2a>
 8000200:	4770      	bx	lr
 8000202:	4b09      	ldr	r3, [pc, #36]	; (8000228 <frame_dummy+0x44>)
 8000204:	2b00      	cmp	r3, #0
 8000206:	d0f7      	beq.n	80001f8 <frame_dummy+0x14>
 8000208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800020c:	4718      	bx	r3
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x44>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f5      	beq.n	8000200 <frame_dummy+0x1c>
 8000214:	4718      	bx	r3
 8000216:	bf00      	nop
 8000218:	00000000 	.word	0x00000000
 800021c:	0800b36c 	.word	0x0800b36c
 8000220:	20000af0 	.word	0x20000af0
 8000224:	20000aec 	.word	0x20000aec
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <memcpy>:
 80002d0:	4684      	mov	ip, r0
 80002d2:	ea41 0300 	orr.w	r3, r1, r0
 80002d6:	f013 0303 	ands.w	r3, r3, #3
 80002da:	d16d      	bne.n	80003b8 <memcpy+0xe8>
 80002dc:	3a40      	subs	r2, #64	; 0x40
 80002de:	d341      	bcc.n	8000364 <memcpy+0x94>
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	3a40      	subs	r2, #64	; 0x40
 8000362:	d2bd      	bcs.n	80002e0 <memcpy+0x10>
 8000364:	3230      	adds	r2, #48	; 0x30
 8000366:	d311      	bcc.n	800038c <memcpy+0xbc>
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	3a10      	subs	r2, #16
 800038a:	d2ed      	bcs.n	8000368 <memcpy+0x98>
 800038c:	320c      	adds	r2, #12
 800038e:	d305      	bcc.n	800039c <memcpy+0xcc>
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	3a04      	subs	r2, #4
 800039a:	d2f9      	bcs.n	8000390 <memcpy+0xc0>
 800039c:	3204      	adds	r2, #4
 800039e:	d008      	beq.n	80003b2 <memcpy+0xe2>
 80003a0:	07d2      	lsls	r2, r2, #31
 80003a2:	bf1c      	itt	ne
 80003a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003a8:	f800 3b01 	strbne.w	r3, [r0], #1
 80003ac:	d301      	bcc.n	80003b2 <memcpy+0xe2>
 80003ae:	880b      	ldrh	r3, [r1, #0]
 80003b0:	8003      	strh	r3, [r0, #0]
 80003b2:	4660      	mov	r0, ip
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	2a08      	cmp	r2, #8
 80003ba:	d313      	bcc.n	80003e4 <memcpy+0x114>
 80003bc:	078b      	lsls	r3, r1, #30
 80003be:	d08d      	beq.n	80002dc <memcpy+0xc>
 80003c0:	f010 0303 	ands.w	r3, r0, #3
 80003c4:	d08a      	beq.n	80002dc <memcpy+0xc>
 80003c6:	f1c3 0304 	rsb	r3, r3, #4
 80003ca:	1ad2      	subs	r2, r2, r3
 80003cc:	07db      	lsls	r3, r3, #31
 80003ce:	bf1c      	itt	ne
 80003d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003d4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003d8:	d380      	bcc.n	80002dc <memcpy+0xc>
 80003da:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003de:	f820 3b02 	strh.w	r3, [r0], #2
 80003e2:	e77b      	b.n	80002dc <memcpy+0xc>
 80003e4:	3a04      	subs	r2, #4
 80003e6:	d3d9      	bcc.n	800039c <memcpy+0xcc>
 80003e8:	3a01      	subs	r2, #1
 80003ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003ee:	f800 3b01 	strb.w	r3, [r0], #1
 80003f2:	d2f9      	bcs.n	80003e8 <memcpy+0x118>
 80003f4:	780b      	ldrb	r3, [r1, #0]
 80003f6:	7003      	strb	r3, [r0, #0]
 80003f8:	784b      	ldrb	r3, [r1, #1]
 80003fa:	7043      	strb	r3, [r0, #1]
 80003fc:	788b      	ldrb	r3, [r1, #2]
 80003fe:	7083      	strb	r3, [r0, #2]
 8000400:	4660      	mov	r0, ip
 8000402:	4770      	bx	lr
	...

08000440 <strlen>:
 8000440:	f890 f000 	pld	[r0]
 8000444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000448:	f020 0107 	bic.w	r1, r0, #7
 800044c:	f06f 0c00 	mvn.w	ip, #0
 8000450:	f010 0407 	ands.w	r4, r0, #7
 8000454:	f891 f020 	pld	[r1, #32]
 8000458:	f040 8049 	bne.w	80004ee <strlen+0xae>
 800045c:	f04f 0400 	mov.w	r4, #0
 8000460:	f06f 0007 	mvn.w	r0, #7
 8000464:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000468:	f891 f040 	pld	[r1, #64]	; 0x40
 800046c:	f100 0008 	add.w	r0, r0, #8
 8000470:	fa82 f24c 	uadd8	r2, r2, ip
 8000474:	faa4 f28c 	sel	r2, r4, ip
 8000478:	fa83 f34c 	uadd8	r3, r3, ip
 800047c:	faa2 f38c 	sel	r3, r2, ip
 8000480:	bb4b      	cbnz	r3, 80004d6 <strlen+0x96>
 8000482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000486:	fa82 f24c 	uadd8	r2, r2, ip
 800048a:	f100 0008 	add.w	r0, r0, #8
 800048e:	faa4 f28c 	sel	r2, r4, ip
 8000492:	fa83 f34c 	uadd8	r3, r3, ip
 8000496:	faa2 f38c 	sel	r3, r2, ip
 800049a:	b9e3      	cbnz	r3, 80004d6 <strlen+0x96>
 800049c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80004a0:	fa82 f24c 	uadd8	r2, r2, ip
 80004a4:	f100 0008 	add.w	r0, r0, #8
 80004a8:	faa4 f28c 	sel	r2, r4, ip
 80004ac:	fa83 f34c 	uadd8	r3, r3, ip
 80004b0:	faa2 f38c 	sel	r3, r2, ip
 80004b4:	b97b      	cbnz	r3, 80004d6 <strlen+0x96>
 80004b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80004ba:	f101 0120 	add.w	r1, r1, #32
 80004be:	fa82 f24c 	uadd8	r2, r2, ip
 80004c2:	f100 0008 	add.w	r0, r0, #8
 80004c6:	faa4 f28c 	sel	r2, r4, ip
 80004ca:	fa83 f34c 	uadd8	r3, r3, ip
 80004ce:	faa2 f38c 	sel	r3, r2, ip
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0c6      	beq.n	8000464 <strlen+0x24>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	bf04      	itt	eq
 80004da:	3004      	addeq	r0, #4
 80004dc:	461a      	moveq	r2, r3
 80004de:	ba12      	rev	r2, r2
 80004e0:	fab2 f282 	clz	r2, r2
 80004e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80004e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80004ec:	4770      	bx	lr
 80004ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80004f2:	f004 0503 	and.w	r5, r4, #3
 80004f6:	f1c4 0000 	rsb	r0, r4, #0
 80004fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80004fe:	f014 0f04 	tst.w	r4, #4
 8000502:	f891 f040 	pld	[r1, #64]	; 0x40
 8000506:	fa0c f505 	lsl.w	r5, ip, r5
 800050a:	ea62 0205 	orn	r2, r2, r5
 800050e:	bf1c      	itt	ne
 8000510:	ea63 0305 	ornne	r3, r3, r5
 8000514:	4662      	movne	r2, ip
 8000516:	f04f 0400 	mov.w	r4, #0
 800051a:	e7a9      	b.n	8000470 <strlen+0x30>

0800051c <__aeabi_drsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e002      	b.n	8000528 <__adddf3>
 8000522:	bf00      	nop

08000524 <__aeabi_dsub>:
 8000524:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000528 <__adddf3>:
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000532:	ea94 0f05 	teq	r4, r5
 8000536:	bf08      	it	eq
 8000538:	ea90 0f02 	teqeq	r0, r2
 800053c:	bf1f      	itttt	ne
 800053e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000542:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000546:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800054a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054e:	f000 80e2 	beq.w	8000716 <__adddf3+0x1ee>
 8000552:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000556:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800055a:	bfb8      	it	lt
 800055c:	426d      	neglt	r5, r5
 800055e:	dd0c      	ble.n	800057a <__adddf3+0x52>
 8000560:	442c      	add	r4, r5
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	ea82 0000 	eor.w	r0, r2, r0
 800056e:	ea83 0101 	eor.w	r1, r3, r1
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	2d36      	cmp	r5, #54	; 0x36
 800057c:	bf88      	it	hi
 800057e:	bd30      	pophi	{r4, r5, pc}
 8000580:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000584:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000588:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800058c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x70>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800059c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x84>
 80005a6:	4252      	negs	r2, r2
 80005a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ac:	ea94 0f05 	teq	r4, r5
 80005b0:	f000 80a7 	beq.w	8000702 <__adddf3+0x1da>
 80005b4:	f1a4 0401 	sub.w	r4, r4, #1
 80005b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005bc:	db0d      	blt.n	80005da <__adddf3+0xb2>
 80005be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005c2:	fa22 f205 	lsr.w	r2, r2, r5
 80005c6:	1880      	adds	r0, r0, r2
 80005c8:	f141 0100 	adc.w	r1, r1, #0
 80005cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d0:	1880      	adds	r0, r0, r2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	4159      	adcs	r1, r3
 80005d8:	e00e      	b.n	80005f8 <__adddf3+0xd0>
 80005da:	f1a5 0520 	sub.w	r5, r5, #32
 80005de:	f10e 0e20 	add.w	lr, lr, #32
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e8:	bf28      	it	cs
 80005ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ee:	fa43 f305 	asr.w	r3, r3, r5
 80005f2:	18c0      	adds	r0, r0, r3
 80005f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	d507      	bpl.n	800060e <__adddf3+0xe6>
 80005fe:	f04f 0e00 	mov.w	lr, #0
 8000602:	f1dc 0c00 	rsbs	ip, ip, #0
 8000606:	eb7e 0000 	sbcs.w	r0, lr, r0
 800060a:	eb6e 0101 	sbc.w	r1, lr, r1
 800060e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000612:	d31b      	bcc.n	800064c <__adddf3+0x124>
 8000614:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000618:	d30c      	bcc.n	8000634 <__adddf3+0x10c>
 800061a:	0849      	lsrs	r1, r1, #1
 800061c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000620:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000624:	f104 0401 	add.w	r4, r4, #1
 8000628:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800062c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000630:	f080 809a 	bcs.w	8000768 <__adddf3+0x240>
 8000634:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	ea41 0105 	orr.w	r1, r1, r5
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000650:	4140      	adcs	r0, r0
 8000652:	eb41 0101 	adc.w	r1, r1, r1
 8000656:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800065a:	f1a4 0401 	sub.w	r4, r4, #1
 800065e:	d1e9      	bne.n	8000634 <__adddf3+0x10c>
 8000660:	f091 0f00 	teq	r1, #0
 8000664:	bf04      	itt	eq
 8000666:	4601      	moveq	r1, r0
 8000668:	2000      	moveq	r0, #0
 800066a:	fab1 f381 	clz	r3, r1
 800066e:	bf08      	it	eq
 8000670:	3320      	addeq	r3, #32
 8000672:	f1a3 030b 	sub.w	r3, r3, #11
 8000676:	f1b3 0220 	subs.w	r2, r3, #32
 800067a:	da0c      	bge.n	8000696 <__adddf3+0x16e>
 800067c:	320c      	adds	r2, #12
 800067e:	dd08      	ble.n	8000692 <__adddf3+0x16a>
 8000680:	f102 0c14 	add.w	ip, r2, #20
 8000684:	f1c2 020c 	rsb	r2, r2, #12
 8000688:	fa01 f00c 	lsl.w	r0, r1, ip
 800068c:	fa21 f102 	lsr.w	r1, r1, r2
 8000690:	e00c      	b.n	80006ac <__adddf3+0x184>
 8000692:	f102 0214 	add.w	r2, r2, #20
 8000696:	bfd8      	it	le
 8000698:	f1c2 0c20 	rsble	ip, r2, #32
 800069c:	fa01 f102 	lsl.w	r1, r1, r2
 80006a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a4:	bfdc      	itt	le
 80006a6:	ea41 010c 	orrle.w	r1, r1, ip
 80006aa:	4090      	lslle	r0, r2
 80006ac:	1ae4      	subs	r4, r4, r3
 80006ae:	bfa2      	ittt	ge
 80006b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b4:	4329      	orrge	r1, r5
 80006b6:	bd30      	popge	{r4, r5, pc}
 80006b8:	ea6f 0404 	mvn.w	r4, r4
 80006bc:	3c1f      	subs	r4, #31
 80006be:	da1c      	bge.n	80006fa <__adddf3+0x1d2>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc0e      	bgt.n	80006e2 <__adddf3+0x1ba>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0220 	rsb	r2, r4, #32
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f302 	lsl.w	r3, r1, r2
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	fa21 f304 	lsr.w	r3, r1, r4
 80006dc:	ea45 0103 	orr.w	r1, r5, r3
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f1c4 040c 	rsb	r4, r4, #12
 80006e6:	f1c4 0220 	rsb	r2, r4, #32
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 f304 	lsl.w	r3, r1, r4
 80006f2:	ea40 0003 	orr.w	r0, r0, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	fa21 f004 	lsr.w	r0, r1, r4
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	f094 0f00 	teq	r4, #0
 8000706:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800070a:	bf06      	itte	eq
 800070c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000710:	3401      	addeq	r4, #1
 8000712:	3d01      	subne	r5, #1
 8000714:	e74e      	b.n	80005b4 <__adddf3+0x8c>
 8000716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071a:	bf18      	it	ne
 800071c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000720:	d029      	beq.n	8000776 <__adddf3+0x24e>
 8000722:	ea94 0f05 	teq	r4, r5
 8000726:	bf08      	it	eq
 8000728:	ea90 0f02 	teqeq	r0, r2
 800072c:	d005      	beq.n	800073a <__adddf3+0x212>
 800072e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000732:	bf04      	itt	eq
 8000734:	4619      	moveq	r1, r3
 8000736:	4610      	moveq	r0, r2
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea91 0f03 	teq	r1, r3
 800073e:	bf1e      	ittt	ne
 8000740:	2100      	movne	r1, #0
 8000742:	2000      	movne	r0, #0
 8000744:	bd30      	popne	{r4, r5, pc}
 8000746:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800074a:	d105      	bne.n	8000758 <__adddf3+0x230>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	4149      	adcs	r1, r1
 8000750:	bf28      	it	cs
 8000752:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800075c:	bf3c      	itt	cc
 800075e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000762:	bd30      	popcc	{r4, r5, pc}
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000768:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800076c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800077a:	bf1a      	itte	ne
 800077c:	4619      	movne	r1, r3
 800077e:	4610      	movne	r0, r2
 8000780:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000784:	bf1c      	itt	ne
 8000786:	460b      	movne	r3, r1
 8000788:	4602      	movne	r2, r0
 800078a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078e:	bf06      	itte	eq
 8000790:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000794:	ea91 0f03 	teqeq	r1, r3
 8000798:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	bf00      	nop

080007a0 <__aeabi_ui2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	f04f 0100 	mov.w	r1, #0
 80007bc:	e750      	b.n	8000660 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2d>:
 80007c0:	f090 0f00 	teq	r0, #0
 80007c4:	bf04      	itt	eq
 80007c6:	2100      	moveq	r1, #0
 80007c8:	4770      	bxeq	lr
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	e73e      	b.n	8000660 <__adddf3+0x138>
 80007e2:	bf00      	nop

080007e4 <__aeabi_f2d>:
 80007e4:	0042      	lsls	r2, r0, #1
 80007e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007f2:	bf1f      	itttt	ne
 80007f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000800:	4770      	bxne	lr
 8000802:	f092 0f00 	teq	r2, #0
 8000806:	bf14      	ite	ne
 8000808:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e720      	b.n	8000660 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aedc 	beq.w	800060e <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6c1      	b.n	800060e <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_dmul>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8de 	bleq	8000a68 <__aeabi_dmul+0x1dc>
 80008ac:	442c      	add	r4, r5
 80008ae:	ea81 0603 	eor.w	r6, r1, r3
 80008b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008be:	bf18      	it	ne
 80008c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008cc:	d038      	beq.n	8000940 <__aeabi_dmul+0xb4>
 80008ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80008d2:	f04f 0500 	mov.w	r5, #0
 80008d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008e2:	f04f 0600 	mov.w	r6, #0
 80008e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008ea:	f09c 0f00 	teq	ip, #0
 80008ee:	bf18      	it	ne
 80008f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000900:	d204      	bcs.n	800090c <__aeabi_dmul+0x80>
 8000902:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000906:	416d      	adcs	r5, r5
 8000908:	eb46 0606 	adc.w	r6, r6, r6
 800090c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000910:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000914:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000918:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800091c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000920:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000924:	bf88      	it	hi
 8000926:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092a:	d81e      	bhi.n	800096a <__aeabi_dmul+0xde>
 800092c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000930:	bf08      	it	eq
 8000932:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000944:	ea46 0101 	orr.w	r1, r6, r1
 8000948:	ea40 0002 	orr.w	r0, r0, r2
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	f300 80ab 	bgt.w	8000ac4 <__aeabi_dmul+0x238>
 800096e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000972:	bfde      	ittt	le
 8000974:	2000      	movle	r0, #0
 8000976:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800097a:	bd70      	pople	{r4, r5, r6, pc}
 800097c:	f1c4 0400 	rsb	r4, r4, #0
 8000980:	3c20      	subs	r4, #32
 8000982:	da35      	bge.n	80009f0 <__aeabi_dmul+0x164>
 8000984:	340c      	adds	r4, #12
 8000986:	dc1b      	bgt.n	80009c0 <__aeabi_dmul+0x134>
 8000988:	f104 0414 	add.w	r4, r4, #20
 800098c:	f1c4 0520 	rsb	r5, r4, #32
 8000990:	fa00 f305 	lsl.w	r3, r0, r5
 8000994:	fa20 f004 	lsr.w	r0, r0, r4
 8000998:	fa01 f205 	lsl.w	r2, r1, r5
 800099c:	ea40 0002 	orr.w	r0, r0, r2
 80009a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009ac:	fa21 f604 	lsr.w	r6, r1, r4
 80009b0:	eb42 0106 	adc.w	r1, r2, r6
 80009b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009b8:	bf08      	it	eq
 80009ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f1c4 040c 	rsb	r4, r4, #12
 80009c4:	f1c4 0520 	rsb	r5, r4, #32
 80009c8:	fa00 f304 	lsl.w	r3, r0, r4
 80009cc:	fa20 f005 	lsr.w	r0, r0, r5
 80009d0:	fa01 f204 	lsl.w	r2, r1, r4
 80009d4:	ea40 0002 	orr.w	r0, r0, r2
 80009d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009e0:	f141 0100 	adc.w	r1, r1, #0
 80009e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009e8:	bf08      	it	eq
 80009ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f1c4 0520 	rsb	r5, r4, #32
 80009f4:	fa00 f205 	lsl.w	r2, r0, r5
 80009f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000a00:	fa01 f205 	lsl.w	r2, r1, r5
 8000a04:	ea43 0302 	orr.w	r3, r3, r2
 8000a08:	fa21 f004 	lsr.w	r0, r1, r4
 8000a0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a10:	fa21 f204 	lsr.w	r2, r1, r4
 8000a14:	ea20 0002 	bic.w	r0, r0, r2
 8000a18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a20:	bf08      	it	eq
 8000a22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	f094 0f00 	teq	r4, #0
 8000a2c:	d10f      	bne.n	8000a4e <__aeabi_dmul+0x1c2>
 8000a2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a32:	0040      	lsls	r0, r0, #1
 8000a34:	eb41 0101 	adc.w	r1, r1, r1
 8000a38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a3c:	bf08      	it	eq
 8000a3e:	3c01      	subeq	r4, #1
 8000a40:	d0f7      	beq.n	8000a32 <__aeabi_dmul+0x1a6>
 8000a42:	ea41 0106 	orr.w	r1, r1, r6
 8000a46:	f095 0f00 	teq	r5, #0
 8000a4a:	bf18      	it	ne
 8000a4c:	4770      	bxne	lr
 8000a4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a52:	0052      	lsls	r2, r2, #1
 8000a54:	eb43 0303 	adc.w	r3, r3, r3
 8000a58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a5c:	bf08      	it	eq
 8000a5e:	3d01      	subeq	r5, #1
 8000a60:	d0f7      	beq.n	8000a52 <__aeabi_dmul+0x1c6>
 8000a62:	ea43 0306 	orr.w	r3, r3, r6
 8000a66:	4770      	bx	lr
 8000a68:	ea94 0f0c 	teq	r4, ip
 8000a6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a70:	bf18      	it	ne
 8000a72:	ea95 0f0c 	teqne	r5, ip
 8000a76:	d00c      	beq.n	8000a92 <__aeabi_dmul+0x206>
 8000a78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a7c:	bf18      	it	ne
 8000a7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a82:	d1d1      	bne.n	8000a28 <__aeabi_dmul+0x19c>
 8000a84:	ea81 0103 	eor.w	r1, r1, r3
 8000a88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
 8000a92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a96:	bf06      	itte	eq
 8000a98:	4610      	moveq	r0, r2
 8000a9a:	4619      	moveq	r1, r3
 8000a9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa0:	d019      	beq.n	8000ad6 <__aeabi_dmul+0x24a>
 8000aa2:	ea94 0f0c 	teq	r4, ip
 8000aa6:	d102      	bne.n	8000aae <__aeabi_dmul+0x222>
 8000aa8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000aac:	d113      	bne.n	8000ad6 <__aeabi_dmul+0x24a>
 8000aae:	ea95 0f0c 	teq	r5, ip
 8000ab2:	d105      	bne.n	8000ac0 <__aeabi_dmul+0x234>
 8000ab4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ab8:	bf1c      	itt	ne
 8000aba:	4610      	movne	r0, r2
 8000abc:	4619      	movne	r1, r3
 8000abe:	d10a      	bne.n	8000ad6 <__aeabi_dmul+0x24a>
 8000ac0:	ea81 0103 	eor.w	r1, r1, r3
 8000ac4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ac8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000acc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ada:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ade:	bd70      	pop	{r4, r5, r6, pc}

08000ae0 <__aeabi_ddiv>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000aea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aee:	bf1d      	ittte	ne
 8000af0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000af4:	ea94 0f0c 	teqne	r4, ip
 8000af8:	ea95 0f0c 	teqne	r5, ip
 8000afc:	f000 f8a7 	bleq	8000c4e <__aeabi_ddiv+0x16e>
 8000b00:	eba4 0405 	sub.w	r4, r4, r5
 8000b04:	ea81 0e03 	eor.w	lr, r1, r3
 8000b08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b10:	f000 8088 	beq.w	8000c24 <__aeabi_ddiv+0x144>
 8000b14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b24:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b30:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b38:	429d      	cmp	r5, r3
 8000b3a:	bf08      	it	eq
 8000b3c:	4296      	cmpeq	r6, r2
 8000b3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b42:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b46:	d202      	bcs.n	8000b4e <__aeabi_ddiv+0x6e>
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4e:	1ab6      	subs	r6, r6, r2
 8000b50:	eb65 0503 	sbc.w	r5, r5, r3
 8000b54:	085b      	lsrs	r3, r3, #1
 8000b56:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b62:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6a:	bf22      	ittt	cs
 8000b6c:	1ab6      	subcs	r6, r6, r2
 8000b6e:	4675      	movcs	r5, lr
 8000b70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b74:	085b      	lsrs	r3, r3, #1
 8000b76:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b82:	bf22      	ittt	cs
 8000b84:	1ab6      	subcs	r6, r6, r2
 8000b86:	4675      	movcs	r5, lr
 8000b88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b8c:	085b      	lsrs	r3, r3, #1
 8000b8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b92:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b96:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b9a:	bf22      	ittt	cs
 8000b9c:	1ab6      	subcs	r6, r6, r2
 8000b9e:	4675      	movcs	r5, lr
 8000ba0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ba4:	085b      	lsrs	r3, r3, #1
 8000ba6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000baa:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bb2:	bf22      	ittt	cs
 8000bb4:	1ab6      	subcs	r6, r6, r2
 8000bb6:	4675      	movcs	r5, lr
 8000bb8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bbc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bc0:	d018      	beq.n	8000bf4 <__aeabi_ddiv+0x114>
 8000bc2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bc6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bd2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bd6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bde:	d1c0      	bne.n	8000b62 <__aeabi_ddiv+0x82>
 8000be0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be4:	d10b      	bne.n	8000bfe <__aeabi_ddiv+0x11e>
 8000be6:	ea41 0100 	orr.w	r1, r1, r0
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bf2:	e7b6      	b.n	8000b62 <__aeabi_ddiv+0x82>
 8000bf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bf8:	bf04      	itt	eq
 8000bfa:	4301      	orreq	r1, r0
 8000bfc:	2000      	moveq	r0, #0
 8000bfe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c02:	bf88      	it	hi
 8000c04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c08:	f63f aeaf 	bhi.w	800096a <__aeabi_dmul+0xde>
 8000c0c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c10:	bf04      	itt	eq
 8000c12:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c1a:	f150 0000 	adcs.w	r0, r0, #0
 8000c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c30:	bfc2      	ittt	gt
 8000c32:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c3a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c40:	f04f 0e00 	mov.w	lr, #0
 8000c44:	3c01      	subs	r4, #1
 8000c46:	e690      	b.n	800096a <__aeabi_dmul+0xde>
 8000c48:	ea45 0e06 	orr.w	lr, r5, r6
 8000c4c:	e68d      	b.n	800096a <__aeabi_dmul+0xde>
 8000c4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c52:	ea94 0f0c 	teq	r4, ip
 8000c56:	bf08      	it	eq
 8000c58:	ea95 0f0c 	teqeq	r5, ip
 8000c5c:	f43f af3b 	beq.w	8000ad6 <__aeabi_dmul+0x24a>
 8000c60:	ea94 0f0c 	teq	r4, ip
 8000c64:	d10a      	bne.n	8000c7c <__aeabi_ddiv+0x19c>
 8000c66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c6a:	f47f af34 	bne.w	8000ad6 <__aeabi_dmul+0x24a>
 8000c6e:	ea95 0f0c 	teq	r5, ip
 8000c72:	f47f af25 	bne.w	8000ac0 <__aeabi_dmul+0x234>
 8000c76:	4610      	mov	r0, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	e72c      	b.n	8000ad6 <__aeabi_dmul+0x24a>
 8000c7c:	ea95 0f0c 	teq	r5, ip
 8000c80:	d106      	bne.n	8000c90 <__aeabi_ddiv+0x1b0>
 8000c82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c86:	f43f aefd 	beq.w	8000a84 <__aeabi_dmul+0x1f8>
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	e722      	b.n	8000ad6 <__aeabi_dmul+0x24a>
 8000c90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c94:	bf18      	it	ne
 8000c96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c9a:	f47f aec5 	bne.w	8000a28 <__aeabi_dmul+0x19c>
 8000c9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ca2:	f47f af0d 	bne.w	8000ac0 <__aeabi_dmul+0x234>
 8000ca6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000caa:	f47f aeeb 	bne.w	8000a84 <__aeabi_dmul+0x1f8>
 8000cae:	e712      	b.n	8000ad6 <__aeabi_dmul+0x24a>

08000cb0 <__gedf2>:
 8000cb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000cb4:	e006      	b.n	8000cc4 <__cmpdf2+0x4>
 8000cb6:	bf00      	nop

08000cb8 <__ledf2>:
 8000cb8:	f04f 0c01 	mov.w	ip, #1
 8000cbc:	e002      	b.n	8000cc4 <__cmpdf2+0x4>
 8000cbe:	bf00      	nop

08000cc0 <__cmpdf2>:
 8000cc0:	f04f 0c01 	mov.w	ip, #1
 8000cc4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cd4:	bf18      	it	ne
 8000cd6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cda:	d01b      	beq.n	8000d14 <__cmpdf2+0x54>
 8000cdc:	b001      	add	sp, #4
 8000cde:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ce2:	bf0c      	ite	eq
 8000ce4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ce8:	ea91 0f03 	teqne	r1, r3
 8000cec:	bf02      	ittt	eq
 8000cee:	ea90 0f02 	teqeq	r0, r2
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	4770      	bxeq	lr
 8000cf6:	f110 0f00 	cmn.w	r0, #0
 8000cfa:	ea91 0f03 	teq	r1, r3
 8000cfe:	bf58      	it	pl
 8000d00:	4299      	cmppl	r1, r3
 8000d02:	bf08      	it	eq
 8000d04:	4290      	cmpeq	r0, r2
 8000d06:	bf2c      	ite	cs
 8000d08:	17d8      	asrcs	r0, r3, #31
 8000d0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d0e:	f040 0001 	orr.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d1c:	d102      	bne.n	8000d24 <__cmpdf2+0x64>
 8000d1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d22:	d107      	bne.n	8000d34 <__cmpdf2+0x74>
 8000d24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d2c:	d1d6      	bne.n	8000cdc <__cmpdf2+0x1c>
 8000d2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d32:	d0d3      	beq.n	8000cdc <__cmpdf2+0x1c>
 8000d34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_cdrcmple>:
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4662      	mov	r2, ip
 8000d42:	468c      	mov	ip, r1
 8000d44:	4619      	mov	r1, r3
 8000d46:	4663      	mov	r3, ip
 8000d48:	e000      	b.n	8000d4c <__aeabi_cdcmpeq>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_cdcmpeq>:
 8000d4c:	b501      	push	{r0, lr}
 8000d4e:	f7ff ffb7 	bl	8000cc0 <__cmpdf2>
 8000d52:	2800      	cmp	r0, #0
 8000d54:	bf48      	it	mi
 8000d56:	f110 0f00 	cmnmi.w	r0, #0
 8000d5a:	bd01      	pop	{r0, pc}

08000d5c <__aeabi_dcmpeq>:
 8000d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d60:	f7ff fff4 	bl	8000d4c <__aeabi_cdcmpeq>
 8000d64:	bf0c      	ite	eq
 8000d66:	2001      	moveq	r0, #1
 8000d68:	2000      	movne	r0, #0
 8000d6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6e:	bf00      	nop

08000d70 <__aeabi_dcmplt>:
 8000d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d74:	f7ff ffea 	bl	8000d4c <__aeabi_cdcmpeq>
 8000d78:	bf34      	ite	cc
 8000d7a:	2001      	movcc	r0, #1
 8000d7c:	2000      	movcs	r0, #0
 8000d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d82:	bf00      	nop

08000d84 <__aeabi_dcmple>:
 8000d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d88:	f7ff ffe0 	bl	8000d4c <__aeabi_cdcmpeq>
 8000d8c:	bf94      	ite	ls
 8000d8e:	2001      	movls	r0, #1
 8000d90:	2000      	movhi	r0, #0
 8000d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d96:	bf00      	nop

08000d98 <__aeabi_dcmpge>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff ffce 	bl	8000d3c <__aeabi_cdrcmple>
 8000da0:	bf94      	ite	ls
 8000da2:	2001      	movls	r0, #1
 8000da4:	2000      	movhi	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_dcmpgt>:
 8000dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db0:	f7ff ffc4 	bl	8000d3c <__aeabi_cdrcmple>
 8000db4:	bf34      	ite	cc
 8000db6:	2001      	movcc	r0, #1
 8000db8:	2000      	movcs	r0, #0
 8000dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_dcmpun>:
 8000dc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dc8:	d102      	bne.n	8000dd0 <__aeabi_dcmpun+0x10>
 8000dca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dce:	d10a      	bne.n	8000de6 <__aeabi_dcmpun+0x26>
 8000dd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dd8:	d102      	bne.n	8000de0 <__aeabi_dcmpun+0x20>
 8000dda:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dde:	d102      	bne.n	8000de6 <__aeabi_dcmpun+0x26>
 8000de0:	f04f 0000 	mov.w	r0, #0
 8000de4:	4770      	bx	lr
 8000de6:	f04f 0001 	mov.w	r0, #1
 8000dea:	4770      	bx	lr

08000dec <__aeabi_d2iz>:
 8000dec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000df0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000df4:	d215      	bcs.n	8000e22 <__aeabi_d2iz+0x36>
 8000df6:	d511      	bpl.n	8000e1c <__aeabi_d2iz+0x30>
 8000df8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000dfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e00:	d912      	bls.n	8000e28 <__aeabi_d2iz+0x3c>
 8000e02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e12:	fa23 f002 	lsr.w	r0, r3, r2
 8000e16:	bf18      	it	ne
 8000e18:	4240      	negne	r0, r0
 8000e1a:	4770      	bx	lr
 8000e1c:	f04f 0000 	mov.w	r0, #0
 8000e20:	4770      	bx	lr
 8000e22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e26:	d105      	bne.n	8000e34 <__aeabi_d2iz+0x48>
 8000e28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e2c:	bf08      	it	eq
 8000e2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e32:	4770      	bx	lr
 8000e34:	f04f 0000 	mov.w	r0, #0
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <__aeabi_d2f>:
 8000e3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000e44:	bf24      	itt	cs
 8000e46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000e4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000e4e:	d90d      	bls.n	8000e6c <__aeabi_d2f+0x30>
 8000e50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000e60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e64:	bf08      	it	eq
 8000e66:	f020 0001 	biceq.w	r0, r0, #1
 8000e6a:	4770      	bx	lr
 8000e6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000e70:	d121      	bne.n	8000eb6 <__aeabi_d2f+0x7a>
 8000e72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000e76:	bfbc      	itt	lt
 8000e78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000e7c:	4770      	bxlt	lr
 8000e7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000e86:	f1c2 0218 	rsb	r2, r2, #24
 8000e8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000e92:	fa20 f002 	lsr.w	r0, r0, r2
 8000e96:	bf18      	it	ne
 8000e98:	f040 0001 	orrne.w	r0, r0, #1
 8000e9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ea0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ea4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ea8:	ea40 000c 	orr.w	r0, r0, ip
 8000eac:	fa23 f302 	lsr.w	r3, r3, r2
 8000eb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000eb4:	e7cc      	b.n	8000e50 <__aeabi_d2f+0x14>
 8000eb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000eba:	d107      	bne.n	8000ecc <__aeabi_d2f+0x90>
 8000ebc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ec0:	bf1e      	ittt	ne
 8000ec2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ec6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000eca:	4770      	bxne	lr
 8000ecc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__aeabi_uldivmod>:
 8000edc:	b953      	cbnz	r3, 8000ef4 <__aeabi_uldivmod+0x18>
 8000ede:	b94a      	cbnz	r2, 8000ef4 <__aeabi_uldivmod+0x18>
 8000ee0:	2900      	cmp	r1, #0
 8000ee2:	bf08      	it	eq
 8000ee4:	2800      	cmpeq	r0, #0
 8000ee6:	bf1c      	itt	ne
 8000ee8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000eec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ef0:	f000 b97a 	b.w	80011e8 <__aeabi_idiv0>
 8000ef4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ef8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efc:	f000 f806 	bl	8000f0c <__udivmoddi4>
 8000f00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f08:	b004      	add	sp, #16
 8000f0a:	4770      	bx	lr

08000f0c <__udivmoddi4>:
 8000f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f10:	468c      	mov	ip, r1
 8000f12:	460d      	mov	r5, r1
 8000f14:	4604      	mov	r4, r0
 8000f16:	9e08      	ldr	r6, [sp, #32]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d151      	bne.n	8000fc0 <__udivmoddi4+0xb4>
 8000f1c:	428a      	cmp	r2, r1
 8000f1e:	4617      	mov	r7, r2
 8000f20:	d96d      	bls.n	8000ffe <__udivmoddi4+0xf2>
 8000f22:	fab2 fe82 	clz	lr, r2
 8000f26:	f1be 0f00 	cmp.w	lr, #0
 8000f2a:	d00b      	beq.n	8000f44 <__udivmoddi4+0x38>
 8000f2c:	f1ce 0c20 	rsb	ip, lr, #32
 8000f30:	fa01 f50e 	lsl.w	r5, r1, lr
 8000f34:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000f38:	fa02 f70e 	lsl.w	r7, r2, lr
 8000f3c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000f40:	fa00 f40e 	lsl.w	r4, r0, lr
 8000f44:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000f48:	0c25      	lsrs	r5, r4, #16
 8000f4a:	fbbc f8fa 	udiv	r8, ip, sl
 8000f4e:	fa1f f987 	uxth.w	r9, r7
 8000f52:	fb0a cc18 	mls	ip, sl, r8, ip
 8000f56:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000f5a:	fb08 f309 	mul.w	r3, r8, r9
 8000f5e:	42ab      	cmp	r3, r5
 8000f60:	d90a      	bls.n	8000f78 <__udivmoddi4+0x6c>
 8000f62:	19ed      	adds	r5, r5, r7
 8000f64:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000f68:	f080 8123 	bcs.w	80011b2 <__udivmoddi4+0x2a6>
 8000f6c:	42ab      	cmp	r3, r5
 8000f6e:	f240 8120 	bls.w	80011b2 <__udivmoddi4+0x2a6>
 8000f72:	f1a8 0802 	sub.w	r8, r8, #2
 8000f76:	443d      	add	r5, r7
 8000f78:	1aed      	subs	r5, r5, r3
 8000f7a:	b2a4      	uxth	r4, r4
 8000f7c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000f80:	fb0a 5510 	mls	r5, sl, r0, r5
 8000f84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f88:	fb00 f909 	mul.w	r9, r0, r9
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	d909      	bls.n	8000fa4 <__udivmoddi4+0x98>
 8000f90:	19e4      	adds	r4, r4, r7
 8000f92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f96:	f080 810a 	bcs.w	80011ae <__udivmoddi4+0x2a2>
 8000f9a:	45a1      	cmp	r9, r4
 8000f9c:	f240 8107 	bls.w	80011ae <__udivmoddi4+0x2a2>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	443c      	add	r4, r7
 8000fa4:	eba4 0409 	sub.w	r4, r4, r9
 8000fa8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fac:	2100      	movs	r1, #0
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d061      	beq.n	8001076 <__udivmoddi4+0x16a>
 8000fb2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	6034      	str	r4, [r6, #0]
 8000fba:	6073      	str	r3, [r6, #4]
 8000fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d907      	bls.n	8000fd4 <__udivmoddi4+0xc8>
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d054      	beq.n	8001072 <__udivmoddi4+0x166>
 8000fc8:	2100      	movs	r1, #0
 8000fca:	e886 0021 	stmia.w	r6, {r0, r5}
 8000fce:	4608      	mov	r0, r1
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	fab3 f183 	clz	r1, r3
 8000fd8:	2900      	cmp	r1, #0
 8000fda:	f040 808e 	bne.w	80010fa <__udivmoddi4+0x1ee>
 8000fde:	42ab      	cmp	r3, r5
 8000fe0:	d302      	bcc.n	8000fe8 <__udivmoddi4+0xdc>
 8000fe2:	4282      	cmp	r2, r0
 8000fe4:	f200 80fa 	bhi.w	80011dc <__udivmoddi4+0x2d0>
 8000fe8:	1a84      	subs	r4, r0, r2
 8000fea:	eb65 0503 	sbc.w	r5, r5, r3
 8000fee:	2001      	movs	r0, #1
 8000ff0:	46ac      	mov	ip, r5
 8000ff2:	2e00      	cmp	r6, #0
 8000ff4:	d03f      	beq.n	8001076 <__udivmoddi4+0x16a>
 8000ff6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffe:	b912      	cbnz	r2, 8001006 <__udivmoddi4+0xfa>
 8001000:	2701      	movs	r7, #1
 8001002:	fbb7 f7f2 	udiv	r7, r7, r2
 8001006:	fab7 fe87 	clz	lr, r7
 800100a:	f1be 0f00 	cmp.w	lr, #0
 800100e:	d134      	bne.n	800107a <__udivmoddi4+0x16e>
 8001010:	1beb      	subs	r3, r5, r7
 8001012:	0c3a      	lsrs	r2, r7, #16
 8001014:	fa1f fc87 	uxth.w	ip, r7
 8001018:	2101      	movs	r1, #1
 800101a:	fbb3 f8f2 	udiv	r8, r3, r2
 800101e:	0c25      	lsrs	r5, r4, #16
 8001020:	fb02 3318 	mls	r3, r2, r8, r3
 8001024:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001028:	fb0c f308 	mul.w	r3, ip, r8
 800102c:	42ab      	cmp	r3, r5
 800102e:	d907      	bls.n	8001040 <__udivmoddi4+0x134>
 8001030:	19ed      	adds	r5, r5, r7
 8001032:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8001036:	d202      	bcs.n	800103e <__udivmoddi4+0x132>
 8001038:	42ab      	cmp	r3, r5
 800103a:	f200 80d1 	bhi.w	80011e0 <__udivmoddi4+0x2d4>
 800103e:	4680      	mov	r8, r0
 8001040:	1aed      	subs	r5, r5, r3
 8001042:	b2a3      	uxth	r3, r4
 8001044:	fbb5 f0f2 	udiv	r0, r5, r2
 8001048:	fb02 5510 	mls	r5, r2, r0, r5
 800104c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8001050:	fb0c fc00 	mul.w	ip, ip, r0
 8001054:	45a4      	cmp	ip, r4
 8001056:	d907      	bls.n	8001068 <__udivmoddi4+0x15c>
 8001058:	19e4      	adds	r4, r4, r7
 800105a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800105e:	d202      	bcs.n	8001066 <__udivmoddi4+0x15a>
 8001060:	45a4      	cmp	ip, r4
 8001062:	f200 80b8 	bhi.w	80011d6 <__udivmoddi4+0x2ca>
 8001066:	4618      	mov	r0, r3
 8001068:	eba4 040c 	sub.w	r4, r4, ip
 800106c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001070:	e79d      	b.n	8000fae <__udivmoddi4+0xa2>
 8001072:	4631      	mov	r1, r6
 8001074:	4630      	mov	r0, r6
 8001076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107a:	f1ce 0420 	rsb	r4, lr, #32
 800107e:	fa05 f30e 	lsl.w	r3, r5, lr
 8001082:	fa07 f70e 	lsl.w	r7, r7, lr
 8001086:	fa20 f804 	lsr.w	r8, r0, r4
 800108a:	0c3a      	lsrs	r2, r7, #16
 800108c:	fa25 f404 	lsr.w	r4, r5, r4
 8001090:	ea48 0803 	orr.w	r8, r8, r3
 8001094:	fbb4 f1f2 	udiv	r1, r4, r2
 8001098:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800109c:	fb02 4411 	mls	r4, r2, r1, r4
 80010a0:	fa1f fc87 	uxth.w	ip, r7
 80010a4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80010a8:	fb01 f30c 	mul.w	r3, r1, ip
 80010ac:	42ab      	cmp	r3, r5
 80010ae:	fa00 f40e 	lsl.w	r4, r0, lr
 80010b2:	d909      	bls.n	80010c8 <__udivmoddi4+0x1bc>
 80010b4:	19ed      	adds	r5, r5, r7
 80010b6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80010ba:	f080 808a 	bcs.w	80011d2 <__udivmoddi4+0x2c6>
 80010be:	42ab      	cmp	r3, r5
 80010c0:	f240 8087 	bls.w	80011d2 <__udivmoddi4+0x2c6>
 80010c4:	3902      	subs	r1, #2
 80010c6:	443d      	add	r5, r7
 80010c8:	1aeb      	subs	r3, r5, r3
 80010ca:	fa1f f588 	uxth.w	r5, r8
 80010ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80010d2:	fb02 3310 	mls	r3, r2, r0, r3
 80010d6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010da:	fb00 f30c 	mul.w	r3, r0, ip
 80010de:	42ab      	cmp	r3, r5
 80010e0:	d907      	bls.n	80010f2 <__udivmoddi4+0x1e6>
 80010e2:	19ed      	adds	r5, r5, r7
 80010e4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80010e8:	d26f      	bcs.n	80011ca <__udivmoddi4+0x2be>
 80010ea:	42ab      	cmp	r3, r5
 80010ec:	d96d      	bls.n	80011ca <__udivmoddi4+0x2be>
 80010ee:	3802      	subs	r0, #2
 80010f0:	443d      	add	r5, r7
 80010f2:	1aeb      	subs	r3, r5, r3
 80010f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f8:	e78f      	b.n	800101a <__udivmoddi4+0x10e>
 80010fa:	f1c1 0720 	rsb	r7, r1, #32
 80010fe:	fa22 f807 	lsr.w	r8, r2, r7
 8001102:	408b      	lsls	r3, r1
 8001104:	fa05 f401 	lsl.w	r4, r5, r1
 8001108:	ea48 0303 	orr.w	r3, r8, r3
 800110c:	fa20 fe07 	lsr.w	lr, r0, r7
 8001110:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001114:	40fd      	lsrs	r5, r7
 8001116:	ea4e 0e04 	orr.w	lr, lr, r4
 800111a:	fbb5 f9fc 	udiv	r9, r5, ip
 800111e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8001122:	fb0c 5519 	mls	r5, ip, r9, r5
 8001126:	fa1f f883 	uxth.w	r8, r3
 800112a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800112e:	fb09 f408 	mul.w	r4, r9, r8
 8001132:	42ac      	cmp	r4, r5
 8001134:	fa02 f201 	lsl.w	r2, r2, r1
 8001138:	fa00 fa01 	lsl.w	sl, r0, r1
 800113c:	d908      	bls.n	8001150 <__udivmoddi4+0x244>
 800113e:	18ed      	adds	r5, r5, r3
 8001140:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001144:	d243      	bcs.n	80011ce <__udivmoddi4+0x2c2>
 8001146:	42ac      	cmp	r4, r5
 8001148:	d941      	bls.n	80011ce <__udivmoddi4+0x2c2>
 800114a:	f1a9 0902 	sub.w	r9, r9, #2
 800114e:	441d      	add	r5, r3
 8001150:	1b2d      	subs	r5, r5, r4
 8001152:	fa1f fe8e 	uxth.w	lr, lr
 8001156:	fbb5 f0fc 	udiv	r0, r5, ip
 800115a:	fb0c 5510 	mls	r5, ip, r0, r5
 800115e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8001162:	fb00 f808 	mul.w	r8, r0, r8
 8001166:	45a0      	cmp	r8, r4
 8001168:	d907      	bls.n	800117a <__udivmoddi4+0x26e>
 800116a:	18e4      	adds	r4, r4, r3
 800116c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001170:	d229      	bcs.n	80011c6 <__udivmoddi4+0x2ba>
 8001172:	45a0      	cmp	r8, r4
 8001174:	d927      	bls.n	80011c6 <__udivmoddi4+0x2ba>
 8001176:	3802      	subs	r0, #2
 8001178:	441c      	add	r4, r3
 800117a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800117e:	eba4 0408 	sub.w	r4, r4, r8
 8001182:	fba0 8902 	umull	r8, r9, r0, r2
 8001186:	454c      	cmp	r4, r9
 8001188:	46c6      	mov	lr, r8
 800118a:	464d      	mov	r5, r9
 800118c:	d315      	bcc.n	80011ba <__udivmoddi4+0x2ae>
 800118e:	d012      	beq.n	80011b6 <__udivmoddi4+0x2aa>
 8001190:	b156      	cbz	r6, 80011a8 <__udivmoddi4+0x29c>
 8001192:	ebba 030e 	subs.w	r3, sl, lr
 8001196:	eb64 0405 	sbc.w	r4, r4, r5
 800119a:	fa04 f707 	lsl.w	r7, r4, r7
 800119e:	40cb      	lsrs	r3, r1
 80011a0:	431f      	orrs	r7, r3
 80011a2:	40cc      	lsrs	r4, r1
 80011a4:	6037      	str	r7, [r6, #0]
 80011a6:	6074      	str	r4, [r6, #4]
 80011a8:	2100      	movs	r1, #0
 80011aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ae:	4618      	mov	r0, r3
 80011b0:	e6f8      	b.n	8000fa4 <__udivmoddi4+0x98>
 80011b2:	4690      	mov	r8, r2
 80011b4:	e6e0      	b.n	8000f78 <__udivmoddi4+0x6c>
 80011b6:	45c2      	cmp	sl, r8
 80011b8:	d2ea      	bcs.n	8001190 <__udivmoddi4+0x284>
 80011ba:	ebb8 0e02 	subs.w	lr, r8, r2
 80011be:	eb69 0503 	sbc.w	r5, r9, r3
 80011c2:	3801      	subs	r0, #1
 80011c4:	e7e4      	b.n	8001190 <__udivmoddi4+0x284>
 80011c6:	4628      	mov	r0, r5
 80011c8:	e7d7      	b.n	800117a <__udivmoddi4+0x26e>
 80011ca:	4640      	mov	r0, r8
 80011cc:	e791      	b.n	80010f2 <__udivmoddi4+0x1e6>
 80011ce:	4681      	mov	r9, r0
 80011d0:	e7be      	b.n	8001150 <__udivmoddi4+0x244>
 80011d2:	4601      	mov	r1, r0
 80011d4:	e778      	b.n	80010c8 <__udivmoddi4+0x1bc>
 80011d6:	3802      	subs	r0, #2
 80011d8:	443c      	add	r4, r7
 80011da:	e745      	b.n	8001068 <__udivmoddi4+0x15c>
 80011dc:	4608      	mov	r0, r1
 80011de:	e708      	b.n	8000ff2 <__udivmoddi4+0xe6>
 80011e0:	f1a8 0802 	sub.w	r8, r8, #2
 80011e4:	443d      	add	r5, r7
 80011e6:	e72b      	b.n	8001040 <__udivmoddi4+0x134>

080011e8 <__aeabi_idiv0>:
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <__libc_init_array>:
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	4e0f      	ldr	r6, [pc, #60]	; (800122c <__libc_init_array+0x40>)
 80011f0:	4d0f      	ldr	r5, [pc, #60]	; (8001230 <__libc_init_array+0x44>)
 80011f2:	1b76      	subs	r6, r6, r5
 80011f4:	10b6      	asrs	r6, r6, #2
 80011f6:	bf18      	it	ne
 80011f8:	2400      	movne	r4, #0
 80011fa:	d005      	beq.n	8001208 <__libc_init_array+0x1c>
 80011fc:	3401      	adds	r4, #1
 80011fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001202:	4798      	blx	r3
 8001204:	42a6      	cmp	r6, r4
 8001206:	d1f9      	bne.n	80011fc <__libc_init_array+0x10>
 8001208:	4e0a      	ldr	r6, [pc, #40]	; (8001234 <__libc_init_array+0x48>)
 800120a:	4d0b      	ldr	r5, [pc, #44]	; (8001238 <__libc_init_array+0x4c>)
 800120c:	1b76      	subs	r6, r6, r5
 800120e:	f00a f8ad 	bl	800b36c <_init>
 8001212:	10b6      	asrs	r6, r6, #2
 8001214:	bf18      	it	ne
 8001216:	2400      	movne	r4, #0
 8001218:	d006      	beq.n	8001228 <__libc_init_array+0x3c>
 800121a:	3401      	adds	r4, #1
 800121c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001220:	4798      	blx	r3
 8001222:	42a6      	cmp	r6, r4
 8001224:	d1f9      	bne.n	800121a <__libc_init_array+0x2e>
 8001226:	bd70      	pop	{r4, r5, r6, pc}
 8001228:	bd70      	pop	{r4, r5, r6, pc}
 800122a:	bf00      	nop
 800122c:	0800bac0 	.word	0x0800bac0
 8001230:	0800bac0 	.word	0x0800bac0
 8001234:	0800bac8 	.word	0x0800bac8
 8001238:	0800bac0 	.word	0x0800bac0

0800123c <memset>:
 800123c:	b470      	push	{r4, r5, r6}
 800123e:	0786      	lsls	r6, r0, #30
 8001240:	d046      	beq.n	80012d0 <memset+0x94>
 8001242:	1e54      	subs	r4, r2, #1
 8001244:	2a00      	cmp	r2, #0
 8001246:	d041      	beq.n	80012cc <memset+0x90>
 8001248:	b2ca      	uxtb	r2, r1
 800124a:	4603      	mov	r3, r0
 800124c:	e002      	b.n	8001254 <memset+0x18>
 800124e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8001252:	d33b      	bcc.n	80012cc <memset+0x90>
 8001254:	f803 2b01 	strb.w	r2, [r3], #1
 8001258:	079d      	lsls	r5, r3, #30
 800125a:	d1f8      	bne.n	800124e <memset+0x12>
 800125c:	2c03      	cmp	r4, #3
 800125e:	d92e      	bls.n	80012be <memset+0x82>
 8001260:	b2cd      	uxtb	r5, r1
 8001262:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001266:	2c0f      	cmp	r4, #15
 8001268:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800126c:	d919      	bls.n	80012a2 <memset+0x66>
 800126e:	f103 0210 	add.w	r2, r3, #16
 8001272:	4626      	mov	r6, r4
 8001274:	3e10      	subs	r6, #16
 8001276:	2e0f      	cmp	r6, #15
 8001278:	f842 5c10 	str.w	r5, [r2, #-16]
 800127c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001280:	f842 5c08 	str.w	r5, [r2, #-8]
 8001284:	f842 5c04 	str.w	r5, [r2, #-4]
 8001288:	f102 0210 	add.w	r2, r2, #16
 800128c:	d8f2      	bhi.n	8001274 <memset+0x38>
 800128e:	f1a4 0210 	sub.w	r2, r4, #16
 8001292:	f022 020f 	bic.w	r2, r2, #15
 8001296:	f004 040f 	and.w	r4, r4, #15
 800129a:	3210      	adds	r2, #16
 800129c:	2c03      	cmp	r4, #3
 800129e:	4413      	add	r3, r2
 80012a0:	d90d      	bls.n	80012be <memset+0x82>
 80012a2:	461e      	mov	r6, r3
 80012a4:	4622      	mov	r2, r4
 80012a6:	3a04      	subs	r2, #4
 80012a8:	2a03      	cmp	r2, #3
 80012aa:	f846 5b04 	str.w	r5, [r6], #4
 80012ae:	d8fa      	bhi.n	80012a6 <memset+0x6a>
 80012b0:	1f22      	subs	r2, r4, #4
 80012b2:	f022 0203 	bic.w	r2, r2, #3
 80012b6:	3204      	adds	r2, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	f004 0403 	and.w	r4, r4, #3
 80012be:	b12c      	cbz	r4, 80012cc <memset+0x90>
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	441c      	add	r4, r3
 80012c4:	f803 1b01 	strb.w	r1, [r3], #1
 80012c8:	429c      	cmp	r4, r3
 80012ca:	d1fb      	bne.n	80012c4 <memset+0x88>
 80012cc:	bc70      	pop	{r4, r5, r6}
 80012ce:	4770      	bx	lr
 80012d0:	4614      	mov	r4, r2
 80012d2:	4603      	mov	r3, r0
 80012d4:	e7c2      	b.n	800125c <memset+0x20>
 80012d6:	bf00      	nop

080012d8 <register_fini>:
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <register_fini+0xc>)
 80012da:	b113      	cbz	r3, 80012e2 <register_fini+0xa>
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <register_fini+0x10>)
 80012de:	f000 b805 	b.w	80012ec <atexit>
 80012e2:	4770      	bx	lr
 80012e4:	00000000 	.word	0x00000000
 80012e8:	080012f9 	.word	0x080012f9

080012ec <atexit>:
 80012ec:	2300      	movs	r3, #0
 80012ee:	4601      	mov	r1, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 b81a 	b.w	800132c <__register_exitproc>

080012f8 <__libc_fini_array>:
 80012f8:	b538      	push	{r3, r4, r5, lr}
 80012fa:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <__libc_fini_array+0x2c>)
 80012fc:	4d0a      	ldr	r5, [pc, #40]	; (8001328 <__libc_fini_array+0x30>)
 80012fe:	1b64      	subs	r4, r4, r5
 8001300:	10a4      	asrs	r4, r4, #2
 8001302:	d00a      	beq.n	800131a <__libc_fini_array+0x22>
 8001304:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8001308:	3b01      	subs	r3, #1
 800130a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800130e:	3c01      	subs	r4, #1
 8001310:	f855 3904 	ldr.w	r3, [r5], #-4
 8001314:	4798      	blx	r3
 8001316:	2c00      	cmp	r4, #0
 8001318:	d1f9      	bne.n	800130e <__libc_fini_array+0x16>
 800131a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800131e:	f00a b82b 	b.w	800b378 <_fini>
 8001322:	bf00      	nop
 8001324:	0800bacc 	.word	0x0800bacc
 8001328:	0800bac8 	.word	0x0800bac8

0800132c <__register_exitproc>:
 800132c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001330:	4c25      	ldr	r4, [pc, #148]	; (80013c8 <__register_exitproc+0x9c>)
 8001332:	6825      	ldr	r5, [r4, #0]
 8001334:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8001338:	4606      	mov	r6, r0
 800133a:	4688      	mov	r8, r1
 800133c:	4692      	mov	sl, r2
 800133e:	4699      	mov	r9, r3
 8001340:	b3c4      	cbz	r4, 80013b4 <__register_exitproc+0x88>
 8001342:	6860      	ldr	r0, [r4, #4]
 8001344:	281f      	cmp	r0, #31
 8001346:	dc17      	bgt.n	8001378 <__register_exitproc+0x4c>
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	b176      	cbz	r6, 800136a <__register_exitproc+0x3e>
 800134c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001350:	2201      	movs	r2, #1
 8001352:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8001356:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 800135a:	4082      	lsls	r2, r0
 800135c:	4311      	orrs	r1, r2
 800135e:	2e02      	cmp	r6, #2
 8001360:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8001364:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8001368:	d01e      	beq.n	80013a8 <__register_exitproc+0x7c>
 800136a:	3002      	adds	r0, #2
 800136c:	6063      	str	r3, [r4, #4]
 800136e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8001372:	2000      	movs	r0, #0
 8001374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <__register_exitproc+0xa0>)
 800137a:	b303      	cbz	r3, 80013be <__register_exitproc+0x92>
 800137c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001380:	f3af 8000 	nop.w
 8001384:	4604      	mov	r4, r0
 8001386:	b1d0      	cbz	r0, 80013be <__register_exitproc+0x92>
 8001388:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800138c:	2700      	movs	r7, #0
 800138e:	e880 0088 	stmia.w	r0, {r3, r7}
 8001392:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8001396:	4638      	mov	r0, r7
 8001398:	2301      	movs	r3, #1
 800139a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800139e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	d0e1      	beq.n	800136a <__register_exitproc+0x3e>
 80013a6:	e7d1      	b.n	800134c <__register_exitproc+0x20>
 80013a8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80013ac:	430a      	orrs	r2, r1
 80013ae:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80013b2:	e7da      	b.n	800136a <__register_exitproc+0x3e>
 80013b4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80013b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80013bc:	e7c1      	b.n	8001342 <__register_exitproc+0x16>
 80013be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c6:	bf00      	nop
 80013c8:	0800b388 	.word	0x0800b388
 80013cc:	00000000 	.word	0x00000000

080013d0 <lsm9ds0_Init>:
static real mag_sc;




void lsm9ds0_Init(void){
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t buff[9],ret;

	gyr_sc = (GYR_GAIN[gyr_sel]*M_PI/180.0/1000000.0);
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <lsm9ds0_Init+0x90>)
	buff[1] = 0;
	buff[2] = 0;
	buff[3] = (1<<7) | GYR_VAL[gyr_sel];
	buff[4] = 0;

	ret = lsm9ds0.i2c_wr(LSM9DS0_GY_addr,0x20|0x80,buff,5);
 80013d4:	4d23      	ldr	r5, [pc, #140]	; (8001464 <lsm9ds0_Init+0x94>)
	gyr_sc = (GYR_GAIN[gyr_sel]*M_PI/180.0/1000000.0);
 80013d6:	4c24      	ldr	r4, [pc, #144]	; (8001468 <lsm9ds0_Init+0x98>)
	acc_sc =  ACC_GAIN[acc_sel]/1000000.0;
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <lsm9ds0_Init+0x9c>)
	mag_sc =  MAG_GAIN[mag_sel]/1000000.0;
 80013da:	4825      	ldr	r0, [pc, #148]	; (8001470 <lsm9ds0_Init+0xa0>)
	gyr_sc = (GYR_GAIN[gyr_sel]*M_PI/180.0/1000000.0);
 80013dc:	6014      	str	r4, [r2, #0]
void lsm9ds0_Init(void){
 80013de:	b085      	sub	sp, #20
	buff[1] = 0;
 80013e0:	2400      	movs	r4, #0
	acc_sc =  ACC_GAIN[acc_sel]/1000000.0;
 80013e2:	4924      	ldr	r1, [pc, #144]	; (8001474 <lsm9ds0_Init+0xa4>)
	mag_sc =  MAG_GAIN[mag_sel]/1000000.0;
 80013e4:	4f24      	ldr	r7, [pc, #144]	; (8001478 <lsm9ds0_Init+0xa8>)
	acc_sc =  ACC_GAIN[acc_sel]/1000000.0;
 80013e6:	6019      	str	r1, [r3, #0]
	buff[0] =  LSM9DS0_GYRO_ODR_380HZ_VAL | LSM9DS0_GYRO_BW(3) | LSM9DS0_GYRO_NORMAL_MODE| LSM9DS0_GYRO_X_EN | LSM9DS0_GYRO_Y_EN | LSM9DS0_GYRO_Z_EN;
 80013e8:	f04f 0ebf 	mov.w	lr, #191	; 0xbf
	buff[3] = (1<<7) | GYR_VAL[gyr_sel];
 80013ec:	2290      	movs	r2, #144	; 0x90
 80013ee:	f88d 2007 	strb.w	r2, [sp, #7]
	ret = lsm9ds0.i2c_wr(LSM9DS0_GY_addr,0x20|0x80,buff,5);
 80013f2:	2305      	movs	r3, #5
 80013f4:	aa01      	add	r2, sp, #4
 80013f6:	21a0      	movs	r1, #160	; 0xa0
	mag_sc =  MAG_GAIN[mag_sel]/1000000.0;
 80013f8:	6007      	str	r7, [r0, #0]
	ret = lsm9ds0.i2c_wr(LSM9DS0_GY_addr,0x20|0x80,buff,5);
 80013fa:	6b6e      	ldr	r6, [r5, #52]	; 0x34
	buff[0] =  LSM9DS0_GYRO_ODR_380HZ_VAL | LSM9DS0_GYRO_BW(3) | LSM9DS0_GYRO_NORMAL_MODE| LSM9DS0_GYRO_X_EN | LSM9DS0_GYRO_Y_EN | LSM9DS0_GYRO_Z_EN;
 80013fc:	f88d e004 	strb.w	lr, [sp, #4]
	buff[1] = 0;
 8001400:	f88d 4005 	strb.w	r4, [sp, #5]
	buff[2] = 0;
 8001404:	f88d 4006 	strb.w	r4, [sp, #6]
	buff[4] = 0;
 8001408:	f88d 4008 	strb.w	r4, [sp, #8]
	ret = lsm9ds0.i2c_wr(LSM9DS0_GY_addr,0x20|0x80,buff,5);
 800140c:	20d7      	movs	r0, #215	; 0xd7
 800140e:	47b0      	blx	r6
	lsm9ds0.gyr_stat = ret;


	//CTRL_REG 0x1F
	buff[0] = 0;
	buff[1] = LSM9DS0_ACCEL_ODR_400HZ_VAL | (1<<3) | LSM9DS0_ACCEL_X_EN | LSM9DS0_ACCEL_Y_EN | LSM9DS0_ACCEL_Z_EN;
 8001410:	218f      	movs	r1, #143	; 0x8f
	buff[2] = LSM9DS0_ACC_BW(1) | ACC_VAL[acc_sel];
 8001412:	2248      	movs	r2, #72	; 0x48
	buff[3] = 0;
	buff[4] = 0;
	buff[5] = LSM9DS0_TEMP_EN | LSM9DS0_MAGN_HIGH_RES_VAL | LSM9DS0_MAGN_ODR_100HZ_VAL;
 8001414:	23f4      	movs	r3, #244	; 0xf4
	buff[0] = 0;
 8001416:	f88d 4004 	strb.w	r4, [sp, #4]
	buff[3] = 0;
 800141a:	f88d 4007 	strb.w	r4, [sp, #7]
	buff[4] = 0;
 800141e:	f88d 4008 	strb.w	r4, [sp, #8]
	buff[6] = MAG_VAL[mag_sel];
 8001422:	f88d 400a 	strb.w	r4, [sp, #10]
	buff[7] = 0;
 8001426:	f88d 400b 	strb.w	r4, [sp, #11]
	lsm9ds0.gyr_stat = ret;
 800142a:	62a8      	str	r0, [r5, #40]	; 0x28
	buff[1] = LSM9DS0_ACCEL_ODR_400HZ_VAL | (1<<3) | LSM9DS0_ACCEL_X_EN | LSM9DS0_ACCEL_Y_EN | LSM9DS0_ACCEL_Z_EN;
 800142c:	f88d 1005 	strb.w	r1, [sp, #5]
	buff[2] = LSM9DS0_ACC_BW(1) | ACC_VAL[acc_sel];
 8001430:	f88d 2006 	strb.w	r2, [sp, #6]
	buff[5] = LSM9DS0_TEMP_EN | LSM9DS0_MAGN_HIGH_RES_VAL | LSM9DS0_MAGN_ODR_100HZ_VAL;
 8001434:	f88d 3009 	strb.w	r3, [sp, #9]

	if(ret == 0 )
 8001438:	b928      	cbnz	r0, 8001446 <lsm9ds0_Init+0x76>
		ret = lsm9ds0.i2c_wr(LSM9DS0_AM_addr,0x1F|0x80,buff,8);
 800143a:	aa01      	add	r2, sp, #4
 800143c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800143e:	2308      	movs	r3, #8
 8001440:	219f      	movs	r1, #159	; 0x9f
 8001442:	203b      	movs	r0, #59	; 0x3b
 8001444:	47a0      	blx	r4
	lsm9ds0.acc_stat = ret;
	lsm9ds0.mag_stat = ret;

	lsm9ds0.gyr_age = 65000;
 8001446:	f64f 53e8 	movw	r3, #65000	; 0xfde8
	lsm9ds0.acc_stat = ret;
 800144a:	62e8      	str	r0, [r5, #44]	; 0x2c
	lsm9ds0.mag_stat = ret;
 800144c:	6328      	str	r0, [r5, #48]	; 0x30
	lsm9ds0.gyr_age = 65000;
 800144e:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	lsm9ds0.acc_age = 65000;
 8001452:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
	lsm9ds0.mag_age = 65000;
 8001456:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
}
 800145a:	b005      	add	sp, #20
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	bf00      	nop
 8001460:	20000b0c 	.word	0x20000b0c
 8001464:	20000c10 	.word	0x20000c10
 8001468:	39a02279 	.word	0x39a02279
 800146c:	20000b08 	.word	0x20000b08
 8001470:	20000b10 	.word	0x20000b10
 8001474:	38ffda40 	.word	0x38ffda40
 8001478:	38a7c5ac 	.word	0x38a7c5ac

0800147c <lsm9ds0_read>:

void lsm9ds0_read(void){
 800147c:	b530      	push	{r4, r5, lr}
	uint8_t *ptr;
	int16_t buff[3];
	ptr = (int8_t *)buff;
	uint8_t tmp;

	lsm9ds0.gyr_age++;
 800147e:	4c6f      	ldr	r4, [pc, #444]	; (800163c <lsm9ds0_read+0x1c0>)
 8001480:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	lsm9ds0.acc_age++;
	lsm9ds0.mag_age++;


	lsm9ds0.i2c_rd(LSM9DS0_GY_addr,0x27,ptr,1);
 8001484:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	lsm9ds0.gyr_age++;
 8001486:	3301      	adds	r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	lsm9ds0.acc_age++;
 800148e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8001492:	3301      	adds	r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	lsm9ds0.mag_age++;
 800149a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800149e:	3301      	adds	r3, #1
void lsm9ds0_read(void){
 80014a0:	b083      	sub	sp, #12
	lsm9ds0.mag_age++;
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	lsm9ds0.i2c_rd(LSM9DS0_GY_addr,0x27,ptr,1);
 80014a8:	466a      	mov	r2, sp
 80014aa:	2301      	movs	r3, #1
 80014ac:	2127      	movs	r1, #39	; 0x27
 80014ae:	20d7      	movs	r0, #215	; 0xd7
 80014b0:	47a8      	blx	r5
	if ( (ptr[0]&0x0F) == 0x0F){
 80014b2:	f89d 3000 	ldrb.w	r3, [sp]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	d060      	beq.n	8001580 <lsm9ds0_read+0x104>
			lsm9ds0.gyr[1] = gyr_sc*buff[1];
			lsm9ds0.gyr[2] = gyr_sc*buff[2];
		}
	}
	else{
		lsm9ds0.gyr[0] = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	6023      	str	r3, [r4, #0]
		lsm9ds0.gyr[1] = 0;
 80014c2:	6063      	str	r3, [r4, #4]
		lsm9ds0.gyr[2] = 0;
 80014c4:	60a3      	str	r3, [r4, #8]
	}

	lsm9ds0.i2c_rd(LSM9DS0_AM_addr,0x27,ptr,1);
 80014c6:	2301      	movs	r3, #1
 80014c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80014ca:	466a      	mov	r2, sp
 80014cc:	2127      	movs	r1, #39	; 0x27
 80014ce:	203b      	movs	r0, #59	; 0x3b
 80014d0:	47a8      	blx	r5
	if ( (ptr[0]&0x0F) == 0x0F){
 80014d2:	f89d 3000 	ldrb.w	r3, [sp]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	d07e      	beq.n	80015dc <lsm9ds0_read+0x160>
			lsm9ds0.acc[2] = acc_sc*buff[2];

		}
	}

	lsm9ds0.i2c_rd(LSM9DS0_AM_addr,0x07,ptr,1);
 80014de:	2301      	movs	r3, #1
 80014e0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80014e2:	466a      	mov	r2, sp
 80014e4:	2107      	movs	r1, #7
 80014e6:	203b      	movs	r0, #59	; 0x3b
 80014e8:	47a8      	blx	r5
	if ( (ptr[0]&0x0F) == 0x0F){
 80014ea:	f89d 3000 	ldrb.w	r3, [sp]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d001      	beq.n	80014fa <lsm9ds0_read+0x7e>
			lsm9ds0.mag[0] = mag_sc*buff[0];
			lsm9ds0.mag[1] = mag_sc*buff[1];
			lsm9ds0.mag[2] = -mag_sc*buff[2]; //Check axis
		}
	}
}
 80014f6:	b003      	add	sp, #12
 80014f8:	bd30      	pop	{r4, r5, pc}
		lsm9ds0.i2c_rd(LSM9DS0_AM_addr,0x05|0x80,ptr,2);
 80014fa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80014fc:	2302      	movs	r3, #2
 80014fe:	466a      	mov	r2, sp
 8001500:	2185      	movs	r1, #133	; 0x85
 8001502:	203b      	movs	r0, #59	; 0x3b
 8001504:	47a8      	blx	r5
		lsm9ds0.temp = buff[0]*0.0625 + 25.0;
 8001506:	f9bd 3000 	ldrsh.w	r3, [sp]
 800150a:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001640 <lsm9ds0_read+0x1c4>
		lsm9ds0.mag_stat = lsm9ds0.i2c_rd(LSM9DS0_AM_addr,0x08|0x80,ptr,6);
 800150e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		lsm9ds0.temp = buff[0]*0.0625 + 25.0;
 8001510:	ee07 3a10 	vmov	s14, r3
 8001514:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001518:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800151c:	eee7 7a26 	vfma.f32	s15, s14, s13
		lsm9ds0.mag_stat = lsm9ds0.i2c_rd(LSM9DS0_AM_addr,0x08|0x80,ptr,6);
 8001520:	2306      	movs	r3, #6
 8001522:	466a      	mov	r2, sp
 8001524:	2188      	movs	r1, #136	; 0x88
		lsm9ds0.temp = buff[0]*0.0625 + 25.0;
 8001526:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
		lsm9ds0.mag_stat = lsm9ds0.i2c_rd(LSM9DS0_AM_addr,0x08|0x80,ptr,6);
 800152a:	203b      	movs	r0, #59	; 0x3b
 800152c:	47a8      	blx	r5
 800152e:	6320      	str	r0, [r4, #48]	; 0x30
		if (lsm9ds0.mag_stat == 0){
 8001530:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1df      	bne.n	80014f6 <lsm9ds0_read+0x7a>
			lsm9ds0.mag[0] = mag_sc*buff[0];
 8001536:	f9bd 1000 	ldrsh.w	r1, [sp]
 800153a:	4a42      	ldr	r2, [pc, #264]	; (8001644 <lsm9ds0_read+0x1c8>)
			lsm9ds0.mag_age = 0;
 800153c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			lsm9ds0.mag[0] = mag_sc*buff[0];
 8001540:	ee06 1a90 	vmov	s13, r1
			lsm9ds0.mag[1] = mag_sc*buff[1];
 8001544:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
			lsm9ds0.mag[0] = mag_sc*buff[0];
 8001548:	edd2 7a00 	vldr	s15, [r2]
			lsm9ds0.mag[1] = mag_sc*buff[1];
 800154c:	ee07 1a10 	vmov	s14, r1
			lsm9ds0.mag[2] = -mag_sc*buff[2]; //Check axis
 8001550:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001554:	ee06 1a10 	vmov	s12, r1
			lsm9ds0.mag[0] = mag_sc*buff[0];
 8001558:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			lsm9ds0.mag[2] = -mag_sc*buff[2]; //Check axis
 800155c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
			lsm9ds0.mag[1] = mag_sc*buff[1];
 8001560:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			lsm9ds0.mag[0] = mag_sc*buff[0];
 8001564:	ee66 6aa7 	vmul.f32	s13, s13, s15
			lsm9ds0.mag[1] = mag_sc*buff[1];
 8001568:	ee27 7a27 	vmul.f32	s14, s14, s15
			lsm9ds0.mag[2] = -mag_sc*buff[2]; //Check axis
 800156c:	ee67 7ac6 	vnmul.f32	s15, s15, s12
			lsm9ds0.mag[0] = mag_sc*buff[0];
 8001570:	edc4 6a06 	vstr	s13, [r4, #24]
			lsm9ds0.mag[1] = mag_sc*buff[1];
 8001574:	ed84 7a07 	vstr	s14, [r4, #28]
			lsm9ds0.mag[2] = -mag_sc*buff[2]; //Check axis
 8001578:	edc4 7a08 	vstr	s15, [r4, #32]
}
 800157c:	b003      	add	sp, #12
 800157e:	bd30      	pop	{r4, r5, pc}
		lsm9ds0.gyr_stat = lsm9ds0.i2c_rd(LSM9DS0_GY_addr,0x28|0x80,ptr,6);
 8001580:	2306      	movs	r3, #6
 8001582:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001584:	466a      	mov	r2, sp
 8001586:	21a8      	movs	r1, #168	; 0xa8
 8001588:	20d7      	movs	r0, #215	; 0xd7
 800158a:	47a8      	blx	r5
 800158c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (lsm9ds0.gyr_stat == 0){
 800158e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d198      	bne.n	80014c6 <lsm9ds0_read+0x4a>
			lsm9ds0.gyr[0] = gyr_sc*buff[0];
 8001594:	f9bd 1000 	ldrsh.w	r1, [sp]
 8001598:	4a2b      	ldr	r2, [pc, #172]	; (8001648 <lsm9ds0_read+0x1cc>)
			lsm9ds0.gyr_age = 0;
 800159a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
			lsm9ds0.gyr[0] = gyr_sc*buff[0];
 800159e:	ee06 1a90 	vmov	s13, r1
			lsm9ds0.gyr[1] = gyr_sc*buff[1];
 80015a2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
			lsm9ds0.gyr[0] = gyr_sc*buff[0];
 80015a6:	ed92 6a00 	vldr	s12, [r2]
			lsm9ds0.gyr[1] = gyr_sc*buff[1];
 80015aa:	ee07 1a10 	vmov	s14, r1
			lsm9ds0.gyr[2] = gyr_sc*buff[2];
 80015ae:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80015b2:	ee07 1a90 	vmov	s15, r1
			lsm9ds0.gyr[0] = gyr_sc*buff[0];
 80015b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			lsm9ds0.gyr[1] = gyr_sc*buff[1];
 80015ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			lsm9ds0.gyr[2] = gyr_sc*buff[2];
 80015be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			lsm9ds0.gyr[0] = gyr_sc*buff[0];
 80015c2:	ee66 6a86 	vmul.f32	s13, s13, s12
			lsm9ds0.gyr[1] = gyr_sc*buff[1];
 80015c6:	ee27 7a06 	vmul.f32	s14, s14, s12
			lsm9ds0.gyr[2] = gyr_sc*buff[2];
 80015ca:	ee67 7a86 	vmul.f32	s15, s15, s12
			lsm9ds0.gyr[0] = gyr_sc*buff[0];
 80015ce:	edc4 6a00 	vstr	s13, [r4]
			lsm9ds0.gyr[1] = gyr_sc*buff[1];
 80015d2:	ed84 7a01 	vstr	s14, [r4, #4]
			lsm9ds0.gyr[2] = gyr_sc*buff[2];
 80015d6:	edc4 7a02 	vstr	s15, [r4, #8]
 80015da:	e774      	b.n	80014c6 <lsm9ds0_read+0x4a>
		lsm9ds0.acc_stat = lsm9ds0.i2c_rd(LSM9DS0_AM_addr,0x28|0x80,ptr,6);
 80015dc:	2306      	movs	r3, #6
 80015de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80015e0:	466a      	mov	r2, sp
 80015e2:	21a8      	movs	r1, #168	; 0xa8
 80015e4:	203b      	movs	r0, #59	; 0x3b
 80015e6:	47a8      	blx	r5
 80015e8:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (lsm9ds0.acc_stat==0){
 80015ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f af76 	bne.w	80014de <lsm9ds0_read+0x62>
			lsm9ds0.acc[0] = acc_sc*buff[0];
 80015f2:	f9bd 1000 	ldrsh.w	r1, [sp]
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <lsm9ds0_read+0x1d0>)
			lsm9ds0.acc_age = 0;
 80015f8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
			lsm9ds0.acc[0] = acc_sc*buff[0];
 80015fc:	ee06 1a90 	vmov	s13, r1
			lsm9ds0.acc[1] = acc_sc*buff[1];
 8001600:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
			lsm9ds0.acc[0] = acc_sc*buff[0];
 8001604:	ed92 6a00 	vldr	s12, [r2]
			lsm9ds0.acc[1] = acc_sc*buff[1];
 8001608:	ee07 1a10 	vmov	s14, r1
			lsm9ds0.acc[2] = acc_sc*buff[2];
 800160c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001610:	ee07 1a90 	vmov	s15, r1
			lsm9ds0.acc[0] = acc_sc*buff[0];
 8001614:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			lsm9ds0.acc[1] = acc_sc*buff[1];
 8001618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			lsm9ds0.acc[2] = acc_sc*buff[2];
 800161c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			lsm9ds0.acc[0] = acc_sc*buff[0];
 8001620:	ee66 6a86 	vmul.f32	s13, s13, s12
			lsm9ds0.acc[1] = acc_sc*buff[1];
 8001624:	ee27 7a06 	vmul.f32	s14, s14, s12
			lsm9ds0.acc[2] = acc_sc*buff[2];
 8001628:	ee67 7a86 	vmul.f32	s15, s15, s12
			lsm9ds0.acc[0] = acc_sc*buff[0];
 800162c:	edc4 6a03 	vstr	s13, [r4, #12]
			lsm9ds0.acc[1] = acc_sc*buff[1];
 8001630:	ed84 7a04 	vstr	s14, [r4, #16]
			lsm9ds0.acc[2] = acc_sc*buff[2];
 8001634:	edc4 7a05 	vstr	s15, [r4, #20]
 8001638:	e751      	b.n	80014de <lsm9ds0_read+0x62>
 800163a:	bf00      	nop
 800163c:	20000c10 	.word	0x20000c10
 8001640:	3d800000 	.word	0x3d800000
 8001644:	20000b10 	.word	0x20000b10
 8001648:	20000b0c 	.word	0x20000b0c
 800164c:	20000b08 	.word	0x20000b08

08001650 <delay_us>:




void delay_us(u32 delay){
	volatile u32 start=toc;
 8001650:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
void delay_us(u32 delay){
 8001654:	b082      	sub	sp, #8
	volatile u32 start=toc;
 8001656:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001658:	9301      	str	r3, [sp, #4]
	while((toc-start)<delay);
 800165a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800165c:	9a01      	ldr	r2, [sp, #4]
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	4283      	cmp	r3, r0
 8001662:	d3fa      	bcc.n	800165a <delay_us+0xa>
}
 8001664:	b002      	add	sp, #8
 8001666:	4770      	bx	lr

08001668 <I2C_write>:
	lsm9ds0.mag_stat = 789;
	lsm9ds0.temp = 7;
	lsm9ds0_Init();
}

uint8_t I2C_write(uint8_t addr,uint8_t reg,uint8_t *buf,uint8_t len){
 8001668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800166c:	ed2d 8b02 	vpush	{d8}
 8001670:	4682      	mov	sl, r0
	uint8_t statOk=!0;

	I2C_AcknowledgeConfig(IMU_I2C, ENABLE);
 8001672:	4898      	ldr	r0, [pc, #608]	; (80018d4 <I2C_write+0x26c>)
	I2C_GenerateSTART(IMU_I2C,ENABLE);
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,5e3);
 8001674:	4e98      	ldr	r6, [pc, #608]	; (80018d8 <I2C_write+0x270>)
uint8_t I2C_write(uint8_t addr,uint8_t reg,uint8_t *buf,uint8_t len){
 8001676:	b087      	sub	sp, #28
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,5e3);
 8001678:	4605      	mov	r5, r0
uint8_t I2C_write(uint8_t addr,uint8_t reg,uint8_t *buf,uint8_t len){
 800167a:	4689      	mov	r9, r1
	I2C_AcknowledgeConfig(IMU_I2C, ENABLE);
 800167c:	2101      	movs	r1, #1
uint8_t I2C_write(uint8_t addr,uint8_t reg,uint8_t *buf,uint8_t len){
 800167e:	4690      	mov	r8, r2
 8001680:	461f      	mov	r7, r3
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,5e3);
 8001682:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_AcknowledgeConfig(IMU_I2C, ENABLE);
 8001686:	f002 facd 	bl	8003c24 <I2C_AcknowledgeConfig>
	I2C_GenerateSTART(IMU_I2C,ENABLE);
 800168a:	2101      	movs	r1, #1
 800168c:	4628      	mov	r0, r5
 800168e:	f002 faa1 	bl	8003bd4 <I2C_GenerateSTART>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,5e3);
 8001692:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001696:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80018dc <I2C_write+0x274>
 800169a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800169e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a6:	edcd 7a01 	vstr	s15, [sp, #4]
 80016aa:	e003      	b.n	80016b4 <I2C_write+0x4c>
 80016ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d205      	bcs.n	80016c0 <I2C_write+0x58>
 80016b4:	4631      	mov	r1, r6
 80016b6:	4628      	mov	r0, r5
 80016b8:	f002 fae4 	bl	8003c84 <I2C_CheckEvent>
 80016bc:	2800      	cmp	r0, #0
 80016be:	d0f5      	beq.n	80016ac <I2C_write+0x44>
 80016c0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Transmitter);
 80016c4:	4651      	mov	r1, sl
 80016c6:	2200      	movs	r2, #0
 80016c8:	4882      	ldr	r0, [pc, #520]	; (80018d4 <I2C_write+0x26c>)
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,5e3);
 80016ca:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80016ce:	f8dd a004 	ldr.w	sl, [sp, #4]
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Transmitter);
 80016d2:	f002 fa9b 	bl	8003c0c <I2C_Send7bitAddress>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)),statOk,5e3);
 80016d6:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80016da:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80018dc <I2C_write+0x274>
 80016de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e2:	45d3      	cmp	fp, sl
 80016e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ec:	edcd 7a02 	vstr	s15, [sp, #8]
 80016f0:	f080 80a7 	bcs.w	8001842 <I2C_write+0x1da>
 80016f4:	4e7a      	ldr	r6, [pc, #488]	; (80018e0 <I2C_write+0x278>)
 80016f6:	4d77      	ldr	r5, [pc, #476]	; (80018d4 <I2C_write+0x26c>)
 80016f8:	e004      	b.n	8001704 <I2C_write+0x9c>
 80016fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016fc:	9b02      	ldr	r3, [sp, #8]
 80016fe:	429a      	cmp	r2, r3
 8001700:	f080 80b0 	bcs.w	8001864 <I2C_write+0x1fc>
 8001704:	4631      	mov	r1, r6
 8001706:	4628      	mov	r0, r5
 8001708:	f002 fabc 	bl	8003c84 <I2C_CheckEvent>
 800170c:	2800      	cmp	r0, #0
 800170e:	d0f4      	beq.n	80016fa <I2C_write+0x92>
 8001710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001716:	9b02      	ldr	r3, [sp, #8]
 8001718:	429a      	cmp	r2, r3
 800171a:	f0c0 80d7 	bcc.w	80018cc <I2C_write+0x264>

	I2C_SendData(IMU_I2C,reg); //Set MSB for reg. increment
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)),statOk,50e3);
 800171e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_SendData(IMU_I2C,reg); //Set MSB for reg. increment
 8001722:	4649      	mov	r1, r9
 8001724:	486b      	ldr	r0, [pc, #428]	; (80018d4 <I2C_write+0x26c>)
 8001726:	f002 faa7 	bl	8003c78 <I2C_SendData>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)),statOk,50e3);
 800172a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800172e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80018e4 <I2C_write+0x27c>
 8001732:	496d      	ldr	r1, [pc, #436]	; (80018e8 <I2C_write+0x280>)
 8001734:	4867      	ldr	r0, [pc, #412]	; (80018d4 <I2C_write+0x26c>)
 8001736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173a:	2600      	movs	r6, #0
 800173c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001744:	edcd 7a03 	vstr	s15, [sp, #12]
 8001748:	f002 fa9c 	bl	8003c84 <I2C_CheckEvent>
 800174c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800174e:	9b03      	ldr	r3, [sp, #12]

	while(len--){
 8001750:	1e7b      	subs	r3, r7, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	b387      	cbz	r7, 80017b8 <I2C_write+0x150>
		I2C_SendData(IMU_I2C,*buf++);
 8001756:	4c5f      	ldr	r4, [pc, #380]	; (80018d4 <I2C_write+0x26c>)
		TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING),statOk,5e3);
 8001758:	ed9f 8a60 	vldr	s16, [pc, #384]	; 80018dc <I2C_write+0x274>
 800175c:	4d62      	ldr	r5, [pc, #392]	; (80018e8 <I2C_write+0x280>)
 800175e:	eb08 0903 	add.w	r9, r8, r3
 8001762:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001766:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
		I2C_SendData(IMU_I2C,*buf++);
 800176a:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800176e:	4620      	mov	r0, r4
 8001770:	f002 fa82 	bl	8003c78 <I2C_SendData>
		TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING),statOk,5e3);
 8001774:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001784:	edcd 7a04 	vstr	s15, [sp, #16]
 8001788:	2e00      	cmp	r6, #0
 800178a:	d044      	beq.n	8001816 <I2C_write+0x1ae>
 800178c:	463e      	mov	r6, r7
 800178e:	e003      	b.n	8001798 <I2C_write+0x130>
 8001790:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001792:	9b04      	ldr	r3, [sp, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d245      	bcs.n	8001824 <I2C_write+0x1bc>
 8001798:	4629      	mov	r1, r5
 800179a:	4620      	mov	r0, r4
 800179c:	f002 fa72 	bl	8003c84 <I2C_CheckEvent>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d0f5      	beq.n	8001790 <I2C_write+0x128>
 80017a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80017aa:	9b04      	ldr	r3, [sp, #16]
 80017ac:	429e      	cmp	r6, r3
 80017ae:	bf2c      	ite	cs
 80017b0:	2600      	movcs	r6, #0
 80017b2:	2601      	movcc	r6, #1
	while(len--){
 80017b4:	45c1      	cmp	r9, r8
 80017b6:	d1d6      	bne.n	8001766 <I2C_write+0xfe>
	}
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,5e3);
 80017b8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80017bc:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80017c0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80018dc <I2C_write+0x274>
 80017c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d0:	edcd 7a05 	vstr	s15, [sp, #20]
 80017d4:	2e00      	cmp	r6, #0
 80017d6:	d02c      	beq.n	8001832 <I2C_write+0x1ca>
 80017d8:	4e44      	ldr	r6, [pc, #272]	; (80018ec <I2C_write+0x284>)
 80017da:	4d3e      	ldr	r5, [pc, #248]	; (80018d4 <I2C_write+0x26c>)
 80017dc:	e003      	b.n	80017e6 <I2C_write+0x17e>
 80017de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017e0:	9b05      	ldr	r3, [sp, #20]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d237      	bcs.n	8001856 <I2C_write+0x1ee>
 80017e6:	4631      	mov	r1, r6
 80017e8:	4628      	mov	r0, r5
 80017ea:	f002 fa4b 	bl	8003c84 <I2C_CheckEvent>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d0f5      	beq.n	80017de <I2C_write+0x176>
 80017f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80017f8:	9b05      	ldr	r3, [sp, #20]
 80017fa:	429c      	cmp	r4, r3
 80017fc:	bf34      	ite	cc
 80017fe:	2400      	movcc	r4, #0
 8001800:	2401      	movcs	r4, #1
	I2C_GenerateSTOP(IMU_I2C,ENABLE);
 8001802:	2101      	movs	r1, #1
 8001804:	4833      	ldr	r0, [pc, #204]	; (80018d4 <I2C_write+0x26c>)
 8001806:	f002 f9f3 	bl	8003bf0 <I2C_GenerateSTOP>
	return statOk!=1;
}
 800180a:	4620      	mov	r0, r4
 800180c:	b007      	add	sp, #28
 800180e:	ecbd 8b02 	vpop	{d8}
 8001812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING),statOk,5e3);
 8001816:	4629      	mov	r1, r5
 8001818:	4620      	mov	r0, r4
 800181a:	f002 fa33 	bl	8003c84 <I2C_CheckEvent>
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	9b04      	ldr	r3, [sp, #16]
 8001822:	e7c7      	b.n	80017b4 <I2C_write+0x14c>
 8001824:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8001826:	9b04      	ldr	r3, [sp, #16]
 8001828:	429e      	cmp	r6, r3
 800182a:	bf2c      	ite	cs
 800182c:	2600      	movcs	r6, #0
 800182e:	2601      	movcc	r6, #1
 8001830:	e7c0      	b.n	80017b4 <I2C_write+0x14c>
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,5e3);
 8001832:	492e      	ldr	r1, [pc, #184]	; (80018ec <I2C_write+0x284>)
 8001834:	4827      	ldr	r0, [pc, #156]	; (80018d4 <I2C_write+0x26c>)
 8001836:	f002 fa25 	bl	8003c84 <I2C_CheckEvent>
 800183a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800183c:	9b05      	ldr	r3, [sp, #20]
 800183e:	2401      	movs	r4, #1
 8001840:	e7df      	b.n	8001802 <I2C_write+0x19a>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)),statOk,5e3);
 8001842:	4927      	ldr	r1, [pc, #156]	; (80018e0 <I2C_write+0x278>)
 8001844:	4823      	ldr	r0, [pc, #140]	; (80018d4 <I2C_write+0x26c>)
 8001846:	f002 fa1d 	bl	8003c84 <I2C_CheckEvent>
 800184a:	2800      	cmp	r0, #0
 800184c:	f47f af60 	bne.w	8001710 <I2C_write+0xa8>
 8001850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001852:	9b02      	ldr	r3, [sp, #8]
 8001854:	e763      	b.n	800171e <I2C_write+0xb6>
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,5e3);
 8001856:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8001858:	9b05      	ldr	r3, [sp, #20]
 800185a:	429c      	cmp	r4, r3
 800185c:	bf34      	ite	cc
 800185e:	2400      	movcc	r4, #0
 8001860:	2401      	movcs	r4, #1
 8001862:	e7ce      	b.n	8001802 <I2C_write+0x19a>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)),statOk,5e3);
 8001864:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001866:	9b02      	ldr	r3, [sp, #8]
 8001868:	429a      	cmp	r2, r3
 800186a:	f4bf af58 	bcs.w	800171e <I2C_write+0xb6>
	I2C_SendData(IMU_I2C,reg); //Set MSB for reg. increment
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <I2C_write+0x26c>)
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)),statOk,50e3);
 8001870:	4e1d      	ldr	r6, [pc, #116]	; (80018e8 <I2C_write+0x280>)
	I2C_SendData(IMU_I2C,reg); //Set MSB for reg. increment
 8001872:	4649      	mov	r1, r9
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)),statOk,50e3);
 8001874:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001878:	4605      	mov	r5, r0
	I2C_SendData(IMU_I2C,reg); //Set MSB for reg. increment
 800187a:	f002 f9fd 	bl	8003c78 <I2C_SendData>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)),statOk,50e3);
 800187e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001882:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80018e4 <I2C_write+0x27c>
 8001886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800188e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001892:	edcd 7a03 	vstr	s15, [sp, #12]
 8001896:	e003      	b.n	80018a0 <I2C_write+0x238>
 8001898:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800189a:	9b03      	ldr	r3, [sp, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d20e      	bcs.n	80018be <I2C_write+0x256>
 80018a0:	4631      	mov	r1, r6
 80018a2:	4628      	mov	r0, r5
 80018a4:	f002 f9ee 	bl	8003c84 <I2C_CheckEvent>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d0f5      	beq.n	8001898 <I2C_write+0x230>
 80018ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80018b2:	9b03      	ldr	r3, [sp, #12]
 80018b4:	429e      	cmp	r6, r3
 80018b6:	bf2c      	ite	cs
 80018b8:	2600      	movcs	r6, #0
 80018ba:	2601      	movcc	r6, #1
 80018bc:	e748      	b.n	8001750 <I2C_write+0xe8>
 80018be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80018c0:	9b03      	ldr	r3, [sp, #12]
 80018c2:	429e      	cmp	r6, r3
 80018c4:	bf2c      	ite	cs
 80018c6:	2600      	movcs	r6, #0
 80018c8:	2601      	movcc	r6, #1
 80018ca:	e741      	b.n	8001750 <I2C_write+0xe8>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)),statOk,5e3);
 80018cc:	45d3      	cmp	fp, sl
 80018ce:	d3ce      	bcc.n	800186e <I2C_write+0x206>
 80018d0:	e725      	b.n	800171e <I2C_write+0xb6>
 80018d2:	bf00      	nop
 80018d4:	40005800 	.word	0x40005800
 80018d8:	00030001 	.word	0x00030001
 80018dc:	459c4000 	.word	0x459c4000
 80018e0:	00070082 	.word	0x00070082
 80018e4:	47435000 	.word	0x47435000
 80018e8:	00070080 	.word	0x00070080
 80018ec:	00070084 	.word	0x00070084

080018f0 <I2C_read>:

uint8_t I2C_read(uint8_t addr,uint8_t reg,uint8_t *buf,uint8_t len){
 80018f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f4:	ed2d 8b02 	vpush	{d8}
 80018f8:	4680      	mov	r8, r0
	uint8_t statOk=!0;

	I2C_AcknowledgeConfig(IMU_I2C, ENABLE);
 80018fa:	48c1      	ldr	r0, [pc, #772]	; (8001c00 <I2C_read+0x310>)
	I2C_GenerateSTART(IMU_I2C,ENABLE);
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 80018fc:	4ec1      	ldr	r6, [pc, #772]	; (8001c04 <I2C_read+0x314>)
uint8_t I2C_read(uint8_t addr,uint8_t reg,uint8_t *buf,uint8_t len){
 80018fe:	b08b      	sub	sp, #44	; 0x2c
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 8001900:	4605      	mov	r5, r0
uint8_t I2C_read(uint8_t addr,uint8_t reg,uint8_t *buf,uint8_t len){
 8001902:	468a      	mov	sl, r1
	I2C_AcknowledgeConfig(IMU_I2C, ENABLE);
 8001904:	2101      	movs	r1, #1
uint8_t I2C_read(uint8_t addr,uint8_t reg,uint8_t *buf,uint8_t len){
 8001906:	4617      	mov	r7, r2
 8001908:	4699      	mov	r9, r3
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 800190a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_AcknowledgeConfig(IMU_I2C, ENABLE);
 800190e:	f002 f989 	bl	8003c24 <I2C_AcknowledgeConfig>
	I2C_GenerateSTART(IMU_I2C,ENABLE);
 8001912:	2101      	movs	r1, #1
 8001914:	4628      	mov	r0, r5
 8001916:	f002 f95d 	bl	8003bd4 <I2C_GenerateSTART>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 800191a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800191e:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001c08 <I2C_read+0x318>
 8001922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800192a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192e:	edcd 7a03 	vstr	s15, [sp, #12]
 8001932:	e003      	b.n	800193c <I2C_read+0x4c>
 8001934:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d205      	bcs.n	8001948 <I2C_read+0x58>
 800193c:	4631      	mov	r1, r6
 800193e:	4628      	mov	r0, r5
 8001940:	f002 f9a0 	bl	8003c84 <I2C_CheckEvent>
 8001944:	2800      	cmp	r0, #0
 8001946:	d0f5      	beq.n	8001934 <I2C_read+0x44>
 8001948:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Transmitter);
 800194c:	2200      	movs	r2, #0
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 800194e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8001952:	9b03      	ldr	r3, [sp, #12]
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Transmitter);
 8001954:	48aa      	ldr	r0, [pc, #680]	; (8001c00 <I2C_read+0x310>)
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 8001956:	9301      	str	r3, [sp, #4]
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Transmitter);
 8001958:	4641      	mov	r1, r8
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 800195a:	461d      	mov	r5, r3
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Transmitter);
 800195c:	f002 f956 	bl	8003c0c <I2C_Send7bitAddress>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)),statOk,1e3);
 8001960:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001964:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001c08 <I2C_read+0x318>
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	45ab      	cmp	fp, r5
 800196e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001976:	edcd 7a04 	vstr	s15, [sp, #16]
 800197a:	f080 80ef 	bcs.w	8001b5c <I2C_read+0x26c>
 800197e:	4ea3      	ldr	r6, [pc, #652]	; (8001c0c <I2C_read+0x31c>)
 8001980:	4d9f      	ldr	r5, [pc, #636]	; (8001c00 <I2C_read+0x310>)
 8001982:	e004      	b.n	800198e <I2C_read+0x9e>
 8001984:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001986:	9b04      	ldr	r3, [sp, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	f080 80f8 	bcs.w	8001b7e <I2C_read+0x28e>
 800198e:	4631      	mov	r1, r6
 8001990:	4628      	mov	r0, r5
 8001992:	f002 f977 	bl	8003c84 <I2C_CheckEvent>
 8001996:	2800      	cmp	r0, #0
 8001998:	d0f4      	beq.n	8001984 <I2C_read+0x94>
 800199a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800199e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a0:	9b04      	ldr	r3, [sp, #16]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f0c0 818b 	bcc.w	8001cbe <I2C_read+0x3ce>

	I2C_SendData(IMU_I2C,reg); //OUT_X_L_G + MSB
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,1e3);
 80019a8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_SendData(IMU_I2C,reg); //OUT_X_L_G + MSB
 80019ac:	4651      	mov	r1, sl
 80019ae:	4894      	ldr	r0, [pc, #592]	; (8001c00 <I2C_read+0x310>)
 80019b0:	f002 f962 	bl	8003c78 <I2C_SendData>
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,1e3);
 80019b4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80019b8:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001c08 <I2C_read+0x318>
 80019bc:	4994      	ldr	r1, [pc, #592]	; (8001c10 <I2C_read+0x320>)
 80019be:	4890      	ldr	r0, [pc, #576]	; (8001c00 <I2C_read+0x310>)
 80019c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019cc:	edcd 7a05 	vstr	s15, [sp, #20]
 80019d0:	f002 f958 	bl	8003c84 <I2C_CheckEvent>
 80019d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019d6:	9b05      	ldr	r3, [sp, #20]

	I2C_GenerateSTART(IMU_I2C,ENABLE);
 80019d8:	4889      	ldr	r0, [pc, #548]	; (8001c00 <I2C_read+0x310>)
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 80019da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_GenerateSTART(IMU_I2C,ENABLE);
 80019de:	2101      	movs	r1, #1
 80019e0:	f002 f8f8 	bl	8003bd4 <I2C_GenerateSTART>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 80019e4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80019e8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001c08 <I2C_read+0x318>
 80019ec:	4985      	ldr	r1, [pc, #532]	; (8001c04 <I2C_read+0x314>)
 80019ee:	4884      	ldr	r0, [pc, #528]	; (8001c00 <I2C_read+0x310>)
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fc:	edcd 7a06 	vstr	s15, [sp, #24]
 8001a00:	f002 f940 	bl	8003c84 <I2C_CheckEvent>
 8001a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a06:	9b06      	ldr	r3, [sp, #24]

	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Receiver);
 8001a08:	487d      	ldr	r0, [pc, #500]	; (8001c00 <I2C_read+0x310>)
 8001a0a:	4641      	mov	r1, r8
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)),statOk,50e3);
 8001a0c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Receiver);
 8001a10:	2201      	movs	r2, #1
 8001a12:	f002 f8fb 	bl	8003c0c <I2C_Send7bitAddress>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)),statOk,50e3);
 8001a16:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001a1a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001c14 <I2C_read+0x324>
 8001a1e:	497e      	ldr	r1, [pc, #504]	; (8001c18 <I2C_read+0x328>)
 8001a20:	4877      	ldr	r0, [pc, #476]	; (8001c00 <I2C_read+0x310>)
 8001a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a26:	f04f 0800 	mov.w	r8, #0
 8001a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a32:	edcd 7a07 	vstr	s15, [sp, #28]
 8001a36:	f002 f925 	bl	8003c84 <I2C_CheckEvent>
 8001a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a3c:	9b07      	ldr	r3, [sp, #28]
	len--;
	while(len--){
 8001a3e:	f1a9 0a02 	sub.w	sl, r9, #2
 8001a42:	f1b9 0f01 	cmp.w	r9, #1
 8001a46:	fa5f fa8a 	uxtb.w	sl, sl
 8001a4a:	d037      	beq.n	8001abc <I2C_read+0x1cc>
		TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_RECEIVED)),statOk,1e3);
 8001a4c:	ed9f 8a6e 	vldr	s16, [pc, #440]	; 8001c08 <I2C_read+0x318>
 8001a50:	4d72      	ldr	r5, [pc, #456]	; (8001c1c <I2C_read+0x32c>)
 8001a52:	4c6b      	ldr	r4, [pc, #428]	; (8001c00 <I2C_read+0x310>)
 8001a54:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
 8001a58:	eb07 0b0a 	add.w	fp, r7, sl
 8001a5c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001a60:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 8001a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a68:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a70:	edcd 7a08 	vstr	s15, [sp, #32]
 8001a74:	f1b8 0f00 	cmp.w	r8, #0
 8001a78:	d058      	beq.n	8001b2c <I2C_read+0x23c>
 8001a7a:	46b0      	mov	r8, r6
 8001a7c:	e004      	b.n	8001a88 <I2C_read+0x198>
 8001a7e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8001a82:	9b08      	ldr	r3, [sp, #32]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d258      	bcs.n	8001b3a <I2C_read+0x24a>
 8001a88:	4629      	mov	r1, r5
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f002 f8fa 	bl	8003c84 <I2C_CheckEvent>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d0f4      	beq.n	8001a7e <I2C_read+0x18e>
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a98:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a9a:	9b08      	ldr	r3, [sp, #32]
 8001a9c:	4298      	cmp	r0, r3
 8001a9e:	bf2c      	ite	cs
 8001aa0:	f04f 0800 	movcs.w	r8, #0
 8001aa4:	f04f 0801 	movcc.w	r8, #1
		*buf++=I2C_ReceiveData(IMU_I2C);
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f002 f8e7 	bl	8003c7c <I2C_ReceiveData>
 8001aae:	f809 0f01 	strb.w	r0, [r9, #1]!
	while(len--){
 8001ab2:	45d9      	cmp	r9, fp
 8001ab4:	d1d2      	bne.n	8001a5c <I2C_read+0x16c>
 8001ab6:	f10a 0a01 	add.w	sl, sl, #1
 8001aba:	4457      	add	r7, sl
	}
	I2C_AcknowledgeConfig(IMU_I2C, DISABLE);
 8001abc:	2100      	movs	r1, #0
 8001abe:	4850      	ldr	r0, [pc, #320]	; (8001c00 <I2C_read+0x310>)
 8001ac0:	f002 f8b0 	bl	8003c24 <I2C_AcknowledgeConfig>
	I2C_GenerateSTOP(IMU_I2C, ENABLE);
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_RECEIVED)),statOk,1e3);
 8001ac4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	I2C_GenerateSTOP(IMU_I2C, ENABLE);
 8001ac8:	2101      	movs	r1, #1
 8001aca:	484d      	ldr	r0, [pc, #308]	; (8001c00 <I2C_read+0x310>)
 8001acc:	f002 f890 	bl	8003bf0 <I2C_GenerateSTOP>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_RECEIVED)),statOk,1e3);
 8001ad0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001ad4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001c08 <I2C_read+0x318>
 8001ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8001ae8:	f1b8 0f00 	cmp.w	r8, #0
 8001aec:	d02e      	beq.n	8001b4c <I2C_read+0x25c>
 8001aee:	4e4b      	ldr	r6, [pc, #300]	; (8001c1c <I2C_read+0x32c>)
 8001af0:	4d43      	ldr	r5, [pc, #268]	; (8001c00 <I2C_read+0x310>)
 8001af2:	e003      	b.n	8001afc <I2C_read+0x20c>
 8001af4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d239      	bcs.n	8001b70 <I2C_read+0x280>
 8001afc:	4631      	mov	r1, r6
 8001afe:	4628      	mov	r0, r5
 8001b00:	f002 f8c0 	bl	8003c84 <I2C_CheckEvent>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d0f5      	beq.n	8001af4 <I2C_read+0x204>
 8001b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b10:	429c      	cmp	r4, r3
 8001b12:	bf34      	ite	cc
 8001b14:	2400      	movcc	r4, #0
 8001b16:	2401      	movcs	r4, #1
	*buf++=I2C_ReceiveData(IMU_I2C);
 8001b18:	4839      	ldr	r0, [pc, #228]	; (8001c00 <I2C_read+0x310>)
 8001b1a:	f002 f8af 	bl	8003c7c <I2C_ReceiveData>
 8001b1e:	7038      	strb	r0, [r7, #0]
	return statOk!=1;
}
 8001b20:	4620      	mov	r0, r4
 8001b22:	b00b      	add	sp, #44	; 0x2c
 8001b24:	ecbd 8b02 	vpop	{d8}
 8001b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_RECEIVED)),statOk,1e3);
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f002 f8a8 	bl	8003c84 <I2C_CheckEvent>
 8001b34:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b36:	9b08      	ldr	r3, [sp, #32]
 8001b38:	e7b6      	b.n	8001aa8 <I2C_read+0x1b8>
 8001b3a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001b3c:	9b08      	ldr	r3, [sp, #32]
 8001b3e:	4298      	cmp	r0, r3
 8001b40:	bf2c      	ite	cs
 8001b42:	f04f 0800 	movcs.w	r8, #0
 8001b46:	f04f 0801 	movcc.w	r8, #1
 8001b4a:	e7ad      	b.n	8001aa8 <I2C_read+0x1b8>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_RECEIVED)),statOk,1e3);
 8001b4c:	4933      	ldr	r1, [pc, #204]	; (8001c1c <I2C_read+0x32c>)
 8001b4e:	482c      	ldr	r0, [pc, #176]	; (8001c00 <I2C_read+0x310>)
 8001b50:	f002 f898 	bl	8003c84 <I2C_CheckEvent>
 8001b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b58:	2401      	movs	r4, #1
 8001b5a:	e7dd      	b.n	8001b18 <I2C_read+0x228>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)),statOk,1e3);
 8001b5c:	492b      	ldr	r1, [pc, #172]	; (8001c0c <I2C_read+0x31c>)
 8001b5e:	4828      	ldr	r0, [pc, #160]	; (8001c00 <I2C_read+0x310>)
 8001b60:	f002 f890 	bl	8003c84 <I2C_CheckEvent>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	f47f af18 	bne.w	800199a <I2C_read+0xaa>
 8001b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b6c:	9b04      	ldr	r3, [sp, #16]
 8001b6e:	e71b      	b.n	80019a8 <I2C_read+0xb8>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_RECEIVED)),statOk,1e3);
 8001b70:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8001b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b74:	429c      	cmp	r4, r3
 8001b76:	bf34      	ite	cc
 8001b78:	2400      	movcc	r4, #0
 8001b7a:	2401      	movcs	r4, #1
 8001b7c:	e7cc      	b.n	8001b18 <I2C_read+0x228>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)),statOk,1e3);
 8001b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b80:	9a04      	ldr	r2, [sp, #16]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	f67f af10 	bls.w	80019a8 <I2C_read+0xb8>
	I2C_SendData(IMU_I2C,reg); //OUT_X_L_G + MSB
 8001b88:	481d      	ldr	r0, [pc, #116]	; (8001c00 <I2C_read+0x310>)
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,1e3);
 8001b8a:	4e21      	ldr	r6, [pc, #132]	; (8001c10 <I2C_read+0x320>)
	I2C_SendData(IMU_I2C,reg); //OUT_X_L_G + MSB
 8001b8c:	4651      	mov	r1, sl
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,1e3);
 8001b8e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001b92:	4605      	mov	r5, r0
	I2C_SendData(IMU_I2C,reg); //OUT_X_L_G + MSB
 8001b94:	f002 f870 	bl	8003c78 <I2C_SendData>
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,1e3);
 8001b98:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001b9c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001c08 <I2C_read+0x318>
 8001ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bac:	edcd 7a05 	vstr	s15, [sp, #20]
 8001bb0:	e003      	b.n	8001bba <I2C_read+0x2ca>
 8001bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bb4:	9b05      	ldr	r3, [sp, #20]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d277      	bcs.n	8001caa <I2C_read+0x3ba>
 8001bba:	4631      	mov	r1, r6
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f002 f861 	bl	8003c84 <I2C_CheckEvent>
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d0f5      	beq.n	8001bb2 <I2C_read+0x2c2>
 8001bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	9a05      	ldr	r2, [sp, #20]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	f67f af02 	bls.w	80019d8 <I2C_read+0xe8>
	I2C_GenerateSTART(IMU_I2C,ENABLE);
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <I2C_read+0x310>)
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 8001bd6:	4e0b      	ldr	r6, [pc, #44]	; (8001c04 <I2C_read+0x314>)
	I2C_GenerateSTART(IMU_I2C,ENABLE);
 8001bd8:	2101      	movs	r1, #1
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 8001bda:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001bde:	4605      	mov	r5, r0
	I2C_GenerateSTART(IMU_I2C,ENABLE);
 8001be0:	f001 fff8 	bl	8003bd4 <I2C_GenerateSTART>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 8001be4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001be8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c08 <I2C_read+0x318>
 8001bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf8:	edcd 7a06 	vstr	s15, [sp, #24]
 8001bfc:	e014      	b.n	8001c28 <I2C_read+0x338>
 8001bfe:	bf00      	nop
 8001c00:	40005800 	.word	0x40005800
 8001c04:	00030001 	.word	0x00030001
 8001c08:	447a0000 	.word	0x447a0000
 8001c0c:	00070082 	.word	0x00070082
 8001c10:	00070084 	.word	0x00070084
 8001c14:	47435000 	.word	0x47435000
 8001c18:	00030002 	.word	0x00030002
 8001c1c:	00030040 	.word	0x00030040
 8001c20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c22:	9b06      	ldr	r3, [sp, #24]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d245      	bcs.n	8001cb4 <I2C_read+0x3c4>
 8001c28:	4631      	mov	r1, r6
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f002 f82a 	bl	8003c84 <I2C_CheckEvent>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d0f5      	beq.n	8001c20 <I2C_read+0x330>
 8001c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	9a06      	ldr	r2, [sp, #24]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f67f aee3 	bls.w	8001a08 <I2C_read+0x118>
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Receiver);
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <I2C_read+0x3d8>)
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)),statOk,50e3);
 8001c44:	4e21      	ldr	r6, [pc, #132]	; (8001ccc <I2C_read+0x3dc>)
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Receiver);
 8001c46:	4641      	mov	r1, r8
 8001c48:	2201      	movs	r2, #1
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)),statOk,50e3);
 8001c4a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001c4e:	4605      	mov	r5, r0
	I2C_Send7bitAddress(IMU_I2C,addr,I2C_Direction_Receiver);
 8001c50:	f001 ffdc 	bl	8003c0c <I2C_Send7bitAddress>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)),statOk,50e3);
 8001c54:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001c58:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001cd0 <I2C_read+0x3e0>
 8001c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c68:	edcd 7a07 	vstr	s15, [sp, #28]
 8001c6c:	e003      	b.n	8001c76 <I2C_read+0x386>
 8001c6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c70:	9b07      	ldr	r3, [sp, #28]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d210      	bcs.n	8001c98 <I2C_read+0x3a8>
 8001c76:	4631      	mov	r1, r6
 8001c78:	4628      	mov	r0, r5
 8001c7a:	f002 f803 	bl	8003c84 <I2C_CheckEvent>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d0f5      	beq.n	8001c6e <I2C_read+0x37e>
 8001c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c88:	9b07      	ldr	r3, [sp, #28]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	bf2c      	ite	cs
 8001c8e:	f04f 0800 	movcs.w	r8, #0
 8001c92:	f04f 0801 	movcc.w	r8, #1
 8001c96:	e6d2      	b.n	8001a3e <I2C_read+0x14e>
 8001c98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c9a:	9b07      	ldr	r3, [sp, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	bf2c      	ite	cs
 8001ca0:	f04f 0800 	movcs.w	r8, #0
 8001ca4:	f04f 0801 	movcc.w	r8, #1
 8001ca8:	e6c9      	b.n	8001a3e <I2C_read+0x14e>
	TIMEDWHILE(!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED),statOk,1e3);
 8001caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cac:	9a05      	ldr	r2, [sp, #20]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d890      	bhi.n	8001bd4 <I2C_read+0x2e4>
 8001cb2:	e691      	b.n	80019d8 <I2C_read+0xe8>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_MODE_SELECT)),statOk,1e3);
 8001cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cb6:	9a06      	ldr	r2, [sp, #24]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8c2      	bhi.n	8001c42 <I2C_read+0x352>
 8001cbc:	e6a4      	b.n	8001a08 <I2C_read+0x118>
	TIMEDWHILE((!I2C_CheckEvent(IMU_I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)),statOk,1e3);
 8001cbe:	9b01      	ldr	r3, [sp, #4]
 8001cc0:	459b      	cmp	fp, r3
 8001cc2:	f4ff af61 	bcc.w	8001b88 <I2C_read+0x298>
 8001cc6:	e66f      	b.n	80019a8 <I2C_read+0xb8>
 8001cc8:	40005800 	.word	0x40005800
 8001ccc:	00030002 	.word	0x00030002
 8001cd0:	47435000 	.word	0x47435000

08001cd4 <LedInit>:
void LedInit(void){
 8001cd4:	b500      	push	{lr}
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 8001cd6:	2101      	movs	r1, #1
void LedInit(void){
 8001cd8:	b083      	sub	sp, #12
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f002 f828 	bl	8003d30 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_12;
 8001ce0:	f241 0204 	movw	r2, #4100	; 0x1004
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001ce4:	2301      	movs	r3, #1
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ce6:	4669      	mov	r1, sp
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <LedInit+0x24>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001cea:	e88d 000c 	stmia.w	sp, {r2, r3}
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001cee:	f001 fdf5 	bl	80038dc <GPIO_Init>
}
 8001cf2:	b003      	add	sp, #12
 8001cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cf8:	40020400 	.word	0x40020400

08001cfc <GenTimInit>:
void GenTimInit(void){
 8001cfc:	b510      	push	{r4, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001cfe:	2101      	movs	r1, #1
void GenTimInit(void){
 8001d00:	b084      	sub	sp, #16
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001d02:	4608      	mov	r0, r1
 8001d04:	f002 f82c 	bl	8003d60 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Prescaler = (84-1); //us CHECK prescaler
 8001d08:	a904      	add	r1, sp, #16
 8001d0a:	2353      	movs	r3, #83	; 0x53
 8001d0c:	f841 3d0c 	str.w	r3, [r1, #-12]!
	TIM_TimeBaseStructure.TIM_ClockDivision = 1;
 8001d10:	2401      	movs	r4, #1
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001d16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 8001d1a:	9302      	str	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = 1;
 8001d1c:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001d20:	f001 fe46 	bl	80039b0 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8001d24:	4621      	mov	r1, r4
 8001d26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d2a:	f001 fe8f 	bl	8003a4c <TIM_Cmd>
}
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	bf00      	nop

08001d34 <imu_init>:
void imu_init(void){
 8001d34:	b570      	push	{r4, r5, r6, lr}
	I2C_DeInit(IMU_I2C);
 8001d36:	4850      	ldr	r0, [pc, #320]	; (8001e78 <imu_init+0x144>)
	GPIO_Init(IMU_SCL_PORT, &GPIO_InitStructure);
 8001d38:	4c50      	ldr	r4, [pc, #320]	; (8001e7c <imu_init+0x148>)
void imu_init(void){
 8001d3a:	b08a      	sub	sp, #40	; 0x28
	I2C_DeInit(IMU_I2C);
 8001d3c:	f001 fe94 	bl	8003a68 <I2C_DeInit>
	I2C_Cmd(IMU_I2C, DISABLE);
 8001d40:	2100      	movs	r1, #0
 8001d42:	484d      	ldr	r0, [pc, #308]	; (8001e78 <imu_init+0x144>)
 8001d44:	f001 ff38 	bl	8003bb8 <I2C_Cmd>
	I2C_SoftwareResetCmd(IMU_I2C, ENABLE);
 8001d48:	2101      	movs	r1, #1
 8001d4a:	484b      	ldr	r0, [pc, #300]	; (8001e78 <imu_init+0x144>)
 8001d4c:	f001 ff78 	bl	8003c40 <I2C_SoftwareResetCmd>
	I2C_SoftwareResetCmd(IMU_I2C, DISABLE);
 8001d50:	2100      	movs	r1, #0
 8001d52:	4849      	ldr	r0, [pc, #292]	; (8001e78 <imu_init+0x144>)
 8001d54:	f001 ff74 	bl	8003c40 <I2C_SoftwareResetCmd>
	IMU_I2C_CLK(ENABLE);
 8001d58:	2101      	movs	r1, #1
 8001d5a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001d5e:	f001 ffff 	bl	8003d60 <RCC_APB1PeriphClockCmd>
	IMU_PORT_CLK(ENABLE);
 8001d62:	2101      	movs	r1, #1
 8001d64:	2002      	movs	r0, #2
 8001d66:	f001 ffe3 	bl	8003d30 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = IMU_SCL_PIN;
 8001d6a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001d6e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
	GPIO_Init(IMU_SCL_PORT, &GPIO_InitStructure);
 8001d72:	4620      	mov	r0, r4
 8001d74:	a904      	add	r1, sp, #16
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001d76:	9305      	str	r3, [sp, #20]
	GPIO_InitStructure.GPIO_Pin = IMU_SDA_PIN;
 8001d78:	f44f 6600 	mov.w	r6, #2048	; 0x800
	GPIO_InitStructure.GPIO_Pin = IMU_SCL_PIN;
 8001d7c:	9504      	str	r5, [sp, #16]
	GPIO_Init(IMU_SCL_PORT, &GPIO_InitStructure);
 8001d7e:	f001 fdad 	bl	80038dc <GPIO_Init>
	GPIO_Init(IMU_SDA_PORT, &GPIO_InitStructure);
 8001d82:	a904      	add	r1, sp, #16
 8001d84:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Pin = IMU_SDA_PIN;
 8001d86:	9604      	str	r6, [sp, #16]
	GPIO_Init(IMU_SDA_PORT, &GPIO_InitStructure);
 8001d88:	f001 fda8 	bl	80038dc <GPIO_Init>
	IMU_SDA_PORT->BSRRL = IMU_SDA_PIN;
 8001d8c:	8326      	strh	r6, [r4, #24]
	IMU_SCL_PORT->BSRRL = IMU_SCL_PIN;
 8001d8e:	8325      	strh	r5, [r4, #24]
	while( (i--) && ((IMU_SDA_PORT->IDR&IMU_SDA_PIN)==0)){
 8001d90:	6923      	ldr	r3, [r4, #16]
 8001d92:	051a      	lsls	r2, r3, #20
 8001d94:	d418      	bmi.n	8001dc8 <imu_init+0x94>
		IMU_SCL_PORT->BSRRH = IMU_SCL_PIN;
 8001d96:	4620      	mov	r0, r4
	volatile u32 start=toc;
 8001d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	while( (i--) && ((IMU_SDA_PORT->IDR&IMU_SDA_PIN)==0)){
 8001d9c:	2408      	movs	r4, #8
	volatile u32 start=toc;
 8001d9e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001da0:	9302      	str	r3, [sp, #8]
	while((toc-start)<delay);
 8001da2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001da4:	9902      	ldr	r1, [sp, #8]
 8001da6:	1a5b      	subs	r3, r3, r1
 8001da8:	2bc7      	cmp	r3, #199	; 0xc7
 8001daa:	d9fa      	bls.n	8001da2 <imu_init+0x6e>
		IMU_SCL_PORT->BSRRH = IMU_SCL_PIN;
 8001dac:	8345      	strh	r5, [r0, #26]
	volatile u32 start=toc;
 8001dae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001db0:	9301      	str	r3, [sp, #4]
	while((toc-start)<delay);
 8001db2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001db4:	9901      	ldr	r1, [sp, #4]
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	2bc7      	cmp	r3, #199	; 0xc7
 8001dba:	d9fa      	bls.n	8001db2 <imu_init+0x7e>
	while( (i--) && ((IMU_SDA_PORT->IDR&IMU_SDA_PIN)==0)){
 8001dbc:	3c01      	subs	r4, #1
		IMU_SCL_PORT->BSRRL = IMU_SCL_PIN;
 8001dbe:	8305      	strh	r5, [r0, #24]
	while( (i--) && ((IMU_SDA_PORT->IDR&IMU_SDA_PIN)==0)){
 8001dc0:	d002      	beq.n	8001dc8 <imu_init+0x94>
 8001dc2:	6903      	ldr	r3, [r0, #16]
 8001dc4:	051b      	lsls	r3, r3, #20
 8001dc6:	d5ea      	bpl.n	8001d9e <imu_init+0x6a>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001dc8:	2100      	movs	r1, #0
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001dca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed=100e3;
 8001dce:	4a2c      	ldr	r2, [pc, #176]	; (8001e80 <imu_init+0x14c>)
	I2C_Init(IMU_I2C, &I2C_InitStructure);
 8001dd0:	4829      	ldr	r0, [pc, #164]	; (8001e78 <imu_init+0x144>)
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001dd2:	f8ad 101c 	strh.w	r1, [sp, #28]
	I2C_InitStructure.I2C_OwnAddress1 = 0x01;
 8001dd6:	2401      	movs	r4, #1
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001dd8:	f44f 6580 	mov.w	r5, #1024	; 0x400
	I2C_Init(IMU_I2C, &I2C_InitStructure);
 8001ddc:	a906      	add	r1, sp, #24
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001dde:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	I2C_InitStructure.I2C_DutyCycle=I2C_DutyCycle_16_9;
 8001de2:	f8ad 301e 	strh.w	r3, [sp, #30]
	I2C_InitStructure.I2C_ClockSpeed=100e3;
 8001de6:	9206      	str	r2, [sp, #24]
	I2C_InitStructure.I2C_OwnAddress1 = 0x01;
 8001de8:	f8ad 4020 	strh.w	r4, [sp, #32]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001dec:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	I2C_Init(IMU_I2C, &I2C_InitStructure);
 8001df0:	f001 fe70 	bl	8003ad4 <I2C_Init>
	I2C_StretchClockCmd(IMU_I2C,ENABLE);
 8001df4:	4621      	mov	r1, r4
 8001df6:	4820      	ldr	r0, [pc, #128]	; (8001e78 <imu_init+0x144>)
 8001df8:	f001 ff30 	bl	8003c5c <I2C_StretchClockCmd>
	I2C_Cmd(IMU_I2C, ENABLE);
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	481e      	ldr	r0, [pc, #120]	; (8001e78 <imu_init+0x144>)
 8001e00:	f001 feda 	bl	8003bb8 <I2C_Cmd>
	IMU_SCL_SET_AF;
 8001e04:	2204      	movs	r2, #4
 8001e06:	210a      	movs	r1, #10
 8001e08:	481c      	ldr	r0, [pc, #112]	; (8001e7c <imu_init+0x148>)
 8001e0a:	f001 fdbb 	bl	8003984 <GPIO_PinAFConfig>
	IMU_SDA_SET_AF;
 8001e0e:	2204      	movs	r2, #4
 8001e10:	210b      	movs	r1, #11
 8001e12:	481a      	ldr	r0, [pc, #104]	; (8001e7c <imu_init+0x148>)
 8001e14:	f001 fdb6 	bl	8003984 <GPIO_PinAFConfig>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001e18:	2302      	movs	r3, #2
	GPIO_Init(IMU_SCL_PORT, &GPIO_InitStructure);
 8001e1a:	a904      	add	r1, sp, #16
 8001e1c:	4817      	ldr	r0, [pc, #92]	; (8001e7c <imu_init+0x148>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001e1e:	f88d 3014 	strb.w	r3, [sp, #20]
	GPIO_InitStructure.GPIO_Pin = IMU_SCL_PIN;
 8001e22:	9504      	str	r5, [sp, #16]
	GPIO_Init(IMU_SCL_PORT, &GPIO_InitStructure);
 8001e24:	f001 fd5a 	bl	80038dc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = IMU_SDA_PIN;
 8001e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
	GPIO_Init(IMU_SDA_PORT, &GPIO_InitStructure);
 8001e2c:	a904      	add	r1, sp, #16
 8001e2e:	4813      	ldr	r0, [pc, #76]	; (8001e7c <imu_init+0x148>)
	GPIO_InitStructure.GPIO_Pin = IMU_SDA_PIN;
 8001e30:	9304      	str	r3, [sp, #16]
	GPIO_Init(IMU_SDA_PORT, &GPIO_InitStructure);
 8001e32:	f001 fd53 	bl	80038dc <GPIO_Init>
	volatile u32 start=toc;
 8001e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	while((toc-start)<delay);
 8001e3a:	4619      	mov	r1, r3
	volatile u32 start=toc;
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	9303      	str	r3, [sp, #12]
	while((toc-start)<delay);
 8001e40:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001e42:	9a03      	ldr	r2, [sp, #12]
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e4a:	d3f9      	bcc.n	8001e40 <imu_init+0x10c>
	lsm9ds0.i2c_rd = &I2C_read;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <imu_init+0x150>)
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <imu_init+0x154>)
	lsm9ds0.delay_us = &delay_us;
 8001e50:	480e      	ldr	r0, [pc, #56]	; (8001e8c <imu_init+0x158>)
	lsm9ds0.i2c_rd = &I2C_read;
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
	lsm9ds0.mag_stat = 789;
 8001e54:	f240 3115 	movw	r1, #789	; 0x315
	lsm9ds0.temp = 7;
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <imu_init+0x15c>)
	lsm9ds0.i2c_wr = &I2C_write;
 8001e5a:	4d0e      	ldr	r5, [pc, #56]	; (8001e94 <imu_init+0x160>)
 8001e5c:	635d      	str	r5, [r3, #52]	; 0x34
	lsm9ds0.gyr_stat = 123;
 8001e5e:	267b      	movs	r6, #123	; 0x7b
	lsm9ds0.acc_stat = 456;
 8001e60:	f44f 74e4 	mov.w	r4, #456	; 0x1c8
	lsm9ds0.gyr_stat = 123;
 8001e64:	629e      	str	r6, [r3, #40]	; 0x28
	lsm9ds0.delay_us = &delay_us;
 8001e66:	63d8      	str	r0, [r3, #60]	; 0x3c
	lsm9ds0.acc_stat = 456;
 8001e68:	62dc      	str	r4, [r3, #44]	; 0x2c
	lsm9ds0.temp = 7;
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
	lsm9ds0.mag_stat = 789;
 8001e6c:	6319      	str	r1, [r3, #48]	; 0x30
	lsm9ds0_Init();
 8001e6e:	f7ff faaf 	bl	80013d0 <lsm9ds0_Init>
}
 8001e72:	b00a      	add	sp, #40	; 0x28
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
 8001e76:	bf00      	nop
 8001e78:	40005800 	.word	0x40005800
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	000186a0 	.word	0x000186a0
 8001e84:	20000c10 	.word	0x20000c10
 8001e88:	080018f1 	.word	0x080018f1
 8001e8c:	08001651 	.word	0x08001651
 8001e90:	40e00000 	.word	0x40e00000
 8001e94:	08001669 	.word	0x08001669

08001e98 <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8001e98:	b530      	push	{r4, r5, lr}
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_OTG_FS, ENABLE) ;

#else  /* USE_STM322xG_EVAL */ 
  GPIO_InitTypeDef GPIO_InitStructure;   
 #ifdef USE_USB_OTG_FS 
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);  
 8001e9a:	2101      	movs	r1, #1
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8001e9c:	4c23      	ldr	r4, [pc, #140]	; (8001f2c <USB_OTG_BSP_Init+0x94>)
{
 8001e9e:	b083      	sub	sp, #12
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);  
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	f001 ff45 	bl	8003d30 <RCC_AHB1PeriphClockCmd>
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ea6:	f240 3302 	movw	r3, #770	; 0x302
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001eae:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 8001eb2:	e88d 000c 	stmia.w	sp, {r2, r3}
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8001eb6:	f001 fd11 	bl	80038dc <GPIO_Init>
  
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG_FS) ;
 8001eba:	4620      	mov	r0, r4
 8001ebc:	220a      	movs	r2, #10
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	f001 fd60 	bl	8003984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG_FS) ;
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	220a      	movs	r2, #10
 8001ec8:	2109      	movs	r1, #9
 8001eca:	f001 fd5b 	bl	8003984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG_FS) ;
 8001ece:	4620      	mov	r0, r4
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	210b      	movs	r1, #11
 8001ed4:	f001 fd56 	bl	8003984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG_FS) ;
 8001ed8:	4620      	mov	r0, r4
 8001eda:	220a      	movs	r2, #10
 8001edc:	210c      	movs	r1, #12
 8001ede:	f001 fd51 	bl	8003984 <GPIO_PinAFConfig>

  /* this for ID line debug */
  
  
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001ee2:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001ee4:	2303      	movs	r3, #3
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8001ee6:	4669      	mov	r1, sp
 8001ee8:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8001eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001eee:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8001ef2:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001ef4:	f88d 5006 	strb.w	r5, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;  
 8001ef8:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8001efc:	f001 fcee 	bl	80038dc <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG_FS) ;
 8001f00:	220a      	movs	r2, #10
 8001f02:	4611      	mov	r1, r2
 8001f04:	4620      	mov	r0, r4
 8001f06:	f001 fd3d 	bl	8003984 <GPIO_PinAFConfig>
 
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f10:	f001 ff32 	bl	8003d78 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 8001f14:	4629      	mov	r1, r5
 8001f16:	2080      	movs	r0, #128	; 0x80
 8001f18:	f001 ff16 	bl	8003d48 <RCC_AHB2PeriphClockCmd>


  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f22:	f001 ff35 	bl	8003d90 <RCC_APB1PeriphResetCmd>
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_OTG_HS, ENABLE) ;  

  #endif
 #endif /* USB_OTG_HS */
#endif /* USE_STM3210C_EVAL */
}
 8001f26:	b003      	add	sp, #12
 8001f28:	bd30      	pop	{r4, r5, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40020000 	.word	0x40020000

08001f30 <USB_OTG_BSP_EnableInterrupt>:
*         Enable USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 8001f30:	b500      	push	{lr}
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8001f32:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 8001f36:	b083      	sub	sp, #12
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8001f38:	f001 ff36 	bl	8003da8 <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS   
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
 8001f3c:	a802      	add	r0, sp, #8
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <USB_OTG_BSP_EnableInterrupt+0x20>)
 8001f40:	f840 3d04 	str.w	r3, [r0, #-4]!
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);  
 8001f44:	f001 ff3a 	bl	8003dbc <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);   
#endif
}
 8001f48:	b003      	add	sp, #12
 8001f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4e:	bf00      	nop
 8001f50:	01000043 	.word	0x01000043

08001f54 <USB_OTG_BSP_uDelay>:
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  uint32_t count = 0;
  const uint32_t utime = (120 * usec / 7);
 8001f54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <USB_OTG_BSP_uDelay+0x20>)
 8001f5a:	00c0      	lsls	r0, r0, #3
 8001f5c:	fba2 3200 	umull	r3, r2, r2, r0
 8001f60:	1a80      	subs	r0, r0, r2
 8001f62:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8001f66:	0892      	lsrs	r2, r2, #2
  uint32_t count = 0;
 8001f68:	2300      	movs	r3, #0
  do
  {
    if ( ++count > utime )
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d2fc      	bcs.n	8001f6a <USB_OTG_BSP_uDelay+0x16>
    {
      return ;
    }
  }
  while (1);
}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	24924925 	.word	0x24924925

08001f78 <USB_OTG_BSP_mDelay>:
  const uint32_t utime = (120 * usec / 7);
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <USB_OTG_BSP_mDelay+0x20>)
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <USB_OTG_BSP_mDelay+0x24>)
 8001f7c:	fb03 f000 	mul.w	r0, r3, r0
 8001f80:	fba2 3200 	umull	r3, r2, r2, r0
 8001f84:	1a80      	subs	r0, r0, r2
 8001f86:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8001f8a:	0892      	lsrs	r2, r2, #2
  uint32_t count = 0;
 8001f8c:	2300      	movs	r3, #0
    if ( ++count > utime )
 8001f8e:	3301      	adds	r3, #1
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d2fc      	bcs.n	8001f8e <USB_OTG_BSP_mDelay+0x16>
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
  USB_OTG_BSP_uDelay(msec * 1000);   
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	0001d4c0 	.word	0x0001d4c0
 8001f9c:	24924925 	.word	0x24924925

08001fa0 <USBD_USR_DeviceReset>:
 *         Displays the message on LCD on device Reset Event
 * @param  speed : device speed
 * @retval None
 */
void USBD_USR_DeviceReset(uint8_t speed )
{
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <USBD_USR_DeviceDisconnected>:
 *         Displays the message on LCD on device disconnection Event
 * @param  None
 * @retval Status
 */
void USBD_USR_DeviceDisconnected (void)
{
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop

08001fa8 <USBD_USR_DeviceConnected>:
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop

08001fac <USBD_USR_Init>:
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <USBD_USR_DeviceConfigured>:
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop

08001fb4 <USBD_USR_DeviceSuspended>:
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <USBD_USR_DeviceResumed>:
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8001fbc:	b500      	push	{lr}
 8001fbe:	b083      	sub	sp, #12

	GenTimInit();
 8001fc0:	f7ff fe9c 	bl	8001cfc <GenTimInit>
	USBD_Init(&USB_OTG_dev,  USB_OTG_FS_CORE_ID,&USR_desc,&USBD_CDC_cb,&USR_cb);
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <main+0x74>)
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <main+0x78>)
 8001fc8:	481b      	ldr	r0, [pc, #108]	; (8002038 <main+0x7c>)
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <main+0x80>)
 8001fd0:	f003 fcca 	bl	8005968 <USBD_Init>
	LedInit();
 8001fd4:	f7ff fe7e 	bl	8001cd4 <LedInit>

	delay_us(2000000);
 8001fd8:	4819      	ldr	r0, [pc, #100]	; (8002040 <main+0x84>)
 8001fda:	f7ff fb39 	bl	8001650 <delay_us>
	imu_init();
 8001fde:	f7ff fea9 	bl	8001d34 <imu_init>


	wahba_StructInit(&whb,dt);
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <main+0x88>)
 8001fe4:	4818      	ldr	r0, [pc, #96]	; (8002048 <main+0x8c>)
 8001fe6:	ed93 0a00 	vldr	s0, [r3]
 8001fea:	f000 fccf 	bl	800298c <wahba_StructInit>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8001fee:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001ff2:	f001 fed9 	bl	8003da8 <NVIC_PriorityGroupConfig>
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	4915      	ldr	r1, [pc, #84]	; (800204c <main+0x90>)
	NVIC_SetPriority(SysTick_IRQn, 4);
	SysTick_Config(SystemCoreClock/CONTROL_LOOP_FREQ/8);
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <main+0x94>)
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <main+0x98>)
 8001ffc:	2040      	movs	r0, #64	; 0x40
 8001ffe:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	0a5b      	lsrs	r3, r3, #9
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d208      	bcs.n	8002024 <main+0x68>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a11      	ldr	r2, [pc, #68]	; (8002058 <main+0x9c>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	25f0      	movs	r5, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002016:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002018:	2007      	movs	r0, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	f881 5023 	strb.w	r5, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	6010      	str	r0, [r2, #0]
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 8002024:	f06f 0004 	mvn.w	r0, #4
 8002028:	f001 fefc 	bl	8003e24 <SysTick_CLKSourceConfig>
 800202c:	e7fe      	b.n	800202c <main+0x70>
 800202e:	bf00      	nop
 8002030:	20000430 	.word	0x20000430
 8002034:	20000484 	.word	0x20000484
 8002038:	20000d30 	.word	0x20000d30
 800203c:	200004fc 	.word	0x200004fc
 8002040:	001e8480 	.word	0x001e8480
 8002044:	2000044c 	.word	0x2000044c
 8002048:	20000c58 	.word	0x20000c58
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	200004a0 	.word	0x200004a0
 8002054:	51eb851f 	.word	0x51eb851f
 8002058:	e000e010 	.word	0xe000e010

0800205c <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 800205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002060:	ed2d 8b02 	vpush	{d8}
	uint8_t str[2048];
	uint32_t len,i;
	static uint32_t cnt=0,t=0, state=0;

	t = toc;
 8002064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002068:	4c2d      	ldr	r4, [pc, #180]	; (8002120 <SysTick_Handler+0xc4>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	// Read sensor,no calibration used yet
	lsm9ds0_read();


	Led1(1);
	wahba_rot(lsm9ds0.acc,lsm9ds0.gyr,lsm9ds0.mag,&whb);
 800206c:	4d2d      	ldr	r5, [pc, #180]	; (8002124 <SysTick_Handler+0xc8>)
	t = toc;
 800206e:	6023      	str	r3, [r4, #0]
{
 8002070:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
	lsm9ds0_read();
 8002074:	f7ff fa02 	bl	800147c <lsm9ds0_read>
	Led1(1);
 8002078:	4e2b      	ldr	r6, [pc, #172]	; (8002128 <SysTick_Handler+0xcc>)
	wahba_rot(lsm9ds0.acc,lsm9ds0.gyr,lsm9ds0.mag,&whb);
 800207a:	4a2c      	ldr	r2, [pc, #176]	; (800212c <SysTick_Handler+0xd0>)
	len += sprintf(&str[len],"% d",t);
//	len += sprintf(&str[len],",% 8.3f,% 8.3f,% 8.3f",lsm9ds0.acc[0],lsm9ds0.acc[1],lsm9ds0.acc[2]);
//	len += sprintf(&str[len],",% 8.3f,% 8.3f,% 8.3f",lsm9ds0.gyr[0],lsm9ds0.gyr[1],lsm9ds0.gyr[2]);
//	len += sprintf(&str[len],",% 8.3f,% 8.3f,% 8.3f",lsm9ds0.mag[0],lsm9ds0.mag[1],lsm9ds0.mag[2]);
//	len += sprintf(&str[len],",% 8.3f,% 8.3f,% 8.3f",whb.W[0],whb.W[1],whb.W[2]);
	len += sprintf(&str[len],",% 8.6f,% 8.6f,% 8.6f",whb.Euler[0]*180/M_PI,whb.Euler[1]*180/M_PI,whb.Euler[2]*180/M_PI);
 800207c:	eddf 8a2c 	vldr	s17, [pc, #176]	; 8002130 <SysTick_Handler+0xd4>
 8002080:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8002134 <SysTick_Handler+0xd8>
	Led1(1);
 8002084:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	wahba_rot(lsm9ds0.acc,lsm9ds0.gyr,lsm9ds0.mag,&whb);
 8002088:	462b      	mov	r3, r5
	Led1(1);
 800208a:	8337      	strh	r7, [r6, #24]
	wahba_rot(lsm9ds0.acc,lsm9ds0.gyr,lsm9ds0.mag,&whb);
 800208c:	f1a2 0118 	sub.w	r1, r2, #24
 8002090:	f1a2 000c 	sub.w	r0, r2, #12
 8002094:	f000 fcb8 	bl	8002a08 <wahba_rot>
	len += sprintf(&str[len],"% d",t);
 8002098:	6822      	ldr	r2, [r4, #0]
	Led1(0);
 800209a:	8377      	strh	r7, [r6, #26]
	len += sprintf(&str[len],"% d",t);
 800209c:	4926      	ldr	r1, [pc, #152]	; (8002138 <SysTick_Handler+0xdc>)
 800209e:	a804      	add	r0, sp, #16
 80020a0:	f005 fd50 	bl	8007b44 <sprintf>
	len += sprintf(&str[len],",% 8.6f,% 8.6f,% 8.6f",whb.Euler[0]*180/M_PI,whb.Euler[1]*180/M_PI,whb.Euler[2]*180/M_PI);
 80020a4:	edd5 7a31 	vldr	s15, [r5, #196]	; 0xc4
 80020a8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80020ac:	ab04      	add	r3, sp, #16
 80020ae:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80020b2:	eb03 0800 	add.w	r8, r3, r0
	len += sprintf(&str[len],"% d",t);
 80020b6:	4604      	mov	r4, r0
	len += sprintf(&str[len],",% 8.6f,% 8.6f,% 8.6f",whb.Euler[0]*180/M_PI,whb.Euler[1]*180/M_PI,whb.Euler[2]*180/M_PI);
 80020b8:	ee17 0a10 	vmov	r0, s14
 80020bc:	f7fe fb92 	bl	80007e4 <__aeabi_f2d>
 80020c0:	edd5 7a33 	vldr	s15, [r5, #204]	; 0xcc
 80020c4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80020c8:	4606      	mov	r6, r0
 80020ca:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80020ce:	460f      	mov	r7, r1
 80020d0:	ee17 0a10 	vmov	r0, s14
 80020d4:	f7fe fb86 	bl	80007e4 <__aeabi_f2d>
 80020d8:	edd5 7a32 	vldr	s15, [r5, #200]	; 0xc8
 80020dc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80020e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020e4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80020e8:	ee17 0a10 	vmov	r0, s14
 80020ec:	f7fe fb7a 	bl	80007e4 <__aeabi_f2d>
 80020f0:	4632      	mov	r2, r6
 80020f2:	e9cd 0100 	strd	r0, r1, [sp]
 80020f6:	463b      	mov	r3, r7
 80020f8:	4640      	mov	r0, r8
 80020fa:	4910      	ldr	r1, [pc, #64]	; (800213c <SysTick_Handler+0xe0>)
 80020fc:	f005 fd22 	bl	8007b44 <sprintf>
//	len += sprintf(&str[len],",% 8.6f",lsm9ds0.temp);
	len += sprintf(&str[len],"\n");
 8002100:	ab04      	add	r3, sp, #16
	len += sprintf(&str[len],",% 8.6f,% 8.6f,% 8.6f",whb.Euler[0]*180/M_PI,whb.Euler[1]*180/M_PI,whb.Euler[2]*180/M_PI);
 8002102:	4404      	add	r4, r0
	len += sprintf(&str[len],"\n");
 8002104:	1918      	adds	r0, r3, r4
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <SysTick_Handler+0xe4>)
 8002108:	f005 fd1c 	bl	8007b44 <sprintf>


	VCP_DataTx((u8 *)str,len);
 800210c:	1901      	adds	r1, r0, r4
 800210e:	a804      	add	r0, sp, #16
 8002110:	f001 fb5e 	bl	80037d0 <VCP_DataTx>
}
 8002114:	f50d 6d01 	add.w	sp, sp, #2064	; 0x810
 8002118:	ecbd 8b02 	vpop	{d8}
 800211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002120:	20000b14 	.word	0x20000b14
 8002124:	20000c58 	.word	0x20000c58
 8002128:	40020400 	.word	0x40020400
 800212c:	20000c28 	.word	0x20000c28
 8002130:	43340000 	.word	0x43340000
 8002134:	40490fdb 	.word	0x40490fdb
 8002138:	0800b38c 	.word	0x0800b38c
 800213c:	0800b390 	.word	0x0800b390
 8002140:	0800b3a8 	.word	0x0800b3a8

08002144 <NMI_Handler>:
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop

08002148 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002148:	e7fe      	b.n	8002148 <HardFault_Handler>
 800214a:	bf00      	nop

0800214c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800214c:	e7fe      	b.n	800214c <MemManage_Handler>
 800214e:	bf00      	nop

08002150 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002150:	e7fe      	b.n	8002150 <BusFault_Handler>
 8002152:	bf00      	nop

08002154 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler>
 8002156:	bf00      	nop

08002158 <SVC_Handler>:
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <DebugMon_Handler>:
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop

08002160 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <OTG_FS_IRQHandler>:
void OTG_HS_IRQHandler(void)
#else
void OTG_FS_IRQHandler(void)
#endif
{
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <OTG_FS_IRQHandler+0x8>)
 8002166:	f001 be69 	b.w	8003e3c <USBD_OTG_ISR_Handler>
 800216a:	bf00      	nop
 800216c:	20000d30 	.word	0x20000d30

08002170 <jacobi2Sided>:
		RotM[i][1]=U[1][0]*V[i][0]+U[1][1]*V[i][1]+U[1][2]*V[i][2];
		RotM[i][2]=U[2][0]*V[i][0]+U[2][1]*V[i][1]+U[2][2]*V[i][2];
	}*/
}

void jacobi2Sided(real (*A)[3],real (*U)[3],real (*V)[3]){
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	ed2d 8b0c 	vpush	{d8-d13}
 8002178:	b08f      	sub	sp, #60	; 0x3c
 800217a:	4603      	mov	r3, r0
 800217c:	9209      	str	r2, [sp, #36]	; 0x24
 800217e:	1d02      	adds	r2, r0, #4
 8002180:	3310      	adds	r3, #16
 8002182:	920b      	str	r2, [sp, #44]	; 0x2c
 8002184:	460a      	mov	r2, r1
 8002186:	3204      	adds	r2, #4
 8002188:	930d      	str	r3, [sp, #52]	; 0x34
				y=A[q][p];
				z=A[q][q];
				flg=0;
				if(y==0 && z==0){
					y=x;
					x=0;
 800218a:	eddf aa5d 	vldr	s21, [pc, #372]	; 8002300 <jacobi2Sided+0x190>
					flg=1;
				}

				m1=w+z;
				m2=x-y;
				if (fabsv(m2) <=TOL*fabsv(m1)){
 800218e:	ed9f aa5b 	vldr	s20, [pc, #364]	; 80022fc <jacobi2Sided+0x18c>
void jacobi2Sided(real (*A)[3],real (*U)[3],real (*V)[3]){
 8002192:	9006      	str	r0, [sp, #24]
					c1=-c1;
					s1=-s1;
					k=-k;
				}
				if (d2<0){
					k=-k;
 8002194:	2303      	movs	r3, #3
void jacobi2Sided(real (*A)[3],real (*U)[3],real (*V)[3]){
 8002196:	9108      	str	r1, [sp, #32]
 8002198:	920c      	str	r2, [sp, #48]	; 0x30
					k=-k;
 800219a:	930a      	str	r3, [sp, #40]	; 0x28
 800219c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800219e:	f8dd a018 	ldr.w	sl, [sp, #24]
 80021a2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80021a6:	9304      	str	r3, [sp, #16]
 80021a8:	2304      	movs	r3, #4
 80021aa:	9303      	str	r3, [sp, #12]
 80021ac:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80021b0:	4653      	mov	r3, sl
 80021b2:	46ca      	mov	sl, r9
 80021b4:	4699      	mov	r9, r3
 80021b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021b8:	9f08      	ldr	r7, [sp, #32]
 80021ba:	f109 030c 	add.w	r3, r9, #12
 80021be:	4616      	mov	r6, r2
 80021c0:	9a03      	ldr	r2, [sp, #12]
 80021c2:	9307      	str	r3, [sp, #28]
void jacobi2Sided(real (*A)[3],real (*U)[3],real (*V)[3]){
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	9b06      	ldr	r3, [sp, #24]
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	eb06 0802 	add.w	r8, r6, r2
 80021ce:	461d      	mov	r5, r3
 80021d0:	4652      	mov	r2, sl
 80021d2:	461c      	mov	r4, r3
 80021d4:	4643      	mov	r3, r8
 80021d6:	46da      	mov	sl, fp
 80021d8:	46c8      	mov	r8, r9
 80021da:	4693      	mov	fp, r2
 80021dc:	4699      	mov	r9, r3
				y=A[q][p];
 80021de:	9b03      	ldr	r3, [sp, #12]
 80021e0:	eb04 0e03 	add.w	lr, r4, r3
				w=A[p][p];
 80021e4:	9b04      	ldr	r3, [sp, #16]
				y=A[q][p];
 80021e6:	edde da00 	vldr	s27, [lr]
				w=A[p][p];
 80021ea:	ed93 ba00 	vldr	s22, [r3]
				x=A[p][q];
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	ecb3 9a01 	vldmia	r3!, {s18}
				if(y==0 && z==0){
 80021f4:	eef5 da40 	vcmp.f32	s27, #0.0
				x=A[p][q];
 80021f8:	9301      	str	r3, [sp, #4]
				z=A[q][q];
 80021fa:	9b02      	ldr	r3, [sp, #8]
				if(y==0 && z==0){
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				z=A[q][q];
 8002200:	edd3 8a00 	vldr	s17, [r3]
				if(y==0 && z==0){
 8002204:	f040 81b4 	bne.w	8002570 <jacobi2Sided+0x400>
 8002208:	eef5 8a40 	vcmp.f32	s17, #0.0
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	f040 81ae 	bne.w	8002570 <jacobi2Sided+0x400>
					flg=1;
 8002214:	2301      	movs	r3, #1
					y=x;
 8002216:	eef0 da49 	vmov.f32	s27, s18
					flg=1;
 800221a:	9305      	str	r3, [sp, #20]
					x=0;
 800221c:	eeb0 9a6a 	vmov.f32	s18, s21
				m2=x-y;
 8002220:	ee39 8a6d 	vsub.f32	s16, s18, s27
				m1=w+z;
 8002224:	ee7b 9a28 	vadd.f32	s19, s22, s17
				if (fabsv(m2) <=TOL*fabsv(m1)){
 8002228:	eeb0 0a48 	vmov.f32	s0, s16
 800222c:	f004 f8fa 	bl	8006424 <fabsf>
 8002230:	eef0 ba40 	vmov.f32	s23, s0
 8002234:	eeb0 0a69 	vmov.f32	s0, s19
 8002238:	f004 f8f4 	bl	8006424 <fabsf>
 800223c:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8002240:	eef4 bac0 	vcmpe.f32	s23, s0
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002248:	f240 8195 	bls.w	8002576 <jacobi2Sided+0x406>
					r=m1/m2;
 800224c:	ee89 da88 	vdiv.f32	s26, s19, s16
					s=SIGN(r)/sqrtv(1+r*r);
 8002250:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002254:	eeb5 dac0 	vcmpe.f32	s26, #0.0
 8002258:	eead 0a0d 	vfma.f32	s0, s26, s26
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	bfcc      	ite	gt
 8002262:	f04f 0e01 	movgt.w	lr, #1
 8002266:	f04f 0e00 	movle.w	lr, #0
 800226a:	bf4c      	ite	mi
 800226c:	f04f 0c01 	movmi.w	ip, #1
 8002270:	f04f 0c00 	movpl.w	ip, #0
 8002274:	ebae 0e0c 	sub.w	lr, lr, ip
 8002278:	ee07 ea90 	vmov	s15, lr

  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in >= 0.0f)
 800227c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002284:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8002288:	f2c0 81d3 	blt.w	8002632 <jacobi2Sided+0x4c2>

//      #if __FPU_USED
#if (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#else
      *pOut = sqrtf(in);
 800228c:	f004 f9d6 	bl	800663c <sqrtf>
 8002290:	ee89 8a80 	vdiv.f32	s16, s19, s0
					c=s*r;
 8002294:	ee2d da08 	vmul.f32	s26, s26, s16
				m2=2*(c*x-s*z);
 8002298:	ee68 7ac8 	vnmul.f32	s15, s17, s16
				m1=s*(x+y)+c*(z-w);
 800229c:	ee78 bacb 	vsub.f32	s23, s17, s22
				m2=2*(c*x-s*z);
 80022a0:	eee9 7a0d 	vfma.f32	s15, s18, s26
				m1=s*(x+y)+c*(z-w);
 80022a4:	ee6b ba8d 	vmul.f32	s23, s23, s26
				m2=2*(c*x-s*z);
 80022a8:	ee77 9aa7 	vadd.f32	s19, s15, s15
				m1=s*(x+y)+c*(z-w);
 80022ac:	ee79 7a2d 	vadd.f32	s15, s18, s27
				if (fabsv(m2) <=TOL*fabsv(m1)){
 80022b0:	eeb0 0a69 	vmov.f32	s0, s19
				m1=s*(x+y)+c*(z-w);
 80022b4:	eee8 ba27 	vfma.f32	s23, s16, s15
				if (fabsv(m2) <=TOL*fabsv(m1)){
 80022b8:	f004 f8b4 	bl	8006424 <fabsf>
 80022bc:	eeb0 ca40 	vmov.f32	s24, s0
 80022c0:	eeb0 0a6b 	vmov.f32	s0, s23
 80022c4:	f004 f8ae 	bl	8006424 <fabsf>
 80022c8:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80022cc:	eeb4 cac0 	vcmpe.f32	s24, s0
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	f200 8154 	bhi.w	8002580 <jacobi2Sided+0x410>
					s2=0;
 80022d8:	eef0 ba6a 	vmov.f32	s23, s21
					c2=1;
 80022dc:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
				c1=c2*c-s2*s;
 80022e0:	ee6b cac8 	vnmul.f32	s25, s23, s16
				if (flg==1){
 80022e4:	9b05      	ldr	r3, [sp, #20]
				s1=s2*c+c2*s;
 80022e6:	ee28 8a0c 	vmul.f32	s16, s16, s24
				c1=c2*c-s2*s;
 80022ea:	eeed ca0c 	vfma.f32	s25, s26, s24
				s1=s2*c+c2*s;
 80022ee:	eead 8a2b 	vfma.f32	s16, s26, s23
				if (flg==1){
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 8181 	bne.w	80025fa <jacobi2Sided+0x48a>
 80022f8:	e004      	b.n	8002304 <jacobi2Sided+0x194>
 80022fa:	bf00      	nop
 80022fc:	358637bd 	.word	0x358637bd
 8002300:	00000000 	.word	0x00000000
				d1=c1*(w*c2-x*s2)-s1*(y*c2-z*s2);
 8002304:	ee68 9aeb 	vnmul.f32	s19, s17, s23
 8002308:	ee6b 7ac9 	vnmul.f32	s15, s23, s18
 800230c:	eeed 9a8c 	vfma.f32	s19, s27, s24
 8002310:	eeec 7a0b 	vfma.f32	s15, s24, s22
				d2=s1*(w*s2+x*c2)+c1*(y*s2+z*c2);
 8002314:	ee6c 8a28 	vmul.f32	s17, s24, s17
				d1=c1*(w*c2-x*s2)-s1*(y*c2-z*s2);
 8002318:	ee68 9a69 	vnmul.f32	s19, s16, s19
				d2=s1*(w*s2+x*c2)+c1*(y*s2+z*c2);
 800231c:	eeed 8aab 	vfma.f32	s17, s27, s23
 8002320:	ee29 9a0c 	vmul.f32	s18, s18, s24
				d1=c1*(w*c2-x*s2)-s1*(y*c2-z*s2);
 8002324:	eeec 9aa7 	vfma.f32	s19, s25, s15
				d2=s1*(w*s2+x*c2)+c1*(y*s2+z*c2);
 8002328:	eeab 9a8b 	vfma.f32	s18, s23, s22
 800232c:	ee68 8aac 	vmul.f32	s17, s17, s25
				if (fabsv(d1)>fabsv(d2)){
 8002330:	eeb0 0a69 	vmov.f32	s0, s19
				d2=s1*(w*s2+x*c2)+c1*(y*s2+z*c2);
 8002334:	eee8 8a09 	vfma.f32	s17, s16, s18
				if (fabsv(d1)>fabsv(d2)){
 8002338:	f004 f874 	bl	8006424 <fabsf>
 800233c:	eeb0 9a40 	vmov.f32	s18, s0
 8002340:	eeb0 0a68 	vmov.f32	s0, s17
 8002344:	f004 f86e 	bl	8006424 <fabsf>
 8002348:	eeb4 9ac0 	vcmpe.f32	s18, s0
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	dd11      	ble.n	8002376 <jacobi2Sided+0x206>
					tmp=c2; c2=-s2; s2=tmp;
 8002352:	eef0 6a69 	vmov.f32	s13, s19
					tmp=c1; c1=-s1; s1=tmp;
 8002356:	eef1 7a48 	vneg.f32	s15, s16
					tmp=c2; c2=-s2; s2=tmp;
 800235a:	eeb1 7a6b 	vneg.f32	s14, s23
					tmp=d2; d2=d1; d1=tmp;
 800235e:	eef0 9a68 	vmov.f32	s19, s17
					tmp=c2; c2=-s2; s2=tmp;
 8002362:	eef0 ba4c 	vmov.f32	s23, s24
					tmp=c1; c1=-s1; s1=tmp;
 8002366:	eeb0 8a6c 	vmov.f32	s16, s25
					tmp=d2; d2=d1; d1=tmp;
 800236a:	eef0 8a66 	vmov.f32	s17, s13
					tmp=c2; c2=-s2; s2=tmp;
 800236e:	eeb0 ca47 	vmov.f32	s24, s14
					tmp=c1; c1=-s1; s1=tmp;
 8002372:	eef0 ca67 	vmov.f32	s25, s15
				if (d1<0){
 8002376:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	f100 8145 	bmi.w	800260c <jacobi2Sided+0x49c>
 8002382:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
				k=1;
 8002386:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int j;
	real Apj,Aqj;
	//%    /* Apply rotation to matrix A,  A' = A J */
	for (j =0;j<3;j++){
		Apj =A[p][j];
		Aqj =A[q][j];
 800238a:	ed94 7a00 	vldr	s14, [r4]
		Apj =A[p][j];
 800238e:	ed98 6a03 	vldr	s12, [r8, #12]
 8002392:	9b02      	ldr	r3, [sp, #8]
		A[p][j]= Apj * c - Aqj * s;
		A[q][j]=(Apj * s + Aqj * c)*k;
 8002394:	ee6c 6a87 	vmul.f32	s13, s25, s14
		A[p][j]= Apj * c - Aqj * s;
 8002398:	ee27 7a48 	vnmul.f32	s14, s14, s16
		A[q][j]=(Apj * s + Aqj * c)*k;
 800239c:	eee8 6a06 	vfma.f32	s13, s16, s12
 80023a0:	3310      	adds	r3, #16
 80023a2:	9302      	str	r3, [sp, #8]
		A[p][j]= Apj * c - Aqj * s;
 80023a4:	eeac 7a86 	vfma.f32	s14, s25, s12
 80023a8:	340c      	adds	r4, #12
					k=-k;
 80023aa:	eef5 8a40 	vcmp.f32	s17, #0.0
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	bf48      	it	mi
 80023b4:	eef0 7a65 	vmovmi.f32	s15, s11
		A[p][j]= Apj * c - Aqj * s;
 80023b8:	ed88 7a03 	vstr	s14, [r8, #12]
		A[q][j]=(Apj * s + Aqj * c)*k;
 80023bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
		Aqj =A[q][j];
 80023c0:	ed14 7a02 	vldr	s14, [r4, #-8]
		A[q][j]=(Apj * s + Aqj * c)*k;
 80023c4:	ed44 6a03 	vstr	s13, [r4, #-12]
		Apj =A[p][j];
 80023c8:	ed98 6a04 	vldr	s12, [r8, #16]
		A[p][j]= Apj * c - Aqj * s;
 80023cc:	ee67 6a48 	vnmul.f32	s13, s14, s16
		A[q][j]=(Apj * s + Aqj * c)*k;
 80023d0:	ee2c 7a87 	vmul.f32	s14, s25, s14
		A[p][j]= Apj * c - Aqj * s;
 80023d4:	eeec 6a86 	vfma.f32	s13, s25, s12
		A[q][j]=(Apj * s + Aqj * c)*k;
 80023d8:	eea8 7a06 	vfma.f32	s14, s16, s12
		A[p][j]= Apj * c - Aqj * s;
 80023dc:	edc8 6a04 	vstr	s13, [r8, #16]
		A[q][j]=(Apj * s + Aqj * c)*k;
 80023e0:	ee27 7a27 	vmul.f32	s14, s14, s15
		Aqj =A[q][j];
 80023e4:	ed54 6a01 	vldr	s13, [r4, #-4]
		A[q][j]=(Apj * s + Aqj * c)*k;
 80023e8:	ed04 7a02 	vstr	s14, [r4, #-8]
		Apj =A[p][j];
 80023ec:	ed98 6a05 	vldr	s12, [r8, #20]
		A[q][j]=(Apj * s + Aqj * c)*k;
 80023f0:	ee2c 7aa6 	vmul.f32	s14, s25, s13
		A[p][j]= Apj * c - Aqj * s;
 80023f4:	ee66 6ac8 	vnmul.f32	s13, s13, s16
		A[q][j]=(Apj * s + Aqj * c)*k;
 80023f8:	eea8 7a06 	vfma.f32	s14, s16, s12
		A[p][j]= Apj * c - Aqj * s;
 80023fc:	eeec 6a86 	vfma.f32	s13, s25, s12
		A[q][j]=(Apj * s + Aqj * c)*k;
 8002400:	ee27 7a27 	vmul.f32	s14, s14, s15
		A[p][j]= Apj * c - Aqj * s;
 8002404:	edc8 6a05 	vstr	s13, [r8, #20]
		A[q][j]=(Apj * s + Aqj * c)*k;
 8002408:	ed04 7a01 	vstr	s14, [r4, #-4]
		Aiq =A[i][q];
 800240c:	ed95 7a00 	vldr	s14, [r5]
		Aip =A[i][p];
 8002410:	ed9b 6a00 	vldr	s12, [fp]
		A[i][p]= Aip * c - Aiq * s;
 8002414:	ee67 6a6b 	vnmul.f32	s13, s14, s23
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002418:	ee2c 7a07 	vmul.f32	s14, s24, s14
		A[i][p]= Aip * c - Aiq * s;
 800241c:	eeec 6a06 	vfma.f32	s13, s24, s12
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002420:	eeab 7a86 	vfma.f32	s14, s23, s12
		A[i][p]= Aip * c - Aiq * s;
 8002424:	edcb 6a00 	vstr	s13, [fp]
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002428:	eca5 7a01 	vstmia	r5!, {s14}
		Aiq =A[i][q];
 800242c:	ed95 7a02 	vldr	s14, [r5, #8]
		Aip =A[i][p];
 8002430:	eddb 5a03 	vldr	s11, [fp, #12]
		A[i][p]= Aip * c - Aiq * s;
 8002434:	ee27 6a6b 	vnmul.f32	s12, s14, s23
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002438:	ee6c 6a07 	vmul.f32	s13, s24, s14
		A[i][p]= Aip * c - Aiq * s;
 800243c:	eeb0 7a46 	vmov.f32	s14, s12
 8002440:	eeac 7a25 	vfma.f32	s14, s24, s11
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002444:	eeeb 6aa5 	vfma.f32	s13, s23, s11
		A[i][p]= Aip * c - Aiq * s;
 8002448:	ed8b 7a03 	vstr	s14, [fp, #12]
		Aiq =A[i][q];
 800244c:	ed95 7a05 	vldr	s14, [r5, #20]
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002450:	edc5 6a02 	vstr	s13, [r5, #8]
		Aip =A[i][p];
 8002454:	ed9b 6a06 	vldr	s12, [fp, #24]
		A[i][p]= Aip * c - Aiq * s;
 8002458:	ee67 6a6b 	vnmul.f32	s13, s14, s23
		A[i][q]=(Aip * s + Aiq * c)*k;
 800245c:	ee2c 7a07 	vmul.f32	s14, s24, s14
		A[i][p]= Aip * c - Aiq * s;
 8002460:	eeec 6a06 	vfma.f32	s13, s24, s12
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002464:	eeab 7a86 	vfma.f32	s14, s23, s12
		A[i][p]= Aip * c - Aiq * s;
 8002468:	edcb 6a06 	vstr	s13, [fp, #24]
		A[i][q]=(Aip * s + Aiq * c)*k;
 800246c:	ed85 7a05 	vstr	s14, [r5, #20]
		Aiq =A[i][q];
 8002470:	ed97 7a00 	vldr	s14, [r7]
		Aip =A[i][p];
 8002474:	ed9a 6a00 	vldr	s12, [sl]
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002478:	ee6c 6a87 	vmul.f32	s13, s25, s14
		A[i][p]= Aip * c - Aiq * s;
 800247c:	ee27 7a48 	vnmul.f32	s14, s14, s16
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002480:	eee8 6a06 	vfma.f32	s13, s16, s12
		A[i][p]= Aip * c - Aiq * s;
 8002484:	eeac 7a86 	vfma.f32	s14, s25, s12
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002488:	ee66 6aa7 	vmul.f32	s13, s13, s15
		A[i][p]= Aip * c - Aiq * s;
 800248c:	ed8a 7a00 	vstr	s14, [sl]
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002490:	ece7 6a01 	vstmia	r7!, {s13}
		Aiq =A[i][q];
 8002494:	ed97 7a02 	vldr	s14, [r7, #8]
		Aip =A[i][p];
 8002498:	ed9a 6a03 	vldr	s12, [sl, #12]
		A[i][q]=(Aip * s + Aiq * c)*k;
 800249c:	ee6c 6a87 	vmul.f32	s13, s25, s14
		A[i][p]= Aip * c - Aiq * s;
 80024a0:	ee27 7a48 	vnmul.f32	s14, s14, s16
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024a4:	eee8 6a06 	vfma.f32	s13, s16, s12
		A[i][p]= Aip * c - Aiq * s;
 80024a8:	eeac 7a86 	vfma.f32	s14, s25, s12
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
		A[i][p]= Aip * c - Aiq * s;
 80024b0:	ed8a 7a03 	vstr	s14, [sl, #12]
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024b4:	edc7 6a02 	vstr	s13, [r7, #8]
		Aiq =A[i][q];
 80024b8:	edd7 6a05 	vldr	s13, [r7, #20]
		Aip =A[i][p];
 80024bc:	ed9a 6a06 	vldr	s12, [sl, #24]
			for(q=0;q<p;q++){
 80024c0:	9a01      	ldr	r2, [sp, #4]
 80024c2:	9904      	ldr	r1, [sp, #16]
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024c4:	ee2c 7aa6 	vmul.f32	s14, s25, s13
		A[i][p]= Aip * c - Aiq * s;
 80024c8:	ee66 6ac8 	vnmul.f32	s13, s13, s16
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024cc:	eea8 7a06 	vfma.f32	s14, s16, s12
			for(q=0;q<p;q++){
 80024d0:	428a      	cmp	r2, r1
		A[i][p]= Aip * c - Aiq * s;
 80024d2:	eeec 6a86 	vfma.f32	s13, s25, s12
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
		A[i][p]= Aip * c - Aiq * s;
 80024da:	edca 6a06 	vstr	s13, [sl, #24]
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024de:	edc7 7a05 	vstr	s15, [r7, #20]
		Aiq =A[i][q];
 80024e2:	edd6 7a00 	vldr	s15, [r6]
		Aip =A[i][p];
 80024e6:	edd9 6a00 	vldr	s13, [r9]
		A[i][p]= Aip * c - Aiq * s;
 80024ea:	ee27 7aeb 	vnmul.f32	s14, s15, s23
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024ee:	ee6c 7a27 	vmul.f32	s15, s24, s15
		A[i][p]= Aip * c - Aiq * s;
 80024f2:	eeac 7a26 	vfma.f32	s14, s24, s13
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024f6:	eeeb 7aa6 	vfma.f32	s15, s23, s13
		A[i][p]= Aip * c - Aiq * s;
 80024fa:	ed89 7a00 	vstr	s14, [r9]
		A[i][q]=(Aip * s + Aiq * c)*k;
 80024fe:	ece6 7a01 	vstmia	r6!, {s15}
		Aiq =A[i][q];
 8002502:	edd6 7a02 	vldr	s15, [r6, #8]
		Aip =A[i][p];
 8002506:	ed99 6a03 	vldr	s12, [r9, #12]
		A[i][p]= Aip * c - Aiq * s;
 800250a:	ee67 6aeb 	vnmul.f32	s13, s15, s23
		A[i][q]=(Aip * s + Aiq * c)*k;
 800250e:	ee2c 7a27 	vmul.f32	s14, s24, s15
		A[i][p]= Aip * c - Aiq * s;
 8002512:	eef0 7a66 	vmov.f32	s15, s13
 8002516:	eeec 7a06 	vfma.f32	s15, s24, s12
		A[i][q]=(Aip * s + Aiq * c)*k;
 800251a:	eeab 7a86 	vfma.f32	s14, s23, s12
		A[i][p]= Aip * c - Aiq * s;
 800251e:	edc9 7a03 	vstr	s15, [r9, #12]
		Aiq =A[i][q];
 8002522:	edd6 7a05 	vldr	s15, [r6, #20]
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002526:	ed86 7a02 	vstr	s14, [r6, #8]
		Aip =A[i][p];
 800252a:	edd9 6a06 	vldr	s13, [r9, #24]
		A[i][p]= Aip * c - Aiq * s;
 800252e:	ee27 7aeb 	vnmul.f32	s14, s15, s23
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002532:	ee6c 7a27 	vmul.f32	s15, s24, s15
		A[i][p]= Aip * c - Aiq * s;
 8002536:	eeac 7a26 	vfma.f32	s14, s24, s13
		A[i][q]=(Aip * s + Aiq * c)*k;
 800253a:	eeeb 7aa6 	vfma.f32	s15, s23, s13
		A[i][p]= Aip * c - Aiq * s;
 800253e:	ed89 7a06 	vstr	s14, [r9, #24]
		A[i][q]=(Aip * s + Aiq * c)*k;
 8002542:	edc6 7a05 	vstr	s15, [r6, #20]
			for(q=0;q<p;q++){
 8002546:	f47f ae4a 	bne.w	80021de <jacobi2Sided+0x6e>
 800254a:	465b      	mov	r3, fp
 800254c:	46d3      	mov	fp, sl
 800254e:	469a      	mov	sl, r3
 8002550:	9b03      	ldr	r3, [sp, #12]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	9303      	str	r3, [sp, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	3310      	adds	r3, #16
		for(p=1;p<3;p++){
 800255c:	290c      	cmp	r1, #12
 800255e:	f10a 0a04 	add.w	sl, sl, #4
 8002562:	f10b 0b04 	add.w	fp, fp, #4
 8002566:	9304      	str	r3, [sp, #16]
 8002568:	d059      	beq.n	800261e <jacobi2Sided+0x4ae>
 800256a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800256e:	e622      	b.n	80021b6 <jacobi2Sided+0x46>
				flg=0;
 8002570:	2300      	movs	r3, #0
 8002572:	9305      	str	r3, [sp, #20]
 8002574:	e654      	b.n	8002220 <jacobi2Sided+0xb0>
					s=0;
 8002576:	eeb0 8a6a 	vmov.f32	s16, s21
					c=1;
 800257a:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 800257e:	e68b      	b.n	8002298 <jacobi2Sided+0x128>
					r2=m1/m2;
 8002580:	eecb caa9 	vdiv.f32	s25, s23, s19
					t2=SIGN(r2)/(fabsv(r2)+sqrtv(1+r2*r2)); //%use hypot..?
 8002584:	eef5 cac0 	vcmpe.f32	s25, #0.0
 8002588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258c:	bfcc      	ite	gt
 800258e:	f04f 0e01 	movgt.w	lr, #1
 8002592:	f04f 0e00 	movle.w	lr, #0
 8002596:	bf4c      	ite	mi
 8002598:	f04f 0c01 	movmi.w	ip, #1
 800259c:	f04f 0c00 	movpl.w	ip, #0
 80025a0:	ebae 0e0c 	sub.w	lr, lr, ip
 80025a4:	ee07 ea90 	vmov	s15, lr
 80025a8:	eeb0 0a6c 	vmov.f32	s0, s25
 80025ac:	eeb8 cae7 	vcvt.f32.s32	s24, s15
 80025b0:	f003 ff38 	bl	8006424 <fabsf>
 80025b4:	eef0 9a40 	vmov.f32	s19, s0
 80025b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025bc:	eeac 0aac 	vfma.f32	s0, s25, s25
    if(in >= 0.0f)
 80025c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	db39      	blt.n	800263e <jacobi2Sided+0x4ce>
      *pOut = sqrtf(in);
 80025ca:	f004 f837 	bl	800663c <sqrtf>
 80025ce:	ee79 9a80 	vadd.f32	s19, s19, s0
					c2=1/sqrtv(1+t2*t2);
 80025d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
					t2=SIGN(r2)/(fabsv(r2)+sqrtv(1+r2*r2)); //%use hypot..?
 80025d6:	eecc ba29 	vdiv.f32	s23, s24, s19
					c2=1/sqrtv(1+t2*t2);
 80025da:	eeab 0aab 	vfma.f32	s0, s23, s23
    if(in >= 0.0f)
 80025de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	db27      	blt.n	8002638 <jacobi2Sided+0x4c8>
      *pOut = sqrtf(in);
 80025e8:	f004 f828 	bl	800663c <sqrtf>
 80025ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80025f0:	ee87 ca80 	vdiv.f32	s24, s15, s0
					s2=c2*t2;
 80025f4:	ee6b ba8c 	vmul.f32	s23, s23, s24
 80025f8:	e672      	b.n	80022e0 <jacobi2Sided+0x170>
					s2=s1;
 80025fa:	eef0 ba48 	vmov.f32	s23, s16
					c2=c1;
 80025fe:	eeb0 ca6c 	vmov.f32	s24, s25
					s1=0;
 8002602:	ed1f 8ac1 	vldr	s16, [pc, #-772]	; 8002300 <jacobi2Sided+0x190>
					c1=1;
 8002606:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 800260a:	e67b      	b.n	8002304 <jacobi2Sided+0x194>
					c1=-c1;
 800260c:	eef1 ca6c 	vneg.f32	s25, s25
					s1=-s1;
 8002610:	eeb1 8a48 	vneg.f32	s16, s16
 8002614:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
					k=-k;
 8002618:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800261c:	e6b5      	b.n	800238a <jacobi2Sided+0x21a>
	while(cnt--){
 800261e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002620:	3b01      	subs	r3, #1
 8002622:	930a      	str	r3, [sp, #40]	; 0x28
 8002624:	f47f adba 	bne.w	800219c <jacobi2Sided+0x2c>
}
 8002628:	b00f      	add	sp, #60	; 0x3c
 800262a:	ecbd 8b0c 	vpop	{d8-d13}
 800262e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002632:	eeb0 0a6a 	vmov.f32	s0, s21
 8002636:	e62b      	b.n	8002290 <jacobi2Sided+0x120>
 8002638:	eeb0 0a6a 	vmov.f32	s0, s21
 800263c:	e7d6      	b.n	80025ec <jacobi2Sided+0x47c>
 800263e:	eeb0 0a6a 	vmov.f32	s0, s21
 8002642:	e7c4      	b.n	80025ce <jacobi2Sided+0x45e>

08002644 <WahbaJacobiSVDRotM>:
void WahbaJacobiSVDRotM(real (*A)[3], real (*RotM)[3]){
 8002644:	b530      	push	{r4, r5, lr}
 8002646:	ed2d 8b08 	vpush	{d8-d11}
 800264a:	b093      	sub	sp, #76	; 0x4c
		U[i][1]=0;
 800264c:	2300      	movs	r3, #0
		U[i][i]=1;
 800264e:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
void WahbaJacobiSVDRotM(real (*A)[3], real (*RotM)[3]){
 8002652:	460c      	mov	r4, r1
	jacobi2Sided(A,U,V);
 8002654:	aa09      	add	r2, sp, #36	; 0x24
 8002656:	4669      	mov	r1, sp
		U[i][1]=0;
 8002658:	9301      	str	r3, [sp, #4]
		U[i][2]=0;
 800265a:	9302      	str	r3, [sp, #8]
		V[i][1]=0;
 800265c:	930a      	str	r3, [sp, #40]	; 0x28
		V[i][2]=0;
 800265e:	930b      	str	r3, [sp, #44]	; 0x2c
		U[i][0]=0;
 8002660:	9303      	str	r3, [sp, #12]
		U[i][2]=0;
 8002662:	9305      	str	r3, [sp, #20]
		V[i][0]=0;
 8002664:	930c      	str	r3, [sp, #48]	; 0x30
		V[i][2]=0;
 8002666:	930e      	str	r3, [sp, #56]	; 0x38
		U[i][0]=0;
 8002668:	9306      	str	r3, [sp, #24]
		U[i][1]=0;
 800266a:	9307      	str	r3, [sp, #28]
		V[i][0]=0;
 800266c:	930f      	str	r3, [sp, #60]	; 0x3c
		V[i][1]=0;
 800266e:	9310      	str	r3, [sp, #64]	; 0x40
		U[i][i]=1;
 8002670:	9500      	str	r5, [sp, #0]
		V[i][i]=1;
 8002672:	9509      	str	r5, [sp, #36]	; 0x24
		U[i][i]=1;
 8002674:	9504      	str	r5, [sp, #16]
		V[i][i]=1;
 8002676:	950d      	str	r5, [sp, #52]	; 0x34
		U[i][i]=1;
 8002678:	9508      	str	r5, [sp, #32]
		V[i][i]=1;
 800267a:	9511      	str	r5, [sp, #68]	; 0x44
	jacobi2Sided(A,U,V);
 800267c:	f7ff fd78 	bl	8002170 <jacobi2Sided>
 * @param  A, matrix
 * @retval det(A)
 */
static inline real detMatr(real (*A)[3])
{
	return A[0][0]*A[1][1]*A[2][2]+A[0][1]*A[1][2]*A[2][0]+A[0][2]*A[1][0]*A[2][1]-(A[0][2]*A[1][1]*A[2][0]+A[0][1]*A[1][0]*A[2][2]+A[0][0]*A[1][2]*A[2][1]);
 8002680:	eddd 5a01 	vldr	s11, [sp, #4]
 8002684:	eddd 2a05 	vldr	s5, [sp, #20]
 8002688:	ed9d 0a06 	vldr	s0, [sp, #24]
 800268c:	eddd aa00 	vldr	s21, [sp]
 8002690:	eddd 6a04 	vldr	s13, [sp, #16]
 8002694:	ed9d 9a03 	vldr	s18, [sp, #12]
 8002698:	ed9d 3a08 	vldr	s6, [sp, #32]
 800269c:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 80026a0:	eddd 1a0e 	vldr	s3, [sp, #56]	; 0x38
 80026a4:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 80026a8:	ed9d 1a02 	vldr	s2, [sp, #8]
 80026ac:	ed9d 8a0f 	vldr	s16, [sp, #60]	; 0x3c
 80026b0:	eddd 9a09 	vldr	s19, [sp, #36]	; 0x24
 80026b4:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80026b8:	ed9d 2a11 	vldr	s4, [sp, #68]	; 0x44
 80026bc:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 80026c0:	ed9d aa07 	vldr	s20, [sp, #28]
 80026c4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80026c8:	ee65 3aa2 	vmul.f32	s7, s11, s5
 80026cc:	ee2a baa6 	vmul.f32	s22, s21, s13
 80026d0:	ee63 3a80 	vmul.f32	s7, s7, s0
 80026d4:	ee25 4a89 	vmul.f32	s8, s11, s18
 80026d8:	eeeb 3a03 	vfma.f32	s7, s22, s6
 80026dc:	ee61 ba09 	vmul.f32	s23, s2, s18
 80026e0:	ee26 ba81 	vmul.f32	s22, s13, s2
 80026e4:	ee66 4a21 	vmul.f32	s9, s12, s3
 80026e8:	ee26 5a28 	vmul.f32	s10, s12, s17
 80026ec:	ee24 4a03 	vmul.f32	s8, s8, s6
 80026f0:	eeeb 3a8a 	vfma.f32	s7, s23, s20
 80026f4:	eea0 4a0b 	vfma.f32	s8, s0, s22
 80026f8:	ee67 ba20 	vmul.f32	s23, s14, s1
 80026fc:	ee29 ba87 	vmul.f32	s22, s19, s14
 8002700:	ee64 4a88 	vmul.f32	s9, s9, s16
 8002704:	ee25 5a02 	vmul.f32	s10, s10, s4
 8002708:	eeeb 4a02 	vfma.f32	s9, s22, s4
 800270c:	eea8 5a2b 	vfma.f32	s10, s16, s23
 8002710:	ee2a baa2 	vmul.f32	s22, s21, s5
 8002714:	ee60 baa8 	vmul.f32	s23, s1, s17
 8002718:	eeaa 4a0b 	vfma.f32	s8, s20, s22
 800271c:	ee29 baa1 	vmul.f32	s22, s19, s3
 8002720:	eeeb 4aa7 	vfma.f32	s9, s23, s15
 8002724:	eea7 5a8b 	vfma.f32	s10, s15, s22
 8002728:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800272c:	ee34 5ac5 	vsub.f32	s10, s9, s10
	if(detU*detV<0){
 8002730:	ee25 5a04 	vmul.f32	s10, s10, s8
 8002734:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d505      	bpl.n	800274a <WahbaJacobiSVDRotM+0x106>
 800273e:	eeb1 3a43 	vneg.f32	s6, s6
 8002742:	eef1 2a62 	vneg.f32	s5, s5
 8002746:	eeb1 1a41 	vneg.f32	s2, s2
 * @retval None
 */
static inline void mulMatrMatrTr(real (*A)[3],real (*B)[3],real (*C)[3]){
	int i;
	for (i=0;i<3;i++){
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 800274a:	ee66 3a25 	vmul.f32	s7, s12, s11
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 800274e:	ee27 4a25 	vmul.f32	s8, s14, s11
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002752:	ee66 4a26 	vmul.f32	s9, s12, s13
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002756:	ee27 5a26 	vmul.f32	s10, s14, s13
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 800275a:	ee67 5aa5 	vmul.f32	s11, s15, s11
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 800275e:	ee26 6a0a 	vmul.f32	s12, s12, s20
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002762:	ee67 6aa6 	vmul.f32	s13, s15, s13
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002766:	ee27 7a0a 	vmul.f32	s14, s14, s20
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 800276a:	ee67 7a8a 	vmul.f32	s15, s15, s20
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 800276e:	eee9 3aaa 	vfma.f32	s7, s19, s21
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002772:	eea8 4aaa 	vfma.f32	s8, s17, s21
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002776:	eee8 5a2a 	vfma.f32	s11, s16, s21
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 800277a:	eee9 4a89 	vfma.f32	s9, s19, s18
 800277e:	eea9 6a80 	vfma.f32	s12, s19, s0
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002782:	eea8 5a89 	vfma.f32	s10, s17, s18
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002786:	eee8 6a09 	vfma.f32	s13, s16, s18
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 800278a:	eea8 7a80 	vfma.f32	s14, s17, s0
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 800278e:	eee8 7a00 	vfma.f32	s15, s16, s0
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002792:	eee0 3a81 	vfma.f32	s7, s1, s2
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002796:	eea1 4a81 	vfma.f32	s8, s3, s2
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 800279a:	eee2 5a01 	vfma.f32	s11, s4, s2
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 800279e:	eee0 4aa2 	vfma.f32	s9, s1, s5
 80027a2:	eea0 6a83 	vfma.f32	s12, s1, s6
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80027a6:	eea1 5aa2 	vfma.f32	s10, s3, s5
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80027aa:	eee2 6a22 	vfma.f32	s13, s4, s5
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80027ae:	eea1 7a83 	vfma.f32	s14, s3, s6
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80027b2:	eee2 7a03 	vfma.f32	s15, s4, s6
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 80027b6:	edc4 3a00 	vstr	s7, [r4]
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80027ba:	ed84 4a03 	vstr	s8, [r4, #12]
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80027be:	edc4 5a06 	vstr	s11, [r4, #24]
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 80027c2:	edc4 4a01 	vstr	s9, [r4, #4]
 80027c6:	ed84 6a02 	vstr	s12, [r4, #8]
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80027ca:	ed84 5a04 	vstr	s10, [r4, #16]
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80027ce:	edc4 6a07 	vstr	s13, [r4, #28]
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80027d2:	ed84 7a05 	vstr	s14, [r4, #20]
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80027d6:	edc4 7a08 	vstr	s15, [r4, #32]
}
 80027da:	b013      	add	sp, #76	; 0x4c
 80027dc:	ecbd 8b08 	vpop	{d8-d11}
 80027e0:	bd30      	pop	{r4, r5, pc}
 80027e2:	bf00      	nop

080027e4 <USBD_USR_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 80027e4:	2312      	movs	r3, #18
 80027e6:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 80027e8:	4800      	ldr	r0, [pc, #0]	; (80027ec <USBD_USR_DeviceDescriptor+0x8>)
 80027ea:	4770      	bx	lr
 80027ec:	20000450 	.word	0x20000450

080027f0 <USBD_USR_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 80027f0:	2304      	movs	r3, #4
 80027f2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 80027f4:	4800      	ldr	r0, [pc, #0]	; (80027f8 <USBD_USR_LangIDStrDescriptor+0x8>)
 80027f6:	4770      	bx	lr
 80027f8:	20000464 	.word	0x20000464

080027fc <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80027fc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80027fe:	4c04      	ldr	r4, [pc, #16]	; (8002810 <USBD_USR_ManufacturerStrDescriptor+0x14>)
 8002800:	4804      	ldr	r0, [pc, #16]	; (8002814 <USBD_USR_ManufacturerStrDescriptor+0x18>)
 8002802:	460a      	mov	r2, r1
 8002804:	4621      	mov	r1, r4
 8002806:	f002 ff59 	bl	80056bc <USBD_GetString>
  return USBD_StrDesc;
}
 800280a:	4620      	mov	r0, r4
 800280c:	bd10      	pop	{r4, pc}
 800280e:	bf00      	nop
 8002810:	20001324 	.word	0x20001324
 8002814:	0800b3c8 	.word	0x0800b3c8

08002818 <USBD_USR_ProductStrDescriptor>:
{
 8002818:	460a      	mov	r2, r1
 800281a:	b508      	push	{r3, lr}
    USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800281c:	4905      	ldr	r1, [pc, #20]	; (8002834 <USBD_USR_ProductStrDescriptor+0x1c>)
  if(speed == 0)
 800281e:	b120      	cbz	r0, 800282a <USBD_USR_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <USBD_USR_ProductStrDescriptor+0x20>)
 8002822:	f002 ff4b 	bl	80056bc <USBD_GetString>
}
 8002826:	4803      	ldr	r0, [pc, #12]	; (8002834 <USBD_USR_ProductStrDescriptor+0x1c>)
 8002828:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800282a:	4804      	ldr	r0, [pc, #16]	; (800283c <USBD_USR_ProductStrDescriptor+0x24>)
 800282c:	f002 ff46 	bl	80056bc <USBD_GetString>
}
 8002830:	4800      	ldr	r0, [pc, #0]	; (8002834 <USBD_USR_ProductStrDescriptor+0x1c>)
 8002832:	bd08      	pop	{r3, pc}
 8002834:	20001324 	.word	0x20001324
 8002838:	0800b400 	.word	0x0800b400
 800283c:	0800b3dc 	.word	0x0800b3dc

08002840 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8002840:	b510      	push	{r4, lr}
  if(speed  == USB_OTG_SPEED_HIGH)
  {  
    USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8002842:	4c04      	ldr	r4, [pc, #16]	; (8002854 <USBD_USR_ConfigStrDescriptor+0x14>)
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <USBD_USR_ConfigStrDescriptor+0x18>)
 8002846:	460a      	mov	r2, r1
 8002848:	4621      	mov	r1, r4
 800284a:	f002 ff37 	bl	80056bc <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 800284e:	4620      	mov	r0, r4
 8002850:	bd10      	pop	{r4, pc}
 8002852:	bf00      	nop
 8002854:	20001324 	.word	0x20001324
 8002858:	0800b3ac 	.word	0x0800b3ac

0800285c <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 800285c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800285e:	4c04      	ldr	r4, [pc, #16]	; (8002870 <USBD_USR_InterfaceStrDescriptor+0x14>)
 8002860:	4804      	ldr	r0, [pc, #16]	; (8002874 <USBD_USR_InterfaceStrDescriptor+0x18>)
 8002862:	460a      	mov	r2, r1
 8002864:	4621      	mov	r1, r4
 8002866:	f002 ff29 	bl	80056bc <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 800286a:	4620      	mov	r0, r4
 800286c:	bd10      	pop	{r4, pc}
 800286e:	bf00      	nop
 8002870:	20001324 	.word	0x20001324
 8002874:	0800b3b8 	.word	0x0800b3b8

08002878 <USBD_USR_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8002878:	4a40      	ldr	r2, [pc, #256]	; (800297c <USBD_USR_SerialStrDescriptor+0x104>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800287a:	4b41      	ldr	r3, [pc, #260]	; (8002980 <USBD_USR_SerialStrDescriptor+0x108>)
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800287c:	6812      	ldr	r2, [r2, #0]
  
  deviceserial0 += deviceserial2;
 800287e:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8002880:	201a      	movs	r0, #26
  
  if (deviceserial0 != 0)
 8002882:	18d2      	adds	r2, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 8002884:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 8002886:	d101      	bne.n	800288c <USBD_USR_SerialStrDescriptor+0x14>
}
 8002888:	483e      	ldr	r0, [pc, #248]	; (8002984 <USBD_USR_SerialStrDescriptor+0x10c>)
 800288a:	4770      	bx	lr
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800288c:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <USBD_USR_SerialStrDescriptor+0x110>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800288e:	0f10      	lsrs	r0, r2, #28
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8002890:	6819      	ldr	r1, [r3, #0]
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002892:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <USBD_USR_SerialStrDescriptor+0x10c>)
    if( ((value >> 28)) < 0xA )
 8002894:	2809      	cmp	r0, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002896:	bf94      	ite	ls
 8002898:	3030      	addls	r0, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800289a:	3037      	addhi	r0, #55	; 0x37
{
 800289c:	b410      	push	{r4}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800289e:	7098      	strb	r0, [r3, #2]
    if( ((value >> 28)) < 0xA )
 80028a0:	f3c2 6003 	ubfx	r0, r2, #24, #4
 80028a4:	2809      	cmp	r0, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80028a6:	bf94      	ite	ls
 80028a8:	3030      	addls	r0, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80028aa:	3037      	addhi	r0, #55	; 0x37
 80028ac:	7118      	strb	r0, [r3, #4]
    if( ((value >> 28)) < 0xA )
 80028ae:	f3c2 5003 	ubfx	r0, r2, #20, #4
 80028b2:	2809      	cmp	r0, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80028b4:	bf94      	ite	ls
 80028b6:	3030      	addls	r0, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80028b8:	3037      	addhi	r0, #55	; 0x37
 80028ba:	7198      	strb	r0, [r3, #6]
    if( ((value >> 28)) < 0xA )
 80028bc:	f3c2 4003 	ubfx	r0, r2, #16, #4
 80028c0:	2809      	cmp	r0, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80028c2:	bf94      	ite	ls
 80028c4:	3030      	addls	r0, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80028c6:	3037      	addhi	r0, #55	; 0x37
 80028c8:	7218      	strb	r0, [r3, #8]
    if( ((value >> 28)) < 0xA )
 80028ca:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80028ce:	2809      	cmp	r0, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80028d0:	bf94      	ite	ls
 80028d2:	3030      	addls	r0, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80028d4:	3037      	addhi	r0, #55	; 0x37
 80028d6:	7298      	strb	r0, [r3, #10]
    if( ((value >> 28)) < 0xA )
 80028d8:	f3c2 2003 	ubfx	r0, r2, #8, #4
 80028dc:	2809      	cmp	r0, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80028de:	bf94      	ite	ls
 80028e0:	3030      	addls	r0, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80028e2:	3037      	addhi	r0, #55	; 0x37
 80028e4:	7318      	strb	r0, [r3, #12]
    if( ((value >> 28)) < 0xA )
 80028e6:	f3c2 1003 	ubfx	r0, r2, #4, #4
 80028ea:	2809      	cmp	r0, #9
 80028ec:	f002 020f 	and.w	r2, r2, #15
      pbuf[ 2* idx] = (value >> 28) + '0';
 80028f0:	bf94      	ite	ls
 80028f2:	3030      	addls	r0, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80028f4:	3037      	addhi	r0, #55	; 0x37
    if( ((value >> 28)) < 0xA )
 80028f6:	2a09      	cmp	r2, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80028f8:	bf94      	ite	ls
 80028fa:	3230      	addls	r2, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80028fc:	3237      	addhi	r2, #55	; 0x37
 80028fe:	741a      	strb	r2, [r3, #16]
    if( ((value >> 28)) < 0xA )
 8002900:	0f0a      	lsrs	r2, r1, #28
 8002902:	2a09      	cmp	r2, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002904:	bf94      	ite	ls
 8002906:	3230      	addls	r2, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002908:	3237      	addhi	r2, #55	; 0x37
 800290a:	749a      	strb	r2, [r3, #18]
    if( ((value >> 28)) < 0xA )
 800290c:	f3c1 6203 	ubfx	r2, r1, #24, #4
 8002910:	2a09      	cmp	r2, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002912:	bf94      	ite	ls
 8002914:	3230      	addls	r2, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002916:	3237      	addhi	r2, #55	; 0x37
 8002918:	751a      	strb	r2, [r3, #20]
    if( ((value >> 28)) < 0xA )
 800291a:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800291e:	2a09      	cmp	r2, #9
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002920:	f04f 0400 	mov.w	r4, #0
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002924:	bf94      	ite	ls
 8002926:	3230      	addls	r2, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002928:	3237      	addhi	r2, #55	; 0x37
    pbuf[ 2* idx + 1] = 0;
 800292a:	70dc      	strb	r4, [r3, #3]
 800292c:	2400      	movs	r4, #0
 800292e:	715c      	strb	r4, [r3, #5]
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002930:	7398      	strb	r0, [r3, #14]
    pbuf[ 2* idx + 1] = 0;
 8002932:	2400      	movs	r4, #0
 8002934:	2000      	movs	r0, #0
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002936:	759a      	strb	r2, [r3, #22]
    if( ((value >> 28)) < 0xA )
 8002938:	f3c1 4203 	ubfx	r2, r1, #16, #4
 800293c:	2a09      	cmp	r2, #9
    pbuf[ 2* idx + 1] = 0;
 800293e:	71dc      	strb	r4, [r3, #7]
 8002940:	73d8      	strb	r0, [r3, #15]
 8002942:	f04f 0400 	mov.w	r4, #0
 8002946:	f04f 0000 	mov.w	r0, #0
 800294a:	725c      	strb	r4, [r3, #9]
 800294c:	7458      	strb	r0, [r3, #17]
 800294e:	f04f 0400 	mov.w	r4, #0
 8002952:	f04f 0000 	mov.w	r0, #0
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002956:	bf94      	ite	ls
 8002958:	3230      	addls	r2, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800295a:	3237      	addhi	r2, #55	; 0x37
    pbuf[ 2* idx + 1] = 0;
 800295c:	72dc      	strb	r4, [r3, #11]
 800295e:	74d8      	strb	r0, [r3, #19]
 8002960:	2400      	movs	r4, #0
 8002962:	2000      	movs	r0, #0
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002964:	761a      	strb	r2, [r3, #24]
    pbuf[ 2* idx + 1] = 0;
 8002966:	2100      	movs	r1, #0
 8002968:	2200      	movs	r2, #0
 800296a:	7558      	strb	r0, [r3, #21]
 800296c:	735c      	strb	r4, [r3, #13]
 800296e:	75d9      	strb	r1, [r3, #23]
 8002970:	765a      	strb	r2, [r3, #25]
}
 8002972:	4804      	ldr	r0, [pc, #16]	; (8002984 <USBD_USR_SerialStrDescriptor+0x10c>)
 8002974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	1fff7a10 	.word	0x1fff7a10
 8002980:	1fff7a18 	.word	0x1fff7a18
 8002984:	20000468 	.word	0x20000468
 8002988:	1fff7a14 	.word	0x1fff7a14

0800298c <wahba_StructInit>:
 * @brief  This function initializes wahba_rotStruct. Change accordingly..
 * @param  WStruct, wahba_rotStruct
 * @param  dt, control loop period in (s)
 * @retval None
 */
void wahba_StructInit(wahba_rotStruct *WStruct,real dt){
 800298c:	b470      	push	{r4, r5, r6}
	WStruct->w_a = 0.05;
	WStruct->w_m = 0.01;

	// Initial Reference magnetometer vector, will be updated during filter execution
	WStruct->m_r[0] = 0.707;
	WStruct->m_r[1] = 0.0;
 800298e:	2300      	movs	r3, #0
		for(int j=0;j<3;j++){
			WStruct->RotM[i][j]=0;
			WStruct->RotM_prev[i][j]=0;
		}
	for(int i=0;i<3;i++){
		WStruct->RotM[i][i]=1;
 8002990:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	WStruct->w_a = 0.05;
 8002994:	4e18      	ldr	r6, [pc, #96]	; (80029f8 <wahba_StructInit+0x6c>)
	WStruct->w_m = 0.01;
 8002996:	4d19      	ldr	r5, [pc, #100]	; (80029fc <wahba_StructInit+0x70>)
	WStruct->m_r[0] = 0.707;
 8002998:	4919      	ldr	r1, [pc, #100]	; (8002a00 <wahba_StructInit+0x74>)
	WStruct->a_r[2] = -1.0;
 800299a:	4c1a      	ldr	r4, [pc, #104]	; (8002a04 <wahba_StructInit+0x78>)
	WStruct->w_a = 0.05;
 800299c:	6006      	str	r6, [r0, #0]
	WStruct->w_m = 0.01;
 800299e:	6045      	str	r5, [r0, #4]
	WStruct->a_r[2] = -1.0;
 80029a0:	6104      	str	r4, [r0, #16]
	WStruct->dt=dt;
 80029a2:	ed80 0a35 	vstr	s0, [r0, #212]	; 0xd4
	WStruct->m_r[0] = 0.707;
 80029a6:	6141      	str	r1, [r0, #20]
	WStruct->m_r[2] = 0.707;
 80029a8:	61c1      	str	r1, [r0, #28]
	WStruct->m_r[1] = 0.0;
 80029aa:	6183      	str	r3, [r0, #24]
	WStruct->a_r[0] = 0.0;
 80029ac:	6083      	str	r3, [r0, #8]
	WStruct->a_r[1] = 0.0;
 80029ae:	60c3      	str	r3, [r0, #12]
			WStruct->RotM[i][j]=0;
 80029b0:	64c3      	str	r3, [r0, #76]	; 0x4c
			WStruct->RotM_prev[i][j]=0;
 80029b2:	6703      	str	r3, [r0, #112]	; 0x70
			WStruct->RotM[i][j]=0;
 80029b4:	6503      	str	r3, [r0, #80]	; 0x50
			WStruct->RotM_prev[i][j]=0;
 80029b6:	6743      	str	r3, [r0, #116]	; 0x74
			WStruct->RotM[i][j]=0;
 80029b8:	6543      	str	r3, [r0, #84]	; 0x54
			WStruct->RotM_prev[i][j]=0;
 80029ba:	6783      	str	r3, [r0, #120]	; 0x78
			WStruct->RotM[i][j]=0;
 80029bc:	65c3      	str	r3, [r0, #92]	; 0x5c
			WStruct->RotM_prev[i][j]=0;
 80029be:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
			WStruct->RotM[i][j]=0;
 80029c2:	6603      	str	r3, [r0, #96]	; 0x60
			WStruct->RotM_prev[i][j]=0;
 80029c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
			WStruct->RotM[i][j]=0;
 80029c8:	6643      	str	r3, [r0, #100]	; 0x64
			WStruct->RotM_prev[i][j]=0;
 80029ca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
		WStruct->RotM_prev[i][i]=1;
	}

	for(int i=0;i<3;i++){
		WStruct->g_va[i] = 0;
 80029ce:	6203      	str	r3, [r0, #32]
		WStruct->g_vm[i] = 0;
 80029d0:	62c3      	str	r3, [r0, #44]	; 0x2c
		WStruct->W[i] = 0;
 80029d2:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
		WStruct->g_va[i] = 0;
 80029d6:	6243      	str	r3, [r0, #36]	; 0x24
		WStruct->g_vm[i] = 0;
 80029d8:	6303      	str	r3, [r0, #48]	; 0x30
		WStruct->RotM[i][i]=1;
 80029da:	6482      	str	r2, [r0, #72]	; 0x48
		WStruct->RotM_prev[i][i]=1;
 80029dc:	66c2      	str	r2, [r0, #108]	; 0x6c
		WStruct->RotM[i][i]=1;
 80029de:	6582      	str	r2, [r0, #88]	; 0x58
		WStruct->RotM_prev[i][i]=1;
 80029e0:	67c2      	str	r2, [r0, #124]	; 0x7c
		WStruct->RotM[i][i]=1;
 80029e2:	6682      	str	r2, [r0, #104]	; 0x68
		WStruct->RotM_prev[i][i]=1;
 80029e4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
		WStruct->W[i] = 0;
 80029e8:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
		WStruct->g_va[i] = 0;
 80029ec:	6283      	str	r3, [r0, #40]	; 0x28
		WStruct->g_vm[i] = 0;
 80029ee:	6343      	str	r3, [r0, #52]	; 0x34
		WStruct->W[i] = 0;
 80029f0:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	}
}
 80029f4:	bc70      	pop	{r4, r5, r6}
 80029f6:	4770      	bx	lr
 80029f8:	3d4ccccd 	.word	0x3d4ccccd
 80029fc:	3c23d70a 	.word	0x3c23d70a
 8002a00:	3f34fdf4 	.word	0x3f34fdf4
 8002a04:	bf800000 	.word	0xbf800000

08002a08 <wahba_rot>:
 * @param  acc[3], accelerometer readings, a.u
 * @param  gyr[3], gyro reading in rad/s
 * @param  mag[3], magnetometer reading, a.u
 * @retval None
 */
void wahba_rot(real acc[3],real gyr[3],real mag[3],wahba_rotStruct *WStruct){
 8002a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @brief  Vector Norm
 * @param  V 3x1 real vector
 * @retval real ||V||
 */
static inline real normV(real V[3]){
	return sqrtv(V[0]*V[0]+V[1]*V[1]+V[2]*V[2]);
 8002a0c:	ed90 0a01 	vldr	s0, [r0, #4]
 8002a10:	ed90 7a00 	vldr	s14, [r0]
 8002a14:	edd0 7a02 	vldr	s15, [r0, #8]
	static real a_bn[3],m_bn[3],An,Mn,accok,magok;
	static real AccErr,*a_r,*w_g,*m_r,*g_va,*g_vm;//,*g_vg;
	static real Rbe[3][3];
	static real We[3];

	a_r = WStruct->a_r;
 8002a18:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8002e28 <wahba_rot+0x420>
	m_r = WStruct->m_r;
 8002a1c:	f8df 840c 	ldr.w	r8, [pc, #1036]	; 8002e2c <wahba_rot+0x424>
	RotM = WStruct->RotM;
	g_va = WStruct->g_va;
	g_vm = WStruct->g_vm;
 8002a20:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8002e30 <wahba_rot+0x428>
 8002a24:	ee20 0a00 	vmul.f32	s0, s0, s0
void wahba_rot(real acc[3],real gyr[3],real mag[3],wahba_rotStruct *WStruct){
 8002a28:	ed2d 8b08 	vpush	{d8-d11}
 8002a2c:	eea7 0a07 	vfma.f32	s0, s14, s14
 8002a30:	b085      	sub	sp, #20
 8002a32:	461c      	mov	r4, r3
 8002a34:	4683      	mov	fp, r0
 8002a36:	eea7 0aa7 	vfma.f32	s0, s15, s15
	a_r = WStruct->a_r;
 8002a3a:	3308      	adds	r3, #8
void wahba_rot(real acc[3],real gyr[3],real mag[3],wahba_rotStruct *WStruct){
 8002a3c:	9103      	str	r1, [sp, #12]
 8002a3e:	4610      	mov	r0, r2
	dt = WStruct->dt;
 8002a40:	49ef      	ldr	r1, [pc, #956]	; (8002e00 <wahba_rot+0x3f8>)
 8002a42:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
	a_r = WStruct->a_r;
 8002a46:	f8ca 3000 	str.w	r3, [sl]
	m_r = WStruct->m_r;
 8002a4a:	f104 0314 	add.w	r3, r4, #20
	dt = WStruct->dt;
 8002a4e:	600a      	str	r2, [r1, #0]
	m_r = WStruct->m_r;
 8002a50:	f8c8 3000 	str.w	r3, [r8]
	g_va = WStruct->g_va;
 8002a54:	49eb      	ldr	r1, [pc, #940]	; (8002e04 <wahba_rot+0x3fc>)
	g_vm = WStruct->g_vm;
 8002a56:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    if(in >= 0.0f)
 8002a5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	g_va = WStruct->g_va;
 8002a5e:	f104 0220 	add.w	r2, r4, #32
	g_vm = WStruct->g_vm;
 8002a62:	f8c9 3000 	str.w	r3, [r9]
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	RotM = WStruct->RotM;
 8002a6a:	f104 0348 	add.w	r3, r4, #72	; 0x48
	g_va = WStruct->g_va;
 8002a6e:	600a      	str	r2, [r1, #0]
	RotM = WStruct->RotM;
 8002a70:	9302      	str	r3, [sp, #8]
 8002a72:	f2c0 8536 	blt.w	80034e2 <wahba_rot+0xada>
 8002a76:	9001      	str	r0, [sp, #4]
      *pOut = sqrtf(in);
 8002a78:	f003 fde0 	bl	800663c <sqrtf>
 8002a7c:	9801      	ldr	r0, [sp, #4]
 8002a7e:	eef0 2a40 	vmov.f32	s5, s0
 8002a82:	edd0 7a01 	vldr	s15, [r0, #4]
 8002a86:	edd0 6a00 	vldr	s13, [r0]
 8002a8a:	ed90 7a02 	vldr	s14, [r0, #8]
    if(in >= 0.0f)
 8002a8e:	ed9f 0ade 	vldr	s0, [pc, #888]	; 8002e08 <wahba_rot+0x400>


	// Normalize readings
	An = normV(acc);
 8002a92:	4dde      	ldr	r5, [pc, #888]	; (8002e0c <wahba_rot+0x404>)
 8002a94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a98:	edc5 2a00 	vstr	s5, [r5]
 8002a9c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8002aa0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8002aa4:	eef4 7ac0 	vcmpe.f32	s15, s0
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	f2c0 8249 	blt.w	8002f42 <wahba_rot+0x53a>
      *pOut = sqrtf(in);
 8002ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab4:	9001      	str	r0, [sp, #4]
 8002ab6:	f003 fdc1 	bl	800663c <sqrtf>
	Mn = normV(mag);

	accok = 1;
	if(An < TOL)
 8002aba:	edd5 2a00 	vldr	s5, [r5]
 8002abe:	eddf 7ade 	vldr	s15, [pc, #888]	; 8002e38 <wahba_rot+0x430>
	Mn = normV(mag);
 8002ac2:	4bd3      	ldr	r3, [pc, #844]	; (8002e10 <wahba_rot+0x408>)
	accok = 1;
 8002ac4:	4ad3      	ldr	r2, [pc, #844]	; (8002e14 <wahba_rot+0x40c>)
	if(An < TOL)
 8002ac6:	9801      	ldr	r0, [sp, #4]
	Mn = normV(mag);
 8002ac8:	ed83 0a00 	vstr	s0, [r3]
	if(An < TOL)
 8002acc:	eef4 2ae7 	vcmpe.f32	s5, s15
	accok = 1;
 8002ad0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	if(An < TOL)
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	accok = 1;
 8002ad8:	ed82 6a00 	vstr	s12, [r2]
 8002adc:	edd0 6a00 	vldr	s13, [r0]
	if(An < TOL)
 8002ae0:	f100 823f 	bmi.w	8002f62 <wahba_rot+0x55a>
		An = 1;
		accok = 0;
	}

	magok = 1;
	if(Mn < TOL)
 8002ae4:	eddf 7ad4 	vldr	s15, [pc, #848]	; 8002e38 <wahba_rot+0x430>
	magok = 1;
 8002ae8:	4acb      	ldr	r2, [pc, #812]	; (8002e18 <wahba_rot+0x410>)
 8002aea:	9201      	str	r2, [sp, #4]
	if(Mn < TOL)
 8002aec:	eeb4 0ae7 	vcmpe.f32	s0, s15
	magok = 1;
 8002af0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	if(Mn < TOL)
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	magok = 1;
 8002af8:	edc2 5a00 	vstr	s11, [r2]
	if(Mn < TOL)
 8002afc:	f100 840d 	bmi.w	800331a <wahba_rot+0x912>
 8002b00:	ed93 5a00 	vldr	s10, [r3]
	w_gm = 1-w_m;


	for(int i=0;i<3;i++){
		a_bn[i] = acc[i]/An;
		m_bn[i] = mag[i]/Mn;
 8002b04:	4ac5      	ldr	r2, [pc, #788]	; (8002e1c <wahba_rot+0x414>)
	w_a  = WStruct->w_a*accok;
 8002b06:	edd4 4a00 	vldr	s9, [r4]
	w_m  = WStruct->w_m*magok;
 8002b0a:	ed94 4a01 	vldr	s8, [r4, #4]
		a_bn[i] = acc[i]/An;
 8002b0e:	eddb 3a00 	vldr	s7, [fp]
 8002b12:	f8d8 e000 	ldr.w	lr, [r8]
 8002b16:	f8da 7000 	ldr.w	r7, [sl]
 8002b1a:	f8df c318 	ldr.w	ip, [pc, #792]	; 8002e34 <wahba_rot+0x42c>
 8002b1e:	4bb9      	ldr	r3, [pc, #740]	; (8002e04 <wahba_rot+0x3fc>)
 8002b20:	f8d9 5000 	ldr.w	r5, [r9]
 8002b24:	681e      	ldr	r6, [r3, #0]
	}


	for(int i=0;i<3;i++){
		A[i][0] = w_a*a_bn[0]*a_r[i] + w_m*m_bn[0]*m_r[i] + w_ga*g_va[0]*a_r[i] + w_gm*g_vm[0]*m_r[i];
 8002b26:	4bbe      	ldr	r3, [pc, #760]	; (8002e20 <wahba_rot+0x418>)
		A[i][1] = w_a*a_bn[1]*a_r[i] + w_m*m_bn[1]*m_r[i] + w_ga*g_va[1]*a_r[i] + w_gm*g_vm[1]*m_r[i];
		A[i][2] = w_a*a_bn[2]*a_r[i] + w_m*m_bn[2]*m_r[i] + w_ga*g_va[2]*a_r[i] + w_gm*g_vm[2]*m_r[i];
	}

	// Main SVD algorithm
	WahbaJacobiSVDRotM(A,RotM);
 8002b28:	9902      	ldr	r1, [sp, #8]
		m_bn[i] = mag[i]/Mn;
 8002b2a:	9202      	str	r2, [sp, #8]
 8002b2c:	ee86 7a85 	vdiv.f32	s14, s13, s10
	w_m  = WStruct->w_m*magok;
 8002b30:	ee65 5a84 	vmul.f32	s11, s11, s8
		m_bn[i] = mag[i]/Mn;
 8002b34:	ed82 7a00 	vstr	s14, [r2]
 8002b38:	ed90 3a01 	vldr	s6, [r0, #4]
		a_bn[i] = acc[i]/An;
 8002b3c:	eddb 6a01 	vldr	s13, [fp, #4]
		m_bn[i] = mag[i]/Mn;
 8002b40:	eec3 7a05 	vdiv.f32	s15, s6, s10
		a_bn[i] = acc[i]/An;
 8002b44:	ee83 3aa2 	vdiv.f32	s6, s7, s5
		m_bn[i] = mag[i]/Mn;
 8002b48:	edc2 7a01 	vstr	s15, [r2, #4]
 8002b4c:	edd0 3a02 	vldr	s7, [r0, #8]
		a_bn[i] = acc[i]/An;
 8002b50:	ed9b 0a02 	vldr	s0, [fp, #8]
 8002b54:	ed8c 3a00 	vstr	s6, [ip]
		m_bn[i] = mag[i]/Mn;
 8002b58:	eec3 0a85 	vdiv.f32	s1, s7, s10
	WahbaJacobiSVDRotM(A,RotM);
 8002b5c:	4618      	mov	r0, r3
	w_a  = WStruct->w_a*accok;
 8002b5e:	ee26 6a24 	vmul.f32	s12, s12, s9
		m_bn[i] = mag[i]/Mn;
 8002b62:	edc2 0a02 	vstr	s1, [r2, #8]
		A[i][0] = w_a*a_bn[0]*a_r[i] + w_m*m_bn[0]*m_r[i] + w_ga*g_va[0]*a_r[i] + w_gm*g_vm[0]*m_r[i];
 8002b66:	ed9e 2a00 	vldr	s4, [lr]
 8002b6a:	ed97 1a00 	vldr	s2, [r7]
 8002b6e:	edd6 3a00 	vldr	s7, [r6]
 8002b72:	ed95 5a00 	vldr	s10, [r5]
 8002b76:	ee25 7a87 	vmul.f32	s14, s11, s14
 8002b7a:	ee26 3a03 	vmul.f32	s6, s12, s6
 8002b7e:	ee22 4a07 	vmul.f32	s8, s4, s14
	w_ga = 1-w_a;
 8002b82:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		a_bn[i] = acc[i]/An;
 8002b86:	eec6 1aa2 	vdiv.f32	s3, s13, s5
		A[i][0] = w_a*a_bn[0]*a_r[i] + w_m*m_bn[0]*m_r[i] + w_ga*g_va[0]*a_r[i] + w_gm*g_vm[0]*m_r[i];
 8002b8a:	eea1 4a03 	vfma.f32	s8, s2, s6
	w_ga = 1-w_a;
 8002b8e:	ee78 6a46 	vsub.f32	s13, s16, s12
	w_gm = 1-w_m;
 8002b92:	ee78 4a65 	vsub.f32	s9, s16, s11
		A[i][0] = w_a*a_bn[0]*a_r[i] + w_m*m_bn[0]*m_r[i] + w_ga*g_va[0]*a_r[i] + w_gm*g_vm[0]*m_r[i];
 8002b96:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8002b9a:	ee24 5a85 	vmul.f32	s10, s9, s10
 8002b9e:	eea3 4a81 	vfma.f32	s8, s7, s2
 8002ba2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ba6:	eea5 4a02 	vfma.f32	s8, s10, s4
 8002baa:	ee66 3a21 	vmul.f32	s7, s12, s3
 8002bae:	ed83 4a00 	vstr	s8, [r3]
		A[i][1] = w_a*a_bn[1]*a_r[i] + w_m*m_bn[1]*m_r[i] + w_ga*g_va[1]*a_r[i] + w_gm*g_vm[1]*m_r[i];
 8002bb2:	ed9e 1a00 	vldr	s2, [lr]
 8002bb6:	ed96 2a01 	vldr	s4, [r6, #4]
		a_bn[i] = acc[i]/An;
 8002bba:	ee80 5a22 	vdiv.f32	s10, s0, s5
		A[i][1] = w_a*a_bn[1]*a_r[i] + w_m*m_bn[1]*m_r[i] + w_ga*g_va[1]*a_r[i] + w_gm*g_vm[1]*m_r[i];
 8002bbe:	ee21 4a27 	vmul.f32	s8, s2, s15
 8002bc2:	ed97 0a00 	vldr	s0, [r7]
 8002bc6:	edd5 2a01 	vldr	s5, [r5, #4]
		a_bn[i] = acc[i]/An;
 8002bca:	ed8c 5a02 	vstr	s10, [ip, #8]
		A[i][1] = w_a*a_bn[1]*a_r[i] + w_m*m_bn[1]*m_r[i] + w_ga*g_va[1]*a_r[i] + w_gm*g_vm[1]*m_r[i];
 8002bce:	eea0 4a23 	vfma.f32	s8, s0, s7
 8002bd2:	ee26 2a82 	vmul.f32	s4, s13, s4
 8002bd6:	ee64 2aa2 	vmul.f32	s5, s9, s5
 8002bda:	eea2 4a00 	vfma.f32	s8, s4, s0
 8002bde:	ee65 5aa0 	vmul.f32	s11, s11, s1
 8002be2:	eea2 4a81 	vfma.f32	s8, s5, s2
 8002be6:	ee26 5a05 	vmul.f32	s10, s12, s10
 8002bea:	ed83 4a01 	vstr	s8, [r3, #4]
		A[i][2] = w_a*a_bn[2]*a_r[i] + w_m*m_bn[2]*m_r[i] + w_ga*g_va[2]*a_r[i] + w_gm*g_vm[2]*m_r[i];
 8002bee:	ed9e 2a00 	vldr	s4, [lr]
 8002bf2:	ed97 1a00 	vldr	s2, [r7]
 8002bf6:	edd6 2a02 	vldr	s5, [r6, #8]
 8002bfa:	ed95 4a02 	vldr	s8, [r5, #8]
		a_bn[i] = acc[i]/An;
 8002bfe:	edcc 1a01 	vstr	s3, [ip, #4]
		A[i][2] = w_a*a_bn[2]*a_r[i] + w_m*m_bn[2]*m_r[i] + w_ga*g_va[2]*a_r[i] + w_gm*g_vm[2]*m_r[i];
 8002c02:	ee22 6a25 	vmul.f32	s12, s4, s11
 8002c06:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8002c0a:	eea1 6a05 	vfma.f32	s12, s2, s10
 8002c0e:	ee24 4a84 	vmul.f32	s8, s9, s8
 8002c12:	eea2 6a81 	vfma.f32	s12, s5, s2
 8002c16:	eea4 6a02 	vfma.f32	s12, s8, s4
 8002c1a:	ed83 6a02 	vstr	s12, [r3, #8]
		A[i][0] = w_a*a_bn[0]*a_r[i] + w_m*m_bn[0]*m_r[i] + w_ga*g_va[0]*a_r[i] + w_gm*g_vm[0]*m_r[i];
 8002c1e:	ed9e 2a01 	vldr	s4, [lr, #4]
 8002c22:	edd7 1a01 	vldr	s3, [r7, #4]
 8002c26:	edd6 2a00 	vldr	s5, [r6]
 8002c2a:	ed95 4a00 	vldr	s8, [r5]
 8002c2e:	ee22 6a07 	vmul.f32	s12, s4, s14
 8002c32:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8002c36:	eea1 6a83 	vfma.f32	s12, s3, s6
 8002c3a:	ee24 4a84 	vmul.f32	s8, s9, s8
 8002c3e:	eea2 6aa1 	vfma.f32	s12, s5, s3
 8002c42:	eea4 6a02 	vfma.f32	s12, s8, s4
 8002c46:	ed83 6a03 	vstr	s12, [r3, #12]
		A[i][1] = w_a*a_bn[1]*a_r[i] + w_m*m_bn[1]*m_r[i] + w_ga*g_va[1]*a_r[i] + w_gm*g_vm[1]*m_r[i];
 8002c4a:	ed9e 2a01 	vldr	s4, [lr, #4]
 8002c4e:	edd7 1a01 	vldr	s3, [r7, #4]
 8002c52:	edd6 2a01 	vldr	s5, [r6, #4]
 8002c56:	ed95 4a01 	vldr	s8, [r5, #4]
 8002c5a:	ee22 6a27 	vmul.f32	s12, s4, s15
 8002c5e:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8002c62:	eea1 6aa3 	vfma.f32	s12, s3, s7
 8002c66:	ee24 4a84 	vmul.f32	s8, s9, s8
 8002c6a:	eea2 6aa1 	vfma.f32	s12, s5, s3
 8002c6e:	eea4 6a02 	vfma.f32	s12, s8, s4
 8002c72:	ed83 6a04 	vstr	s12, [r3, #16]
		A[i][2] = w_a*a_bn[2]*a_r[i] + w_m*m_bn[2]*m_r[i] + w_ga*g_va[2]*a_r[i] + w_gm*g_vm[2]*m_r[i];
 8002c76:	ed9e 2a01 	vldr	s4, [lr, #4]
 8002c7a:	edd7 1a01 	vldr	s3, [r7, #4]
 8002c7e:	edd6 2a02 	vldr	s5, [r6, #8]
 8002c82:	ed95 4a02 	vldr	s8, [r5, #8]
 8002c86:	ee22 6a25 	vmul.f32	s12, s4, s11
 8002c8a:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8002c8e:	eea1 6a85 	vfma.f32	s12, s3, s10
 8002c92:	ee24 4a84 	vmul.f32	s8, s9, s8
 8002c96:	eea2 6aa1 	vfma.f32	s12, s5, s3
 8002c9a:	eea4 6a02 	vfma.f32	s12, s8, s4
 8002c9e:	ed83 6a05 	vstr	s12, [r3, #20]
		A[i][0] = w_a*a_bn[0]*a_r[i] + w_m*m_bn[0]*m_r[i] + w_ga*g_va[0]*a_r[i] + w_gm*g_vm[0]*m_r[i];
 8002ca2:	ed9e 2a02 	vldr	s4, [lr, #8]
 8002ca6:	edd7 1a02 	vldr	s3, [r7, #8]
 8002caa:	edd6 2a00 	vldr	s5, [r6]
 8002cae:	ed95 4a00 	vldr	s8, [r5]
 8002cb2:	ee22 6a07 	vmul.f32	s12, s4, s14
 8002cb6:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8002cba:	eea1 6a83 	vfma.f32	s12, s3, s6
 8002cbe:	ee24 7a84 	vmul.f32	s14, s9, s8
 8002cc2:	eea1 6aa2 	vfma.f32	s12, s3, s5
 8002cc6:	eea2 6a07 	vfma.f32	s12, s4, s14
 8002cca:	ed83 6a06 	vstr	s12, [r3, #24]
		A[i][1] = w_a*a_bn[1]*a_r[i] + w_m*m_bn[1]*m_r[i] + w_ga*g_va[1]*a_r[i] + w_gm*g_vm[1]*m_r[i];
 8002cce:	ed9e 3a02 	vldr	s6, [lr, #8]
 8002cd2:	edd7 2a02 	vldr	s5, [r7, #8]
 8002cd6:	ed96 4a01 	vldr	s8, [r6, #4]
 8002cda:	ed95 7a01 	vldr	s14, [r5, #4]
 8002cde:	ee23 6a27 	vmul.f32	s12, s6, s15
 8002ce2:	ee26 4a84 	vmul.f32	s8, s13, s8
 8002ce6:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8002cea:	ee64 7a87 	vmul.f32	s15, s9, s14
 8002cee:	eea2 6a84 	vfma.f32	s12, s5, s8
 8002cf2:	eea3 6a27 	vfma.f32	s12, s6, s15
 8002cf6:	ed83 6a07 	vstr	s12, [r3, #28]
		A[i][2] = w_a*a_bn[2]*a_r[i] + w_m*m_bn[2]*m_r[i] + w_ga*g_va[2]*a_r[i] + w_gm*g_vm[2]*m_r[i];
 8002cfa:	ed9e 6a02 	vldr	s12, [lr, #8]
 8002cfe:	ed97 4a02 	vldr	s8, [r7, #8]
 8002d02:	edd6 3a02 	vldr	s7, [r6, #8]
 8002d06:	ed95 7a02 	vldr	s14, [r5, #8]
 8002d0a:	ee66 7a25 	vmul.f32	s15, s12, s11
 8002d0e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8002d12:	eee4 7a05 	vfma.f32	s15, s8, s10
 8002d16:	ee24 7a87 	vmul.f32	s14, s9, s14
 8002d1a:	eee4 7a26 	vfma.f32	s15, s8, s13
 8002d1e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002d22:	edc3 7a08 	vstr	s15, [r3, #32]
	WahbaJacobiSVDRotM(A,RotM);
 8002d26:	f7ff fc8d 	bl	8002644 <WahbaJacobiSVDRotM>
	v[0]=A[0][0]*x[0]+A[1][0]*x[1]+A[2][0]*x[2];
 8002d2a:	9a03      	ldr	r2, [sp, #12]
	v[1]=A[0][1]*x[0]+A[1][1]*x[1]+A[2][1]*x[2];
 8002d2c:	ed94 9a16 	vldr	s18, [r4, #88]	; 0x58
	v[0]=A[0][0]*x[0]+A[1][0]*x[1]+A[2][0]*x[2];
 8002d30:	edd2 7a01 	vldr	s15, [r2, #4]
 8002d34:	edd2 6a00 	vldr	s13, [r2]
	v[1]=A[0][1]*x[0]+A[1][1]*x[1]+A[2][1]*x[2];
 8002d38:	edd4 3a13 	vldr	s7, [r4, #76]	; 0x4c
	v[0]=A[0][0]*x[0]+A[1][0]*x[1]+A[2][0]*x[2];
 8002d3c:	edd4 9a15 	vldr	s19, [r4, #84]	; 0x54
 8002d40:	ed94 4a12 	vldr	s8, [r4, #72]	; 0x48
 8002d44:	ed92 7a02 	vldr	s14, [r2, #8]
	v[1]=A[0][1]*x[0]+A[1][1]*x[1]+A[2][1]*x[2];
 8002d48:	edd4 4a19 	vldr	s9, [r4, #100]	; 0x64
	v[2]=A[0][2]*x[0]+A[1][2]*x[1]+A[2][2]*x[2];
 8002d4c:	edd4 8a17 	vldr	s17, [r4, #92]	; 0x5c
	v[0]=A[0][0]*x[0]+A[1][0]*x[1]+A[2][0]*x[2];
 8002d50:	ed94 5a18 	vldr	s10, [r4, #96]	; 0x60
	v[2]=A[0][2]*x[0]+A[1][2]*x[1]+A[2][2]*x[2];
 8002d54:	edd4 5a14 	vldr	s11, [r4, #80]	; 0x50
 8002d58:	ed94 6a1a 	vldr	s12, [r4, #104]	; 0x68
    if(in >= 0.0f)
 8002d5c:	9a02      	ldr	r2, [sp, #8]
	v[1]=A[0][1]*x[0]+A[1][1]*x[1]+A[2][1]*x[2];
 8002d5e:	ee27 9a89 	vmul.f32	s18, s15, s18
	v[0]=A[0][0]*x[0]+A[1][0]*x[1]+A[2][0]*x[2];
 8002d62:	ee67 9aa9 	vmul.f32	s19, s15, s19
	v[1]=A[0][1]*x[0]+A[1][1]*x[1]+A[2][1]*x[2];
 8002d66:	eea6 9aa3 	vfma.f32	s18, s13, s7
	v[0]=A[0][0]*x[0]+A[1][0]*x[1]+A[2][0]*x[2];
 8002d6a:	eee4 9a26 	vfma.f32	s19, s8, s13
	v[1]=A[0][1]*x[0]+A[1][1]*x[1]+A[2][1]*x[2];
 8002d6e:	eea7 9a24 	vfma.f32	s18, s14, s9
	v[2]=A[0][2]*x[0]+A[1][2]*x[1]+A[2][2]*x[2];
 8002d72:	ee67 8aa8 	vmul.f32	s17, s15, s17
	v[0]=A[0][0]*x[0]+A[1][0]*x[1]+A[2][0]*x[2];
 8002d76:	eee5 9a07 	vfma.f32	s19, s10, s14
	v[2]=A[0][2]*x[0]+A[1][2]*x[1]+A[2][2]*x[2];
 8002d7a:	eee6 8aa5 	vfma.f32	s17, s13, s11
	return sqrtv(V[0]*V[0]+V[1]*V[1]+V[2]*V[2]);
 8002d7e:	ee29 0a09 	vmul.f32	s0, s18, s18
	v[2]=A[0][2]*x[0]+A[1][2]*x[1]+A[2][2]*x[2];
 8002d82:	eee7 8a06 	vfma.f32	s17, s14, s12
	return sqrtv(V[0]*V[0]+V[1]*V[1]+V[2]*V[2]);
 8002d86:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8002d8a:	eea8 0aa8 	vfma.f32	s0, s17, s17
 8002d8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	f2c0 80f3 	blt.w	8002f80 <wahba_rot+0x578>

	// Propagate estimated R with current gyroscope reading
	dRpropagat(Rbe,RotM,gyr,dt);
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <wahba_rot+0x3f8>)
 8002d9c:	9202      	str	r2, [sp, #8]
 8002d9e:	edd3 aa00 	vldr	s21, [r3]
      *pOut = sqrtf(in);
 8002da2:	f003 fc4b 	bl	800663c <sqrtf>
	real dR[3][3];

	mulMatrTrVec(w,R,wb); // w body to earth;

	norm =normV(w);
	if (norm<1e-6){
 8002da6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002e38 <wahba_rot+0x430>
 8002daa:	9a02      	ldr	r2, [sp, #8]
 8002dac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	f100 80e4 	bmi.w	8002f80 <wahba_rot+0x578>
		dR[0][0]=1;
		dR[1][1]=1;
		dR[2][2]=1;
	}
	else{
		w[0] = w[0]/norm;
 8002db8:	ee89 aa80 	vdiv.f32	s20, s19, s0
 8002dbc:	9202      	str	r2, [sp, #8]
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002dbe:	4d19      	ldr	r5, [pc, #100]	; (8002e24 <wahba_rot+0x41c>)
		w[1] = w[1]/norm;
 8002dc0:	eec9 9a00 	vdiv.f32	s19, s18, s0
		w[2] = w[2]/norm;
 8002dc4:	ee88 9a80 	vdiv.f32	s18, s17, s0

		th = norm*dt;
 8002dc8:	ee6a 8a80 	vmul.f32	s17, s21, s0
		c = cosv(th);
 8002dcc:	eeb0 0a68 	vmov.f32	s0, s17
 8002dd0:	f003 fae0 	bl	8006394 <cosf>
 8002dd4:	eef0 aa40 	vmov.f32	s21, s0
		s = sinv(th);
 8002dd8:	eeb0 0a68 	vmov.f32	s0, s17
 8002ddc:	f003 fb2a 	bl	8006434 <sinf>
		u = 1 - c;

		dR[0][0] = w[0]*w[0]*u + c;
		dR[0][1] = w[0]*w[1]*u - w[2]*s;
 8002de0:	ee69 3a00 	vmul.f32	s7, s18, s0
		u = 1 - c;
 8002de4:	ee38 8a6a 	vsub.f32	s16, s16, s21
		dR[0][1] = w[0]*w[1]*u - w[2]*s;
 8002de8:	ee2a 7a29 	vmul.f32	s14, s20, s19
		dR[0][0] = w[0]*w[0]*u + c;
 8002dec:	ee2a 5a0a 	vmul.f32	s10, s20, s20
		dR[0][1] = w[0]*w[1]*u - w[2]*s;
 8002df0:	eef0 5a63 	vmov.f32	s11, s7
		dR[0][0] = w[0]*w[0]*u + c;
 8002df4:	eef0 2a6a 	vmov.f32	s5, s21
		dR[0][1] = w[0]*w[1]*u - w[2]*s;
 8002df8:	eed8 5a07 	vfnms.f32	s11, s16, s14
 8002dfc:	9a02      	ldr	r2, [sp, #8]
 8002dfe:	e01d      	b.n	8002e3c <wahba_rot+0x434>
 8002e00:	20000b80 	.word	0x20000b80
 8002e04:	20000b84 	.word	0x20000b84
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	20000b3c 	.word	0x20000b3c
 8002e10:	20000b40 	.word	0x20000b40
 8002e14:	20000b78 	.word	0x20000b78
 8002e18:	20000b9c 	.word	0x20000b9c
 8002e1c:	20000b8c 	.word	0x20000b8c
 8002e20:	20000b18 	.word	0x20000b18
 8002e24:	20000b44 	.word	0x20000b44
 8002e28:	20000b74 	.word	0x20000b74
 8002e2c:	20000b98 	.word	0x20000b98
 8002e30:	20000b88 	.word	0x20000b88
 8002e34:	20000b68 	.word	0x20000b68
 8002e38:	358637bd 	.word	0x358637bd
		dR[0][0] = w[0]*w[0]*u + c;
 8002e3c:	eee8 2a05 	vfma.f32	s5, s16, s10
		dR[0][2] = w[0]*w[2]*u + w[1]*s;
		dR[1][0] = w[1]*w[0]*u + w[2]*s;
 8002e40:	eee8 3a07 	vfma.f32	s7, s16, s14
 8002e44:	ed94 6a13 	vldr	s12, [r4, #76]	; 0x4c
 8002e48:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 8002e4c:	ed94 ba19 	vldr	s22, [r4, #100]	; 0x64
 8002e50:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 8002e54:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8002e58:	ed94 3a14 	vldr	s6, [r4, #80]	; 0x50
 8002e5c:	ed94 2a17 	vldr	s4, [r4, #92]	; 0x5c
		dR[1][1] = w[1]*w[1]*u + c;
		dR[1][2] = w[1]*w[2]*u - w[0]*s;
 8002e60:	ee2a 4a00 	vmul.f32	s8, s20, s0
		dR[1][1] = w[1]*w[1]*u + c;
 8002e64:	ee69 7aa9 	vmul.f32	s15, s19, s19
		dR[1][2] = w[1]*w[2]*u - w[0]*s;
 8002e68:	ee69 4a89 	vmul.f32	s9, s19, s18
		dR[0][0] = w[0]*w[0]*u + c;
 8002e6c:	eeb0 5a62 	vmov.f32	s10, s5
		dR[0][2] = w[0]*w[2]*u + w[1]*s;
 8002e70:	ee69 9a80 	vmul.f32	s19, s19, s0
 8002e74:	ee65 2a86 	vmul.f32	s5, s11, s12
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002e78:	ee65 0a87 	vmul.f32	s1, s11, s14
 8002e7c:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
		dR[1][1] = w[1]*w[1]*u + c;
 8002e80:	eef0 6a6a 	vmov.f32	s13, s21
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002e84:	ee65 5a8b 	vmul.f32	s11, s11, s22
 8002e88:	eee8 6a27 	vfma.f32	s13, s16, s15
		dR[2][0] = w[2]*w[0]*u - w[1]*s;
		dR[2][1] = w[2]*w[1]*u + w[0]*s;
 8002e8c:	eef0 7a44 	vmov.f32	s15, s8
 8002e90:	eee8 7a24 	vfma.f32	s15, s16, s9
		dR[0][2] = w[0]*w[2]*u + w[1]*s;
 8002e94:	ee2a aa09 	vmul.f32	s20, s20, s18
 8002e98:	eee5 5a00 	vfma.f32	s11, s10, s0
		dR[2][0] = w[2]*w[0]*u - w[1]*s;
 8002e9c:	eef0 1a69 	vmov.f32	s3, s19
 8002ea0:	eed8 1a0a 	vfnms.f32	s3, s16, s20
		dR[1][2] = w[1]*w[2]*u - w[0]*s;
 8002ea4:	ee98 4a24 	vfnms.f32	s8, s16, s9
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002ea8:	eee5 2a28 	vfma.f32	s5, s10, s17
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002eac:	eee5 0a01 	vfma.f32	s1, s10, s2
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002eb0:	eef0 4a65 	vmov.f32	s9, s11
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002eb4:	ee26 5a86 	vmul.f32	s10, s13, s12
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002eb8:	ee66 5a87 	vmul.f32	s11, s13, s14
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002ebc:	ee27 6a86 	vmul.f32	s12, s15, s12
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
		dR[2][2] = w[2]*w[2]*u + c;
 8002ec4:	ee29 9a09 	vmul.f32	s18, s18, s18
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002ec8:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8002ecc:	ee67 7a8b 	vmul.f32	s15, s15, s22
		dR[0][2] = w[0]*w[2]*u + w[1]*s;
 8002ed0:	eee8 9a0a 	vfma.f32	s19, s16, s20
		dR[2][2] = w[2]*w[2]*u + c;
 8002ed4:	eee8 aa09 	vfma.f32	s21, s16, s18
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002ed8:	eea3 5aa8 	vfma.f32	s10, s7, s17
 8002edc:	eea1 6aa8 	vfma.f32	s12, s3, s17
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002ee0:	eee3 5a81 	vfma.f32	s11, s7, s2
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002ee4:	eee3 6a80 	vfma.f32	s13, s7, s0
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002ee8:	eea1 7a81 	vfma.f32	s14, s3, s2
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002eec:	eee1 7a80 	vfma.f32	s15, s3, s0
 8002ef0:	edd4 1a1a 	vldr	s3, [r4, #104]	; 0x68
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002ef4:	eef0 3a60 	vmov.f32	s7, s1
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002ef8:	eee9 2a83 	vfma.f32	s5, s19, s6
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002efc:	eee9 3a82 	vfma.f32	s7, s19, s4
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002f00:	eee9 4aa1 	vfma.f32	s9, s19, s3
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002f04:	eea4 5a03 	vfma.f32	s10, s8, s6
 8002f08:	eeaa 6a83 	vfma.f32	s12, s21, s6
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002f0c:	eee4 5a02 	vfma.f32	s11, s8, s4
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002f10:	eee4 6a21 	vfma.f32	s13, s8, s3
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002f14:	eeaa 7a82 	vfma.f32	s14, s21, s4
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002f18:	eeea 7aa1 	vfma.f32	s15, s21, s3
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002f1c:	edc5 2a00 	vstr	s5, [r5]
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002f20:	edc5 3a03 	vstr	s7, [r5, #12]
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002f24:	edc5 4a06 	vstr	s9, [r5, #24]
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8002f28:	ed85 5a01 	vstr	s10, [r5, #4]
 8002f2c:	ed85 6a02 	vstr	s12, [r5, #8]
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002f30:	edc5 5a04 	vstr	s11, [r5, #16]
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002f34:	edc5 6a07 	vstr	s13, [r5, #28]
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8002f38:	ed85 7a05 	vstr	s14, [r5, #20]
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8002f3c:	edc5 7a08 	vstr	s15, [r5, #32]
 8002f40:	e01f      	b.n	8002f82 <wahba_rot+0x57a>
	if(An < TOL)
 8002f42:	ed5f 7a43 	vldr	s15, [pc, #-268]	; 8002e38 <wahba_rot+0x430>
	Mn = normV(mag);
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <wahba_rot+0x56c>)
	accok = 1;
 8002f48:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <wahba_rot+0x570>)
	Mn = normV(mag);
 8002f4a:	ed83 0a00 	vstr	s0, [r3]
	if(An < TOL)
 8002f4e:	eef4 2ae7 	vcmpe.f32	s5, s15
	accok = 1;
 8002f52:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	if(An < TOL)
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	accok = 1;
 8002f5a:	ed82 6a00 	vstr	s12, [r2]
	if(An < TOL)
 8002f5e:	f140 81da 	bpl.w	8003316 <wahba_rot+0x90e>
		accok = 0;
 8002f62:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8002f7c <wahba_rot+0x574>
		An = 1;
 8002f66:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
		accok = 0;
 8002f6a:	ed82 6a00 	vstr	s12, [r2]
		An = 1;
 8002f6e:	edc5 2a00 	vstr	s5, [r5]
 8002f72:	e5b7      	b.n	8002ae4 <wahba_rot+0xdc>
 8002f74:	20000b40 	.word	0x20000b40
 8002f78:	20000b78 	.word	0x20000b78
 8002f7c:	00000000 	.word	0x00000000
 8002f80:	4ded      	ldr	r5, [pc, #948]	; (8003338 <wahba_rot+0x930>)

	// Update reference magnetometer vector, if properly calibrated and correct initial is given it should not be used
	if(magok && (cnt<100)){
 8002f82:	9b01      	ldr	r3, [sp, #4]
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	d004      	beq.n	8002f9c <wahba_rot+0x594>
 8002f92:	4eea      	ldr	r6, [pc, #936]	; (800333c <wahba_rot+0x934>)
 8002f94:	6831      	ldr	r1, [r6, #0]
 8002f96:	2963      	cmp	r1, #99	; 0x63
 8002f98:	f340 8325 	ble.w	80035e6 <wahba_rot+0xbde>
 8002f9c:	f8d8 3000 	ldr.w	r3, [r8]
		m_r[1]=0;
		cnt++;
	}

	// Virtual vectors calculations
	mulMatrVec(g_va,Rbe,a_r);
 8002fa0:	f8da 2000 	ldr.w	r2, [sl]
	v[0]=A[0][0]*x[0]+A[0][1]*x[1]+A[0][2]*x[2];
 8002fa4:	edd5 7a01 	vldr	s15, [r5, #4]
 8002fa8:	edd2 4a01 	vldr	s9, [r2, #4]
 8002fac:	edd2 5a00 	vldr	s11, [r2]
 8002fb0:	ed95 5a00 	vldr	s10, [r5]
 8002fb4:	edd2 6a02 	vldr	s13, [r2, #8]
 8002fb8:	ed95 6a02 	vldr	s12, [r5, #8]
 8002fbc:	49e0      	ldr	r1, [pc, #896]	; (8003340 <wahba_rot+0x938>)
	if (test > +tol)
 8002fbe:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8003344 <wahba_rot+0x93c>
 8002fc2:	6808      	ldr	r0, [r1, #0]
	mulMatrVec(g_vm,Rbe,m_r);
 8002fc4:	f8d9 1000 	ldr.w	r1, [r9]
 8002fc8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002fcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002fd0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002fd4:	edc0 7a00 	vstr	s15, [r0]
	v[1]=A[1][0]*x[0]+A[1][1]*x[1]+A[1][2]*x[2];
 8002fd8:	edd2 4a01 	vldr	s9, [r2, #4]
 8002fdc:	edd5 7a04 	vldr	s15, [r5, #16]
 8002fe0:	ed95 5a03 	vldr	s10, [r5, #12]
 8002fe4:	edd2 5a00 	vldr	s11, [r2]
 8002fe8:	ed95 6a05 	vldr	s12, [r5, #20]
 8002fec:	edd2 6a02 	vldr	s13, [r2, #8]
 8002ff0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002ff4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002ff8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002ffc:	edc0 7a01 	vstr	s15, [r0, #4]
	v[2]=A[2][0]*x[0]+A[2][1]*x[1]+A[2][2]*x[2];
 8003000:	edd2 4a01 	vldr	s9, [r2, #4]
 8003004:	edd5 7a07 	vldr	s15, [r5, #28]
 8003008:	ed95 5a06 	vldr	s10, [r5, #24]
 800300c:	edd2 5a00 	vldr	s11, [r2]
 8003010:	ed95 6a08 	vldr	s12, [r5, #32]
 8003014:	edd2 6a02 	vldr	s13, [r2, #8]
 8003018:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800301c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003020:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003024:	edc0 7a02 	vstr	s15, [r0, #8]
	v[0]=A[0][0]*x[0]+A[0][1]*x[1]+A[0][2]*x[2];
 8003028:	edd5 7a01 	vldr	s15, [r5, #4]
 800302c:	edd3 4a01 	vldr	s9, [r3, #4]
 8003030:	ed95 5a00 	vldr	s10, [r5]
 8003034:	edd3 5a00 	vldr	s11, [r3]
 8003038:	ed95 6a02 	vldr	s12, [r5, #8]
 800303c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003040:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003044:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003048:	eee6 7a26 	vfma.f32	s15, s12, s13
 800304c:	edc1 7a00 	vstr	s15, [r1]
	v[1]=A[1][0]*x[0]+A[1][1]*x[1]+A[1][2]*x[2];
 8003050:	edd5 7a04 	vldr	s15, [r5, #16]
 8003054:	edd3 4a01 	vldr	s9, [r3, #4]
 8003058:	ed95 5a03 	vldr	s10, [r5, #12]
 800305c:	edd3 5a00 	vldr	s11, [r3]
 8003060:	ed95 6a05 	vldr	s12, [r5, #20]
 8003064:	edd3 6a02 	vldr	s13, [r3, #8]
 8003068:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800306c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003070:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003074:	edc1 7a01 	vstr	s15, [r1, #4]
	v[2]=A[2][0]*x[0]+A[2][1]*x[1]+A[2][2]*x[2];
 8003078:	edd5 7a07 	vldr	s15, [r5, #28]
 800307c:	edd3 4a01 	vldr	s9, [r3, #4]
 8003080:	ed95 5a06 	vldr	s10, [r5, #24]
 8003084:	edd3 5a00 	vldr	s11, [r3]
 8003088:	ed95 6a08 	vldr	s12, [r5, #32]
 800308c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003090:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003094:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003098:	eee6 7a26 	vfma.f32	s15, s12, s13
 800309c:	edc1 7a02 	vstr	s15, [r1, #8]
	const real test = -rotmtx[2];
 80030a0:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
	if (test > +tol)
 80030a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ac:	f100 823a 	bmi.w	8003524 <wahba_rot+0xb1c>
	else if (test < -tol)
 80030b0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8003348 <wahba_rot+0x940>
 80030b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	f300 8150 	bgt.w	8003360 <wahba_rot+0x958>
		euler[0] = atan2v (rotmtx[5], rotmtx[8]);
 80030c0:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
 80030c4:	ed94 0a17 	vldr	s0, [r4, #92]	; 0x5c
 80030c8:	f003 fab6 	bl	8006638 <atan2f>
		euler[1] = asinv (-rotmtx[2]); //3-4us!!
 80030cc:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
		euler[0] = atan2v (rotmtx[5], rotmtx[8]);
 80030d0:	ed84 0a31 	vstr	s0, [r4, #196]	; 0xc4
		euler[1] = asinv (-rotmtx[2]); //3-4us!!
 80030d4:	eeb1 0a67 	vneg.f32	s0, s15
 80030d8:	f003 fa52 	bl	8006580 <asinf>
		euler[2] = atan2v (rotmtx[1], rotmtx[0]);
 80030dc:	edd4 0a12 	vldr	s1, [r4, #72]	; 0x48
		euler[1] = asinv (-rotmtx[2]); //3-4us!!
 80030e0:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
		euler[2] = atan2v (rotmtx[1], rotmtx[0]);
 80030e4:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 80030e8:	f003 faa6 	bl	8006638 <atan2f>
 80030ec:	ed84 0a33 	vstr	s0, [r4, #204]	; 0xcc
	real sqtrp1x2;
	real d[3];
	real sqdip1;


	const real tr = rotmtx[0] + rotmtx[4] + rotmtx[8];
 80030f0:	edd4 4a12 	vldr	s9, [r4, #72]	; 0x48
 80030f4:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80030f8:	edd4 2a1a 	vldr	s5, [r4, #104]	; 0x68
	if (tr>1e-6f)
 80030fc:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800334c <wahba_rot+0x944>
	const real tr = rotmtx[0] + rotmtx[4] + rotmtx[8];
 8003100:	ee34 0aa7 	vadd.f32	s0, s9, s15
	q->z = 0.0f;
 8003104:	2300      	movs	r3, #0
	const real tr = rotmtx[0] + rotmtx[4] + rotmtx[8];
 8003106:	ee30 0a22 	vadd.f32	s0, s0, s5
	q->z = 0.0f;
 800310a:	6423      	str	r3, [r4, #64]	; 0x40
	if (tr>1e-6f)
 800310c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003114:	f340 8135 	ble.w	8003382 <wahba_rot+0x97a>
	{
		sqtrp1 = sqrtv(tr + 1.0f);
 8003118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800311c:	ee30 0a07 	vadd.f32	s0, s0, s14
    if(in >= 0.0f)
 8003120:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003128:	f2c0 82b0 	blt.w	800368c <wahba_rot+0xc84>
      *pOut = sqrtf(in);
 800312c:	f003 fa86 	bl	800663c <sqrtf>
 8003130:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003134:	ee30 6a00 	vadd.f32	s12, s0, s0
 8003138:	edd4 4a12 	vldr	s9, [r4, #72]	; 0x48
 800313c:	edd4 2a1a 	vldr	s5, [r4, #104]	; 0x68
 8003140:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003144:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
		sqtrp1x2 = 2.0*sqtrp1;

		q->w = 0.5f*sqtrp1;
		q->x = (rotmtx[7] - rotmtx[5])/sqtrp1x2;
 8003148:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 800314c:	ed94 2a17 	vldr	s4, [r4, #92]	; 0x5c
		q->y = (rotmtx[2] - rotmtx[6])/sqtrp1x2;
 8003150:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 8003154:	ed94 9a18 	vldr	s18, [r4, #96]	; 0x60
		q->z = (rotmtx[3] - rotmtx[1])/sqtrp1x2;
 8003158:	ed94 8a15 	vldr	s16, [r4, #84]	; 0x54
 800315c:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
		q->x = (rotmtx[7] - rotmtx[5])/sqtrp1x2;
 8003160:	ee36 4ac2 	vsub.f32	s8, s13, s4
		q->y = (rotmtx[2] - rotmtx[6])/sqtrp1x2;
 8003164:	ee31 5a49 	vsub.f32	s10, s2, s18
		q->x = (rotmtx[7] - rotmtx[5])/sqtrp1x2;
 8003168:	eec4 3a06 	vdiv.f32	s7, s8, s12
		q->z = (rotmtx[3] - rotmtx[1])/sqtrp1x2;
 800316c:	ee78 5a47 	vsub.f32	s11, s16, s14
		q->y = (rotmtx[2] - rotmtx[6])/sqtrp1x2;
 8003170:	ee85 4a06 	vdiv.f32	s8, s10, s12
		q->z = (rotmtx[3] - rotmtx[1])/sqtrp1x2;
 8003174:	ee85 5a86 	vdiv.f32	s10, s11, s12
		q->x = (rotmtx[7] - rotmtx[5])/sqtrp1x2;
 8003178:	ee13 2a90 	vmov	r2, s7
		q->y = (rotmtx[2] - rotmtx[6])/sqtrp1x2;
 800317c:	ee14 3a10 	vmov	r3, s8
		q->x = (rotmtx[7] - rotmtx[5])/sqtrp1x2;
 8003180:	63a2      	str	r2, [r4, #56]	; 0x38
		q->y = (rotmtx[2] - rotmtx[6])/sqtrp1x2;
 8003182:	63e3      	str	r3, [r4, #60]	; 0x3c
		q->z = (rotmtx[3] - rotmtx[1])/sqtrp1x2;
 8003184:	ee15 2a10 	vmov	r2, s10
		q->w = 0.5f*sqtrp1;
 8003188:	ee10 3a10 	vmov	r3, s0
		q->z = (rotmtx[3] - rotmtx[1])/sqtrp1x2;
 800318c:	6422      	str	r2, [r4, #64]	; 0x40
		q->w = 0.5f*sqtrp1;
 800318e:	6463      	str	r3, [r4, #68]	; 0x44
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8003190:	edd4 5a1c 	vldr	s11, [r4, #112]	; 0x70
 8003194:	ed94 6a1f 	vldr	s12, [r4, #124]	; 0x7c
 8003198:	ed94 0a1b 	vldr	s0, [r4, #108]	; 0x6c
 800319c:	ed94 aa1e 	vldr	s20, [r4, #120]	; 0x78
 80031a0:	edd4 aa22 	vldr	s21, [r4, #136]	; 0x88
 80031a4:	edd4 9a21 	vldr	s19, [r4, #132]	; 0x84
 80031a8:	edd4 8a1d 	vldr	s17, [r4, #116]	; 0x74
 80031ac:	edd4 0a20 	vldr	s1, [r4, #128]	; 0x80
 80031b0:	edd4 1a23 	vldr	s3, [r4, #140]	; 0x8c
 80031b4:	ee25 3a87 	vmul.f32	s6, s11, s14
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80031b8:	ee67 3a86 	vmul.f32	s7, s15, s12
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 80031bc:	eea0 3a24 	vfma.f32	s6, s0, s9
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80031c0:	ee26 4aaa 	vmul.f32	s8, s13, s21
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80031c4:	eeea 3a08 	vfma.f32	s7, s20, s16
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80031c8:	eea9 4a89 	vfma.f32	s8, s19, s18
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 80031cc:	eea8 3a81 	vfma.f32	s6, s17, s2
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80031d0:	eee0 3a82 	vfma.f32	s7, s1, s4
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80031d4:	eea1 4aa2 	vfma.f32	s8, s3, s5
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80031d8:	ee25 5aa7 	vmul.f32	s10, s11, s15
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80031dc:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80031e0:	ee66 6a86 	vmul.f32	s13, s13, s12
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80031e4:	eea0 5a08 	vfma.f32	s10, s0, s16
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 80031e8:	ee27 6a06 	vmul.f32	s12, s14, s12
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80031ec:	eee0 5a09 	vfma.f32	s11, s0, s18
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 80031f0:	ee27 7a2a 	vmul.f32	s14, s14, s21
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 80031f4:	ee67 7aaa 	vmul.f32	s15, s15, s21
	static real tr;

	mulMatrMatrTr(WStruct->dR,RotM,WStruct->RotM_prev);


	tr =  ((WStruct->dR[0][0] + WStruct->dR[1][1] + WStruct->dR[2][2]) - 1.0)/2.0 ;
 80031f8:	ee33 0a23 	vadd.f32	s0, s6, s7
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 80031fc:	eeea 6a09 	vfma.f32	s13, s20, s18
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8003200:	eeaa 6a24 	vfma.f32	s12, s20, s9
 8003204:	eea9 7aa4 	vfma.f32	s14, s19, s9
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8003208:	eee9 7a88 	vfma.f32	s15, s19, s16
 800320c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8003210:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8003214:	ee30 0a64 	vsub.f32	s0, s0, s9
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8003218:	eee8 5aa2 	vfma.f32	s11, s17, s5
 800321c:	eee0 6aa2 	vfma.f32	s13, s1, s5
 8003220:	eef6 2a00 	vmov.f32	s5, #96	; 0x3f000000  0.5
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8003224:	eea8 5a82 	vfma.f32	s10, s17, s4
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8003228:	eea0 6a81 	vfma.f32	s12, s1, s2
 800322c:	eea1 7a81 	vfma.f32	s14, s3, s2
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8003230:	eee1 7a82 	vfma.f32	s15, s3, s4
 8003234:	ee20 0a22 	vmul.f32	s0, s0, s5
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8003238:	ed84 3a24 	vstr	s6, [r4, #144]	; 0x90
	tr = SATUR(tr,1);
 800323c:	eeb4 0ae4 	vcmpe.f32	s0, s9
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8003244:	edc4 3a28 	vstr	s7, [r4, #160]	; 0xa0
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8003248:	ed84 4a2c 	vstr	s8, [r4, #176]	; 0xb0
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 800324c:	ed84 5a27 	vstr	s10, [r4, #156]	; 0x9c
		A[2][i]=B[2][0]*C[i][0]+B[2][1]*C[i][1]+B[2][2]*C[i][2];
 8003250:	edc4 5a2a 	vstr	s11, [r4, #168]	; 0xa8
 8003254:	edc4 6a2b 	vstr	s13, [r4, #172]	; 0xac
		A[0][i]=B[0][0]*C[i][0]+B[0][1]*C[i][1]+B[0][2]*C[i][2];
 8003258:	ed84 6a25 	vstr	s12, [r4, #148]	; 0x94
 800325c:	ed84 7a26 	vstr	s14, [r4, #152]	; 0x98
		A[1][i]=B[1][0]*C[i][0]+B[1][1]*C[i][1]+B[1][2]*C[i][2];
 8003260:	edc4 7a29 	vstr	s15, [r4, #164]	; 0xa4
 8003264:	f340 8154 	ble.w	8003510 <wahba_rot+0xb08>
 8003268:	eeb0 0a64 	vmov.f32	s0, s9
	tmp = acosv(tr);
 800326c:	f003 f92c 	bl	80064c8 <acosf>
 8003270:	4d37      	ldr	r5, [pc, #220]	; (8003350 <wahba_rot+0x948>)
	WStruct->dth = tmp;
 8003272:	ed84 0a2d 	vstr	s0, [r4, #180]	; 0xb4
	tmp = acosv(tr);
 8003276:	ed85 0a00 	vstr	s0, [r5]
	if (fabsv(tmp) < TOL){
 800327a:	f003 f8d3 	bl	8006424 <fabsf>
 800327e:	eddf 7a33 	vldr	s15, [pc, #204]	; 800334c <wahba_rot+0x944>
		tmp = 0.5/dt;  // x/sin(x)|x->0 ->1
 8003282:	4b34      	ldr	r3, [pc, #208]	; (8003354 <wahba_rot+0x94c>)
	if (fabsv(tmp) < TOL){
 8003284:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	f140 812d 	bpl.w	80034ea <wahba_rot+0xae2>
		tmp = 0.5/dt;  // x/sin(x)|x->0 ->1
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003298:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800329c:	ed85 0a00 	vstr	s0, [r5]
	}
	else{
		tmp = 0.5/dt*tmp/sinv(tmp);
	}
	We[0] = -tmp*(WStruct->dR[2][1] - WStruct->dR[1][2]);
	We[1] = -tmp*(WStruct->dR[0][2] - WStruct->dR[2][0]);
 80032a0:	edd4 6a26 	vldr	s13, [r4, #152]	; 0x98
 80032a4:	ed94 5a2a 	vldr	s10, [r4, #168]	; 0xa8
	We[2] = -tmp*(WStruct->dR[1][0] - WStruct->dR[0][1]);
 80032a8:	ed94 7a27 	vldr	s14, [r4, #156]	; 0x9c
 80032ac:	edd4 5a25 	vldr	s11, [r4, #148]	; 0x94
	We[0] = -tmp*(WStruct->dR[2][1] - WStruct->dR[1][2]);
 80032b0:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
 80032b4:	ed94 6a29 	vldr	s12, [r4, #164]	; 0xa4
	//mulMatrVec(WStruct->W,Rbe,We);



	for(int i = 0;i < 3; i++){
		WStruct->RotM_prev[0][i] = RotM[0][i];
 80032b8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
		WStruct->RotM_prev[1][i] = RotM[1][i];
 80032ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
		WStruct->RotM_prev[2][i] = RotM[2][i];
 80032bc:	6e27      	ldr	r7, [r4, #96]	; 0x60
		WStruct->RotM_prev[0][i] = RotM[0][i];
 80032be:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
		WStruct->RotM_prev[1][i] = RotM[1][i];
 80032c0:	6da5      	ldr	r5, [r4, #88]	; 0x58
		WStruct->RotM_prev[2][i] = RotM[2][i];
 80032c2:	6e60      	ldr	r0, [r4, #100]	; 0x64
		WStruct->RotM_prev[0][i] = RotM[0][i];
 80032c4:	66e2      	str	r2, [r4, #108]	; 0x6c
	We[1] = -tmp*(WStruct->dR[0][2] - WStruct->dR[2][0]);
 80032c6:	ee76 6ac5 	vsub.f32	s13, s13, s10
	We[2] = -tmp*(WStruct->dR[1][0] - WStruct->dR[0][1]);
 80032ca:	ee37 7a65 	vsub.f32	s14, s14, s11
	We[0] = -tmp*(WStruct->dR[2][1] - WStruct->dR[1][2]);
 80032ce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80032d2:	eeb1 0a40 	vneg.f32	s0, s0
	We[1] = -tmp*(WStruct->dR[0][2] - WStruct->dR[2][0]);
 80032d6:	ee66 6a80 	vmul.f32	s13, s13, s0
	We[2] = -tmp*(WStruct->dR[1][0] - WStruct->dR[0][1]);
 80032da:	ee27 7a00 	vmul.f32	s14, s14, s0
		WStruct->RotM_prev[0][i] = RotM[0][i];
 80032de:	6d21      	ldr	r1, [r4, #80]	; 0x50
		WStruct->RotM_prev[1][i] = RotM[1][i];
 80032e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032e2:	67a3      	str	r3, [r4, #120]	; 0x78
	We[0] = -tmp*(WStruct->dR[2][1] - WStruct->dR[1][2]);
 80032e4:	ee27 0a80 	vmul.f32	s0, s15, s0
		WStruct->RotM_prev[2][i] = RotM[2][i];
 80032e8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	WStruct->W[1] = We[1];
 80032ea:	edc4 6a2f 	vstr	s13, [r4, #188]	; 0xbc
	WStruct->W[2] = We[2];
 80032ee:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
	WStruct->W[0] = We[0];
 80032f2:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
		WStruct->RotM_prev[2][i] = RotM[2][i];
 80032f6:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		WStruct->RotM_prev[0][i] = RotM[0][i];
 80032fa:	6726      	str	r6, [r4, #112]	; 0x70
		WStruct->RotM_prev[1][i] = RotM[1][i];
 80032fc:	67e5      	str	r5, [r4, #124]	; 0x7c
		WStruct->RotM_prev[2][i] = RotM[2][i];
 80032fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
		WStruct->RotM_prev[0][i] = RotM[0][i];
 8003302:	6761      	str	r1, [r4, #116]	; 0x74
		WStruct->RotM_prev[1][i] = RotM[1][i];
 8003304:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		WStruct->RotM_prev[2][i] = RotM[2][i];
 8003308:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
}
 800330c:	b005      	add	sp, #20
 800330e:	ecbd 8b08 	vpop	{d8-d11}
 8003312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003316:	4a10      	ldr	r2, [pc, #64]	; (8003358 <wahba_rot+0x950>)
 8003318:	9201      	str	r2, [sp, #4]
		magok = 0;
 800331a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800335c <wahba_rot+0x954>
		Mn = 1;
 800331e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		magok = 0;
 8003322:	eef0 5a47 	vmov.f32	s11, s14
 8003326:	eeb0 5a67 	vmov.f32	s10, s15
 800332a:	ed82 7a00 	vstr	s14, [r2]
		Mn = 1;
 800332e:	edc3 7a00 	vstr	s15, [r3]
 8003332:	f7ff bbe7 	b.w	8002b04 <wahba_rot+0xfc>
 8003336:	bf00      	nop
 8003338:	20000b44 	.word	0x20000b44
 800333c:	20000b7c 	.word	0x20000b7c
 8003340:	20000b84 	.word	0x20000b84
 8003344:	bf7fff58 	.word	0xbf7fff58
 8003348:	3f7fff58 	.word	0x3f7fff58
 800334c:	358637bd 	.word	0x358637bd
 8003350:	20000ba0 	.word	0x20000ba0
 8003354:	20000b80 	.word	0x20000b80
 8003358:	20000b9c 	.word	0x20000b9c
 800335c:	00000000 	.word	0x00000000
		euler[0] = atan2v(-rotmtx[7], rotmtx[4]);
 8003360:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 8003364:	edd4 0a16 	vldr	s1, [r4, #88]	; 0x58
 8003368:	eeb1 0a40 	vneg.f32	s0, s0
 800336c:	f003 f964 	bl	8006638 <atan2f>
		euler[1] = -0.5f * M_PI;
 8003370:	4ad2      	ldr	r2, [pc, #840]	; (80036bc <wahba_rot+0xcb4>)
		euler[0] = atan2v(-rotmtx[7], rotmtx[4]);
 8003372:	ed84 0a31 	vstr	s0, [r4, #196]	; 0xc4
		euler[2] = 0.0f;
 8003376:	2300      	movs	r3, #0
		euler[1] = -0.5f * M_PI;
 8003378:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
		euler[2] = 0.0f;
 800337c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8003380:	e6b6      	b.n	80030f0 <wahba_rot+0x6e8>
	{
		d[0]=rotmtx[0];
		d[1]=rotmtx[4];
		d[2]=rotmtx[8];

		if ((d[1] > d[0]) && (d[1] > d[2]))
 8003382:	eef4 4ae7 	vcmpe.f32	s9, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d554      	bpl.n	8003436 <wahba_rot+0xa2e>
 800338c:	eef4 7ae2 	vcmpe.f32	s15, s5
 8003390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003394:	dd4f      	ble.n	8003436 <wahba_rot+0xa2e>
		{
			sqdip1 = sqrtv(d[1] - d[0] - d[2] + 1.0f );
 8003396:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800339a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800339e:	ee77 2ae2 	vsub.f32	s5, s15, s5
 80033a2:	ee32 0a80 	vadd.f32	s0, s5, s0
    if(in >= 0.0f)
 80033a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	f2c0 8180 	blt.w	80036b2 <wahba_rot+0xcaa>
      *pOut = sqrtf(in);
 80033b2:	f003 f943 	bl	800663c <sqrtf>
 80033b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80033ba:	ee60 7a27 	vmul.f32	s15, s0, s15
 80033be:	eef0 8a40 	vmov.f32	s17, s0
			q->y = 0.5f*sqdip1;
 80033c2:	ee17 3a90 	vmov	r3, s15

			if ( fabsv(sqdip1) > 1e-6f)
 80033c6:	eeb0 0a68 	vmov.f32	s0, s17
			q->y = 0.5f*sqdip1;
 80033ca:	63e3      	str	r3, [r4, #60]	; 0x3c
			if ( fabsv(sqdip1) > 1e-6f)
 80033cc:	f003 f82a 	bl	8006424 <fabsf>
 80033d0:	eddf 7abb 	vldr	s15, [pc, #748]	; 80036c0 <wahba_rot+0xcb8>
				sqdip1 = 0.5f/sqdip1;

			q->w = (rotmtx[2] - rotmtx[6])*sqdip1;
 80033d4:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 80033d8:	ed94 9a18 	vldr	s18, [r4, #96]	; 0x60
			q->x = (rotmtx[3] + rotmtx[1])*sqdip1;
 80033dc:	ed94 8a15 	vldr	s16, [r4, #84]	; 0x54
 80033e0:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
			q->z = (rotmtx[7] + rotmtx[5])*sqdip1;
 80033e4:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 80033e8:	ed94 2a17 	vldr	s4, [r4, #92]	; 0x5c
 80033ec:	edd4 4a12 	vldr	s9, [r4, #72]	; 0x48
 80033f0:	edd4 2a1a 	vldr	s5, [r4, #104]	; 0x68
			if ( fabsv(sqdip1) > 1e-6f)
 80033f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				sqdip1 = 0.5f/sqdip1;
 80033fc:	bfc4      	itt	gt
 80033fe:	eef6 7a00 	vmovgt.f32	s15, #96	; 0x3f000000  0.5
 8003402:	eec7 8aa8 	vdivgt.f32	s17, s15, s17
			q->w = (rotmtx[2] - rotmtx[6])*sqdip1;
 8003406:	ee31 5a49 	vsub.f32	s10, s2, s18
			q->x = (rotmtx[3] + rotmtx[1])*sqdip1;
 800340a:	ee78 5a07 	vadd.f32	s11, s16, s14
			q->w = (rotmtx[2] - rotmtx[6])*sqdip1;
 800340e:	ee25 5a28 	vmul.f32	s10, s10, s17
			q->x = (rotmtx[3] + rotmtx[1])*sqdip1;
 8003412:	ee65 5aa8 	vmul.f32	s11, s11, s17
			q->w = (rotmtx[2] - rotmtx[6])*sqdip1;
 8003416:	ee15 3a10 	vmov	r3, s10
			q->z = (rotmtx[7] + rotmtx[5])*sqdip1;
 800341a:	ee36 6a82 	vadd.f32	s12, s13, s4
			q->w = (rotmtx[2] - rotmtx[6])*sqdip1;
 800341e:	6463      	str	r3, [r4, #68]	; 0x44
			q->z = (rotmtx[7] + rotmtx[5])*sqdip1;
 8003420:	ee66 8a28 	vmul.f32	s17, s12, s17
			q->x = (rotmtx[3] + rotmtx[1])*sqdip1;
 8003424:	ee15 3a90 	vmov	r3, s11
 8003428:	63a3      	str	r3, [r4, #56]	; 0x38
			q->z = (rotmtx[7] + rotmtx[5])*sqdip1;
 800342a:	ee18 3a90 	vmov	r3, s17
 800342e:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8003432:	6423      	str	r3, [r4, #64]	; 0x40
 8003434:	e6ac      	b.n	8003190 <wahba_rot+0x788>
		}
		else if (d[2] > d[0])
 8003436:	eef4 4ae2 	vcmpe.f32	s9, s5
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	f140 8082 	bpl.w	8003546 <wahba_rot+0xb3e>
		{
			//max value at R(3,3)
			sqdip1 = sqrtv(d[2] - d[0] - d[1] + 1.0f);
 8003442:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8003446:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800344a:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800344e:	ee37 0a80 	vadd.f32	s0, s15, s0
    if(in >= 0.0f)
 8003452:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	f2c0 8121 	blt.w	80036a0 <wahba_rot+0xc98>
      *pOut = sqrtf(in);
 800345e:	f003 f8ed 	bl	800663c <sqrtf>
 8003462:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003466:	ee60 7a27 	vmul.f32	s15, s0, s15
 800346a:	eef0 8a40 	vmov.f32	s17, s0

			q->z = 0.5f*sqdip1;
 800346e:	ee17 3a90 	vmov	r3, s15

			if ( fabsv(sqdip1) > 1e-6f )
 8003472:	eeb0 0a68 	vmov.f32	s0, s17
			q->z = 0.5f*sqdip1;
 8003476:	6423      	str	r3, [r4, #64]	; 0x40
			if ( fabsv(sqdip1) > 1e-6f )
 8003478:	f002 ffd4 	bl	8006424 <fabsf>
 800347c:	eddf 7a90 	vldr	s15, [pc, #576]	; 80036c0 <wahba_rot+0xcb8>
				sqdip1 = 0.5f/sqdip1;

			q->w = (rotmtx[3] - rotmtx[1])*sqdip1;
 8003480:	ed94 8a15 	vldr	s16, [r4, #84]	; 0x54
 8003484:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
			q->x = (rotmtx[2] + rotmtx[6])*sqdip1;
 8003488:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 800348c:	ed94 9a18 	vldr	s18, [r4, #96]	; 0x60
			q->y = (rotmtx[7] + rotmtx[5])*sqdip1;
 8003490:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 8003494:	ed94 2a17 	vldr	s4, [r4, #92]	; 0x5c
 8003498:	edd4 4a12 	vldr	s9, [r4, #72]	; 0x48
 800349c:	edd4 2a1a 	vldr	s5, [r4, #104]	; 0x68
			if ( fabsv(sqdip1) > 1e-6f )
 80034a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				sqdip1 = 0.5f/sqdip1;
 80034a8:	bfc4      	itt	gt
 80034aa:	eef6 7a00 	vmovgt.f32	s15, #96	; 0x3f000000  0.5
 80034ae:	eec7 8aa8 	vdivgt.f32	s17, s15, s17
			q->w = (rotmtx[3] - rotmtx[1])*sqdip1;
 80034b2:	ee38 5a47 	vsub.f32	s10, s16, s14
			q->x = (rotmtx[2] + rotmtx[6])*sqdip1;
 80034b6:	ee71 5a09 	vadd.f32	s11, s2, s18
			q->w = (rotmtx[3] - rotmtx[1])*sqdip1;
 80034ba:	ee25 5a28 	vmul.f32	s10, s10, s17
			q->x = (rotmtx[2] + rotmtx[6])*sqdip1;
 80034be:	ee65 5aa8 	vmul.f32	s11, s11, s17
			q->w = (rotmtx[3] - rotmtx[1])*sqdip1;
 80034c2:	ee15 3a10 	vmov	r3, s10
			q->y = (rotmtx[7] + rotmtx[5])*sqdip1;
 80034c6:	ee36 6a82 	vadd.f32	s12, s13, s4
			q->w = (rotmtx[3] - rotmtx[1])*sqdip1;
 80034ca:	6463      	str	r3, [r4, #68]	; 0x44
			q->y = (rotmtx[7] + rotmtx[5])*sqdip1;
 80034cc:	ee66 8a28 	vmul.f32	s17, s12, s17
			q->x = (rotmtx[2] + rotmtx[6])*sqdip1;
 80034d0:	ee15 3a90 	vmov	r3, s11
 80034d4:	63a3      	str	r3, [r4, #56]	; 0x38
			q->y = (rotmtx[7] + rotmtx[5])*sqdip1;
 80034d6:	ee18 3a90 	vmov	r3, s17
 80034da:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80034de:	63e3      	str	r3, [r4, #60]	; 0x3c
 80034e0:	e656      	b.n	8003190 <wahba_rot+0x788>
      *pOut = 0.0f;
 80034e2:	eddf 2a78 	vldr	s5, [pc, #480]	; 80036c4 <wahba_rot+0xcbc>
 80034e6:	f7ff bacc 	b.w	8002a82 <wahba_rot+0x7a>
		tmp = 0.5/dt*tmp/sinv(tmp);
 80034ea:	ed93 7a00 	vldr	s14, [r3]
 80034ee:	edd5 7a00 	vldr	s15, [r5]
 80034f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80034f6:	ee86 8a87 	vdiv.f32	s16, s13, s14
 80034fa:	eeb0 0a67 	vmov.f32	s0, s15
 80034fe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003502:	f002 ff97 	bl	8006434 <sinf>
 8003506:	ee88 0a00 	vdiv.f32	s0, s16, s0
 800350a:	ed85 0a00 	vstr	s0, [r5]
 800350e:	e6c7      	b.n	80032a0 <wahba_rot+0x898>
	tr = SATUR(tr,1);
 8003510:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003514:	eeb4 0a67 	vcmp.f32	s0, s15
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	bf48      	it	mi
 800351e:	eeb0 0a67 	vmovmi.f32	s0, s15
 8003522:	e6a3      	b.n	800326c <wahba_rot+0x864>
		euler[0] = atan2v(-rotmtx[7], rotmtx[4]);
 8003524:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 8003528:	edd4 0a16 	vldr	s1, [r4, #88]	; 0x58
 800352c:	eeb1 0a40 	vneg.f32	s0, s0
 8003530:	f003 f882 	bl	8006638 <atan2f>
		euler[1] = +0.5f * M_PI;
 8003534:	4a64      	ldr	r2, [pc, #400]	; (80036c8 <wahba_rot+0xcc0>)
		euler[0] = atan2v(-rotmtx[7], rotmtx[4]);
 8003536:	ed84 0a31 	vstr	s0, [r4, #196]	; 0xc4
		euler[2] = 0.0f;
 800353a:	2300      	movs	r3, #0
		euler[1] = +0.5f * M_PI;
 800353c:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
		euler[2] = 0.0f;
 8003540:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8003544:	e5d4      	b.n	80030f0 <wahba_rot+0x6e8>
		}
		else
		{
			// max value at R(1,1)
			sqdip1 = sqrtv(d[0] - d[1] - d[2] + 1.0f );
 8003546:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800354a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800354e:	ee77 2ae2 	vsub.f32	s5, s15, s5
 8003552:	ee32 0a80 	vadd.f32	s0, s5, s0
    if(in >= 0.0f)
 8003556:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	f2c0 809a 	blt.w	8003696 <wahba_rot+0xc8e>
      *pOut = sqrtf(in);
 8003562:	f003 f86b 	bl	800663c <sqrtf>
 8003566:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800356a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800356e:	eef0 8a40 	vmov.f32	s17, s0

			q->x = 0.5f*sqdip1;
 8003572:	ee17 3a90 	vmov	r3, s15

			if ( fabsv(sqdip1) > 1e-6f )
 8003576:	eeb0 0a68 	vmov.f32	s0, s17
			q->x = 0.5f*sqdip1;
 800357a:	63a3      	str	r3, [r4, #56]	; 0x38
			if ( fabsv(sqdip1) > 1e-6f )
 800357c:	f002 ff52 	bl	8006424 <fabsf>
 8003580:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80036c0 <wahba_rot+0xcb8>
				sqdip1 = 0.5f/sqdip1;

			q->w = (rotmtx[7] - rotmtx[5])*sqdip1;
 8003584:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 8003588:	ed94 2a17 	vldr	s4, [r4, #92]	; 0x5c
			q->y = (rotmtx[3] + rotmtx[1])*sqdip1;
 800358c:	ed94 8a15 	vldr	s16, [r4, #84]	; 0x54
 8003590:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
			q->z = (rotmtx[2] + rotmtx[6])*sqdip1;
 8003594:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 8003598:	ed94 9a18 	vldr	s18, [r4, #96]	; 0x60
 800359c:	edd4 4a12 	vldr	s9, [r4, #72]	; 0x48
 80035a0:	edd4 2a1a 	vldr	s5, [r4, #104]	; 0x68
			if ( fabsv(sqdip1) > 1e-6f )
 80035a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				sqdip1 = 0.5f/sqdip1;
 80035ac:	bfc4      	itt	gt
 80035ae:	eef6 7a00 	vmovgt.f32	s15, #96	; 0x3f000000  0.5
 80035b2:	eec7 8aa8 	vdivgt.f32	s17, s15, s17
			q->w = (rotmtx[7] - rotmtx[5])*sqdip1;
 80035b6:	ee36 5ac2 	vsub.f32	s10, s13, s4
			q->y = (rotmtx[3] + rotmtx[1])*sqdip1;
 80035ba:	ee78 5a07 	vadd.f32	s11, s16, s14
			q->w = (rotmtx[7] - rotmtx[5])*sqdip1;
 80035be:	ee25 5a28 	vmul.f32	s10, s10, s17
			q->y = (rotmtx[3] + rotmtx[1])*sqdip1;
 80035c2:	ee65 5aa8 	vmul.f32	s11, s11, s17
			q->w = (rotmtx[7] - rotmtx[5])*sqdip1;
 80035c6:	ee15 3a10 	vmov	r3, s10
			q->z = (rotmtx[2] + rotmtx[6])*sqdip1;
 80035ca:	ee31 6a09 	vadd.f32	s12, s2, s18
			q->w = (rotmtx[7] - rotmtx[5])*sqdip1;
 80035ce:	6463      	str	r3, [r4, #68]	; 0x44
			q->z = (rotmtx[2] + rotmtx[6])*sqdip1;
 80035d0:	ee66 8a28 	vmul.f32	s17, s12, s17
			q->y = (rotmtx[3] + rotmtx[1])*sqdip1;
 80035d4:	ee15 3a90 	vmov	r3, s11
 80035d8:	63e3      	str	r3, [r4, #60]	; 0x3c
			q->z = (rotmtx[2] + rotmtx[6])*sqdip1;
 80035da:	ee18 3a90 	vmov	r3, s17
 80035de:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80035e2:	6423      	str	r3, [r4, #64]	; 0x40
 80035e4:	e5d4      	b.n	8003190 <wahba_rot+0x788>
	v[0]=A[0][0]*x[0]+A[1][0]*x[1]+A[2][0]*x[2];
 80035e6:	edd5 7a03 	vldr	s15, [r5, #12]
 80035ea:	ed92 5a01 	vldr	s10, [r2, #4]
 80035ee:	edd5 5a00 	vldr	s11, [r5]
 80035f2:	ed92 6a00 	vldr	s12, [r2]
 80035f6:	edd5 6a06 	vldr	s13, [r5, #24]
 80035fa:	ed92 7a02 	vldr	s14, [r2, #8]
		mulMatrTrVec(m_r,Rbe,m_bn);
 80035fe:	f8d8 7000 	ldr.w	r7, [r8]
 8003602:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003606:	eee5 7a86 	vfma.f32	s15, s11, s12
 800360a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800360e:	edc7 7a00 	vstr	s15, [r7]
	v[1]=A[0][1]*x[0]+A[1][1]*x[1]+A[2][1]*x[2];
 8003612:	ed95 0a04 	vldr	s0, [r5, #16]
 8003616:	ed92 5a01 	vldr	s10, [r2, #4]
 800361a:	edd5 5a01 	vldr	s11, [r5, #4]
 800361e:	edd2 6a00 	vldr	s13, [r2]
 8003622:	ed95 6a07 	vldr	s12, [r5, #28]
 8003626:	ed92 7a02 	vldr	s14, [r2, #8]
 800362a:	ee20 0a05 	vmul.f32	s0, s0, s10
 800362e:	eea5 0aa6 	vfma.f32	s0, s11, s13
 8003632:	eea6 0a07 	vfma.f32	s0, s12, s14
 8003636:	ed87 0a01 	vstr	s0, [r7, #4]
	v[2]=A[0][2]*x[0]+A[1][2]*x[1]+A[2][2]*x[2];
 800363a:	ed95 7a05 	vldr	s14, [r5, #20]
 800363e:	edd2 4a01 	vldr	s9, [r2, #4]
 8003642:	ed95 5a02 	vldr	s10, [r5, #8]
 8003646:	edd5 5a08 	vldr	s11, [r5, #32]
 800364a:	ed92 6a02 	vldr	s12, [r2, #8]
 800364e:	ee27 7a24 	vmul.f32	s14, s14, s9
		m_r[0]=sqrtv(m_r[0]*m_r[0]+m_r[1]*m_r[1]);
 8003652:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003656:	eea6 7a85 	vfma.f32	s14, s13, s10
 800365a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800365e:	eef0 7a47 	vmov.f32	s15, s14
 8003662:	eee5 7a86 	vfma.f32	s15, s11, s12
    if(in >= 0.0f)
 8003666:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	edc7 7a02 	vstr	s15, [r7, #8]
 8003672:	db1a      	blt.n	80036aa <wahba_rot+0xca2>
      *pOut = sqrtf(in);
 8003674:	f002 ffe2 	bl	800663c <sqrtf>
 8003678:	f8d8 3000 	ldr.w	r3, [r8]
 800367c:	6831      	ldr	r1, [r6, #0]
 800367e:	ed87 0a00 	vstr	s0, [r7]
		m_r[1]=0;
 8003682:	2200      	movs	r2, #0
		cnt++;
 8003684:	3101      	adds	r1, #1
 8003686:	6031      	str	r1, [r6, #0]
		m_r[1]=0;
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	e489      	b.n	8002fa0 <wahba_rot+0x598>
    if(in >= 0.0f)
 800368c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80036c4 <wahba_rot+0xcbc>
 8003690:	eeb0 6a40 	vmov.f32	s12, s0
 8003694:	e558      	b.n	8003148 <wahba_rot+0x740>
 8003696:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80036c4 <wahba_rot+0xcbc>
      *pOut = 0.0f;
 800369a:	eef0 8a67 	vmov.f32	s17, s15
 800369e:	e768      	b.n	8003572 <wahba_rot+0xb6a>
    if(in >= 0.0f)
 80036a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80036c4 <wahba_rot+0xcbc>
      *pOut = 0.0f;
 80036a4:	eef0 8a67 	vmov.f32	s17, s15
 80036a8:	e6e1      	b.n	800346e <wahba_rot+0xa66>
 80036aa:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80036c4 <wahba_rot+0xcbc>
    if(in >= 0.0f)
 80036ae:	463b      	mov	r3, r7
 80036b0:	e7e5      	b.n	800367e <wahba_rot+0xc76>
 80036b2:	eddf 7a04 	vldr	s15, [pc, #16]	; 80036c4 <wahba_rot+0xcbc>
      *pOut = 0.0f;
 80036b6:	eef0 8a67 	vmov.f32	s17, s15
 80036ba:	e682      	b.n	80033c2 <wahba_rot+0x9ba>
 80036bc:	bfc90fdb 	.word	0xbfc90fdb
 80036c0:	358637bd 	.word	0x358637bd
 80036c4:	00000000 	.word	0x00000000
 80036c8:	3fc90fdb 	.word	0x3fc90fdb

080036cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036cc:	4938      	ldr	r1, [pc, #224]	; (80037b0 <SystemInit+0xe4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80036ce:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <SystemInit+0xe8>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80036d4:	4838      	ldr	r0, [pc, #224]	; (80037b8 <SystemInit+0xec>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80036da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80036de:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80036e0:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80036e8:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80036f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036f4:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80036f6:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80036f8:	681a      	ldr	r2, [r3, #0]
{
 80036fa:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80036fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003700:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003702:	60d9      	str	r1, [r3, #12]
{
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003704:	9100      	str	r1, [sp, #0]
 8003706:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800370e:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003710:	461a      	mov	r2, r3
 8003712:	e003      	b.n	800371c <SystemInit+0x50>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003714:	9b00      	ldr	r3, [sp, #0]
 8003716:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800371a:	d009      	beq.n	8003730 <SystemInit+0x64>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800371c:	6813      	ldr	r3, [r2, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8003724:	9b00      	ldr	r3, [sp, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800372a:	9b01      	ldr	r3, [sp, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f1      	beq.n	8003714 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003730:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <SystemInit+0xe8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8003738:	bf18      	it	ne
 800373a:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800373c:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800373e:	9b01      	ldr	r3, [sp, #4]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d005      	beq.n	8003750 <SystemInit+0x84>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <SystemInit+0xe4>)
 8003746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	b002      	add	sp, #8
 800374e:	4770      	bx	lr
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003750:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <SystemInit+0xe8>)
    PWR->CR |= PWR_CR_VOS;
 8003752:	491a      	ldr	r1, [pc, #104]	; (80037bc <SystemInit+0xf0>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003756:	481a      	ldr	r0, [pc, #104]	; (80037c0 <SystemInit+0xf4>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003758:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800375e:	680a      	ldr	r2, [r1, #0]
 8003760:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003764:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003770:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003778:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800377a:	6058      	str	r0, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003782:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	0192      	lsls	r2, r2, #6
 8003788:	d5fc      	bpl.n	8003784 <SystemInit+0xb8>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800378a:	490e      	ldr	r1, [pc, #56]	; (80037c4 <SystemInit+0xf8>)
    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= RCC_CFGR_SW_PLL;

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <SystemInit+0xe8>)
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800378e:	f240 7005 	movw	r0, #1797	; 0x705
 8003792:	6008      	str	r0, [r1, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	f021 0103 	bic.w	r1, r1, #3
 800379a:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800379c:	6899      	ldr	r1, [r3, #8]
 800379e:	f041 0102 	orr.w	r1, r1, #2
 80037a2:	6099      	str	r1, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80037a4:	6893      	ldr	r3, [r2, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d1fa      	bne.n	80037a4 <SystemInit+0xd8>
 80037ae:	e7c9      	b.n	8003744 <SystemInit+0x78>
 80037b0:	e000ed00 	.word	0xe000ed00
 80037b4:	40023800 	.word	0x40023800
 80037b8:	24003010 	.word	0x24003010
 80037bc:	40007000 	.word	0x40007000
 80037c0:	0740540c 	.word	0x0740540c
 80037c4:	40023c00 	.word	0x40023c00

080037c8 <VCP_DeInit>:
 */
uint16_t VCP_DeInit(void)
{

	return USBD_OK;
}
 80037c8:	2000      	movs	r0, #0
 80037ca:	4770      	bx	lr

080037cc <VCP_Ctrl>:
	default:
		break;
	}

	return USBD_OK;
}
 80037cc:	2000      	movs	r0, #0
 80037ce:	4770      	bx	lr

080037d0 <VCP_DataTx>:
 * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
 */
extern volatile uint32_t APP_free_buff_len;

uint16_t VCP_DataTx (uint8_t* buf, uint32_t len)
{
 80037d0:	b4f0      	push	{r4, r5, r6, r7}
	u32 i;
	i = toc+CDC_IN_FRAME_INTERVAL*1000+5000;
	if(USB_OTG_dev.dev.device_status == USB_OTG_CONFIGURED){
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <VCP_DataTx+0x70>)
 80037d4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
	i = toc+CDC_IN_FRAME_INTERVAL*1000+5000;
 80037d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	if(USB_OTG_dev.dev.device_status == USB_OTG_CONFIGURED){
 80037dc:	2b03      	cmp	r3, #3
	i = toc+CDC_IN_FRAME_INTERVAL*1000+5000;
 80037de:	6a54      	ldr	r4, [r2, #36]	; 0x24
	if(USB_OTG_dev.dev.device_status == USB_OTG_CONFIGURED){
 80037e0:	d002      	beq.n	80037e8 <VCP_DataTx+0x18>
		{
			APP_Rx_Buffer[APP_Rx_ptr_in++] = buf[i] ;
			if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
				APP_Rx_ptr_in = 0;
		}
		asm("CPSIE i");
 80037e2:	2000      	movs	r0, #0

	}
	return USBD_OK;
}
 80037e4:	bcf0      	pop	{r4, r5, r6, r7}
 80037e6:	4770      	bx	lr
	i = toc+CDC_IN_FRAME_INTERVAL*1000+5000;
 80037e8:	f504 549c 	add.w	r4, r4, #4992	; 0x1380
 80037ec:	3408      	adds	r4, #8
 80037ee:	4e15      	ldr	r6, [pc, #84]	; (8003844 <VCP_DataTx+0x74>)
 80037f0:	e002      	b.n	80037f8 <VCP_DataTx+0x28>
			if(toc>i){
 80037f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80037f4:	429c      	cmp	r4, r3
 80037f6:	d31f      	bcc.n	8003838 <VCP_DataTx+0x68>
		while(APP_flag){ // waits for prev buf to empty to
 80037f8:	7833      	ldrb	r3, [r6, #0]
 80037fa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f7      	bne.n	80037f2 <VCP_DataTx+0x22>
		asm("CPSID i");
 8003802:	b672      	cpsid	i
		APP_flag =1;
 8003804:	2301      	movs	r3, #1
		APP_free_buff_len -= len;
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <VCP_DataTx+0x78>)
		APP_flag =1;
 8003808:	7033      	strb	r3, [r6, #0]
		APP_free_buff_len -= len;
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	1a5b      	subs	r3, r3, r1
 800380e:	6013      	str	r3, [r2, #0]
		for( i = 0; i < len; i++ )
 8003810:	b181      	cbz	r1, 8003834 <VCP_DataTx+0x64>
 8003812:	4e0e      	ldr	r6, [pc, #56]	; (800384c <VCP_DataTx+0x7c>)
 8003814:	4f0e      	ldr	r7, [pc, #56]	; (8003850 <VCP_DataTx+0x80>)
 8003816:	6832      	ldr	r2, [r6, #0]
 8003818:	4401      	add	r1, r0
			APP_Rx_Buffer[APP_Rx_ptr_in++] = buf[i] ;
 800381a:	1c53      	adds	r3, r2, #1
 800381c:	6033      	str	r3, [r6, #0]
 800381e:	f810 4b01 	ldrb.w	r4, [r0], #1
 8003822:	54bc      	strb	r4, [r7, r2]
			if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
				APP_Rx_ptr_in = 0;
 8003828:	bf06      	itte	eq
 800382a:	6035      	streq	r5, [r6, #0]
 800382c:	2200      	moveq	r2, #0
			if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 800382e:	461a      	movne	r2, r3
		for( i = 0; i < len; i++ )
 8003830:	4281      	cmp	r1, r0
 8003832:	d1f2      	bne.n	800381a <VCP_DataTx+0x4a>
		asm("CPSIE i");
 8003834:	b662      	cpsie	i
 8003836:	e7d4      	b.n	80037e2 <VCP_DataTx+0x12>
				return USBD_FAIL;
 8003838:	2002      	movs	r0, #2
}
 800383a:	bcf0      	pop	{r4, r5, r6, r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000d30 	.word	0x20000d30
 8003844:	20000bc4 	.word	0x20000bc4
 8003848:	200004f8 	.word	0x200004f8
 800384c:	20000bbc 	.word	0x20000bbc
 8003850:	20001cb4 	.word	0x20001cb4

08003854 <VCP_DataRx>:
 * @param  Buf: Buffer of data received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
 */
uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
 8003854:	b470      	push	{r4, r5, r6}
	uint32_t i;
	//	depacketized data (eg cutecom..)

	if((UsbRxLen==0) && (UsbRxLen<=APP_RX_DATA_SIZE)){ //do not overwrite if not read
 8003856:	4e0b      	ldr	r6, [pc, #44]	; (8003884 <VCP_DataRx+0x30>)
 8003858:	7833      	ldrb	r3, [r6, #0]
 800385a:	b983      	cbnz	r3, 800387e <VCP_DataRx+0x2a>
 800385c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003860:	7833      	ldrb	r3, [r6, #0]
		for(i=0;i<Len;i++){
 8003862:	b151      	cbz	r1, 800387a <VCP_DataRx+0x26>
 8003864:	1e4c      	subs	r4, r1, #1
 8003866:	4d08      	ldr	r5, [pc, #32]	; (8003888 <VCP_DataRx+0x34>)
 8003868:	4404      	add	r4, r0
 800386a:	1e43      	subs	r3, r0, #1
			UsbRxBuf[i]=Buf[i];
 800386c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003870:	54a8      	strb	r0, [r5, r2]
		for(i=0;i<Len;i++){
 8003872:	42a3      	cmp	r3, r4
 8003874:	f102 0201 	add.w	r2, r2, #1
 8003878:	d1f8      	bne.n	800386c <VCP_DataRx+0x18>
		}
		UsbRxLen=Len;
 800387a:	b2c9      	uxtb	r1, r1
 800387c:	7031      	strb	r1, [r6, #0]
	}
	return USBD_OK;
}
 800387e:	2000      	movs	r0, #0
 8003880:	bc70      	pop	{r4, r5, r6}
 8003882:	4770      	bx	lr
 8003884:	20000ba4 	.word	0x20000ba4
 8003888:	20001424 	.word	0x20001424

0800388c <VCP_Init>:
 800388c:	2000      	movs	r0, #0
 800388e:	4770      	bx	lr

08003890 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003892:	e003      	b.n	800389c <LoopCopyDataInit>

08003894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800389a:	3104      	adds	r1, #4

0800389c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800389c:	480a      	ldr	r0, [pc, #40]	; (80038c8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80038a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038a4:	d3f6      	bcc.n	8003894 <CopyDataInit>
  ldr  r2, =_sbss
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80038a8:	e002      	b.n	80038b0 <LoopFillZerobss>

080038aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038ac:	f842 3b04 	str.w	r3, [r2], #4

080038b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80038b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038b4:	d3f9      	bcc.n	80038aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038b6:	f7ff ff09 	bl	80036cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ba:	f7fd fc97 	bl	80011ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038be:	f7fe fb7d 	bl	8001fbc <main>
  bx  lr    
 80038c2:	4770      	bx	lr
  ldr  r3, =_sidata
 80038c4:	0800bacc 	.word	0x0800bacc
  ldr  r0, =_sdata
 80038c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038cc:	20000aec 	.word	0x20000aec
  ldr  r2, =_sbss
 80038d0:	20000aec 	.word	0x20000aec
  ldr  r3, = _ebss
 80038d4:	200024b8 	.word	0x200024b8

080038d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d8:	e7fe      	b.n	80038d8 <ADC_IRQHandler>
	...

080038dc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80038dc:	2200      	movs	r2, #0
 80038de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80038e2:	4613      	mov	r3, r2
 80038e4:	f8d1 e000 	ldr.w	lr, [r1]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80038e8:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80038ea:	f04f 0c03 	mov.w	ip, #3
 80038ee:	e004      	b.n	80038fa <GPIO_Init+0x1e>
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80038f0:	3301      	adds	r3, #1
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	f102 0202 	add.w	r2, r2, #2
 80038f8:	d029      	beq.n	800394e <GPIO_Init+0x72>
    pos = ((uint32_t)0x01) << pinpos;
 80038fa:	fa07 f403 	lsl.w	r4, r7, r3
    if (currentpin == pos)
 80038fe:	ea34 050e 	bics.w	r5, r4, lr
 8003902:	d1f5      	bne.n	80038f0 <GPIO_Init+0x14>
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003904:	f8d0 8000 	ldr.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003908:	790e      	ldrb	r6, [r1, #4]
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800390a:	fa0c f502 	lsl.w	r5, ip, r2
 800390e:	43ed      	mvns	r5, r5
 8003910:	ea08 0805 	and.w	r8, r8, r5
 8003914:	f8c0 8000 	str.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003918:	f8d0 a000 	ldr.w	sl, [r0]
 800391c:	fa06 f902 	lsl.w	r9, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003920:	3e01      	subs	r6, #1
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003922:	ea49 090a 	orr.w	r9, r9, sl
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003926:	2e01      	cmp	r6, #1
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003928:	fa0c f802 	lsl.w	r8, ip, r2
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800392c:	f8c0 9000 	str.w	r9, [r0]
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003930:	d90f      	bls.n	8003952 <GPIO_Init+0x76>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003932:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003934:	79cc      	ldrb	r4, [r1, #7]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003936:	ea25 0508 	bic.w	r5, r5, r8
 800393a:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800393c:	68c5      	ldr	r5, [r0, #12]
 800393e:	4094      	lsls	r4, r2
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003940:	3301      	adds	r3, #1
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003942:	432c      	orrs	r4, r5
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003944:	2b10      	cmp	r3, #16
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003946:	60c4      	str	r4, [r0, #12]
 8003948:	f102 0202 	add.w	r2, r2, #2
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800394c:	d1d5      	bne.n	80038fa <GPIO_Init+0x1e>
    }
  }
}
 800394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003952:	f8d0 9008 	ldr.w	r9, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003956:	794e      	ldrb	r6, [r1, #5]
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003958:	ea05 0509 	and.w	r5, r5, r9
 800395c:	6085      	str	r5, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800395e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003962:	798d      	ldrb	r5, [r1, #6]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003964:	4096      	lsls	r6, r2
 8003966:	ea46 0609 	orr.w	r6, r6, r9
 800396a:	6086      	str	r6, [r0, #8]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800396c:	6846      	ldr	r6, [r0, #4]
 800396e:	ea26 0404 	bic.w	r4, r6, r4
 8003972:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003974:	6846      	ldr	r6, [r0, #4]
 8003976:	fa05 f403 	lsl.w	r4, r5, r3
 800397a:	b2a4      	uxth	r4, r4
 800397c:	4334      	orrs	r4, r6
 800397e:	6044      	str	r4, [r0, #4]
 8003980:	e7d7      	b.n	8003932 <GPIO_Init+0x56>
 8003982:	bf00      	nop

08003984 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003984:	08cb      	lsrs	r3, r1, #3
 8003986:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800398a:	f001 0107 	and.w	r1, r1, #7
{
 800398e:	b410      	push	{r4}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003990:	6a03      	ldr	r3, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003992:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003994:	240f      	movs	r4, #15
 8003996:	408c      	lsls	r4, r1
 8003998:	ea23 0304 	bic.w	r3, r3, r4
 800399c:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800399e:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80039a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80039a4:	fa02 f101 	lsl.w	r1, r2, r1
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80039a8:	4319      	orrs	r1, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80039aa:	6201      	str	r1, [r0, #32]
}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop

080039b0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80039b0:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <TIM_TimeBaseInit+0x90>)
  tmpcr1 = TIMx->CR1;  
 80039b2:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)||
 80039b4:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 80039b6:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)||
 80039b8:	d012      	beq.n	80039e0 <TIM_TimeBaseInit+0x30>
 80039ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039be:	4290      	cmp	r0, r2
 80039c0:	d00e      	beq.n	80039e0 <TIM_TimeBaseInit+0x30>
 80039c2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80039c6:	d00b      	beq.n	80039e0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80039c8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80039cc:	4290      	cmp	r0, r2
 80039ce:	d007      	beq.n	80039e0 <TIM_TimeBaseInit+0x30>
 80039d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039d4:	4290      	cmp	r0, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80039d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039dc:	4290      	cmp	r0, r2
 80039de:	d103      	bne.n	80039e8 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80039e0:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80039e6:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80039e8:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <TIM_TimeBaseInit+0x94>)
 80039ea:	4290      	cmp	r0, r2
 80039ec:	d01f      	beq.n	8003a2e <TIM_TimeBaseInit+0x7e>
 80039ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039f2:	4290      	cmp	r0, r2
 80039f4:	d01b      	beq.n	8003a2e <TIM_TimeBaseInit+0x7e>
{
 80039f6:	b470      	push	{r4, r5, r6}
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80039f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80039fc:	890e      	ldrh	r6, [r1, #8]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80039fe:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003a00:	880c      	ldrh	r4, [r1, #0]
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8003a02:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8003a06:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003a08:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8003a0a:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 8003a0c:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003a0e:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003a10:	8504      	strh	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8003a12:	d006      	beq.n	8003a22 <TIM_TimeBaseInit+0x72>
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <TIM_TimeBaseInit+0x98>)
 8003a16:	4298      	cmp	r0, r3
 8003a18:	d003      	beq.n	8003a22 <TIM_TimeBaseInit+0x72>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	8283      	strh	r3, [r0, #20]
}
 8003a1e:	bc70      	pop	{r4, r5, r6}
 8003a20:	4770      	bx	lr
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8003a22:	7a8b      	ldrb	r3, [r1, #10]
 8003a24:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8003a26:	2301      	movs	r3, #1
 8003a28:	8283      	strh	r3, [r0, #20]
}
 8003a2a:	bc70      	pop	{r4, r5, r6}
 8003a2c:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 8003a2e:	8003      	strh	r3, [r0, #0]
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003a30:	880b      	ldrh	r3, [r1, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003a32:	684a      	ldr	r2, [r1, #4]
 8003a34:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003a36:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8003a38:	2301      	movs	r3, #1
 8003a3a:	8283      	strh	r3, [r0, #20]
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40001000 	.word	0x40001000
 8003a48:	40010400 	.word	0x40010400

08003a4c <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003a4c:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8003a4e:	b929      	cbnz	r1, 8003a5c <TIM_Cmd+0x10>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	8003      	strh	r3, [r0, #0]
 8003a5a:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	8003      	strh	r3, [r0, #0]
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop

08003a68 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8003a68:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <I2C_DeInit+0x60>)
 8003a6c:	4298      	cmp	r0, r3
 8003a6e:	d012      	beq.n	8003a96 <I2C_DeInit+0x2e>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 8003a70:	4b16      	ldr	r3, [pc, #88]	; (8003acc <I2C_DeInit+0x64>)
 8003a72:	4298      	cmp	r0, r3
 8003a74:	d01b      	beq.n	8003aae <I2C_DeInit+0x46>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8003a76:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <I2C_DeInit+0x68>)
 8003a78:	4298      	cmp	r0, r3
 8003a7a:	d000      	beq.n	8003a7e <I2C_DeInit+0x16>
 8003a7c:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8003a7e:	2101      	movs	r1, #1
 8003a80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003a84:	f000 f984 	bl	8003d90 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    }
  }
}
 8003a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8003a92:	f000 b97d 	b.w	8003d90 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8003a96:	2101      	movs	r1, #1
 8003a98:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a9c:	f000 f978 	bl	8003d90 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
}
 8003aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8003aaa:	f000 b971 	b.w	8003d90 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8003aae:	2101      	movs	r1, #1
 8003ab0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003ab4:	f000 f96c 	bl	8003d90 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8003abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8003ac2:	f000 b965 	b.w	8003d90 <RCC_APB1PeriphResetCmd>
 8003ac6:	bf00      	nop
 8003ac8:	40005400 	.word	0x40005400
 8003acc:	40005800 	.word	0x40005800
 8003ad0:	40005c00 	.word	0x40005c00

08003ad4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8003ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	b085      	sub	sp, #20
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8003ada:	4668      	mov	r0, sp
{
 8003adc:	460e      	mov	r6, r1
  tmpreg = I2Cx->CR2;
 8003ade:	88a5      	ldrh	r5, [r4, #4]
  RCC_GetClocksFreq(&rcc_clocks);
 8003ae0:	f000 f8de 	bl	8003ca0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003ae4:	9802      	ldr	r0, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003ae6:	4a31      	ldr	r2, [pc, #196]	; (8003bac <I2C_Init+0xd8>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003ae8:	6833      	ldr	r3, [r6, #0]
 8003aea:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8003bb4 <I2C_Init+0xe0>
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003aee:	fba2 1200 	umull	r1, r2, r2, r0
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003af2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003af6:	0c91      	lsrs	r1, r2, #18
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003af8:	042d      	lsls	r5, r5, #16
 8003afa:	0c2d      	lsrs	r5, r5, #16
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003afc:	b28f      	uxth	r7, r1
  tmpreg |= freqrange;
 8003afe:	433d      	orrs	r5, r7
  I2Cx->CR2 = tmpreg;
 8003b00:	80a5      	strh	r5, [r4, #4]
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003b02:	8822      	ldrh	r2, [r4, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	0412      	lsls	r2, r2, #16
 8003b0a:	0c12      	lsrs	r2, r2, #16
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003b0c:	4573      	cmp	r3, lr
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003b0e:	8022      	strh	r2, [r4, #0]
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003b10:	d823      	bhi.n	8003b5a <I2C_Init+0x86>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b18:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003b1a:	3701      	adds	r7, #1
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	bf38      	it	cc
 8003b20:	2304      	movcc	r3, #4
 8003b22:	8427      	strh	r7, [r4, #32]
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003b24:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8003b26:	8821      	ldrh	r1, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003b28:	88b0      	ldrh	r0, [r6, #4]
 8003b2a:	8977      	ldrh	r7, [r6, #10]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003b2c:	89b2      	ldrh	r2, [r6, #12]
 8003b2e:	8935      	ldrh	r5, [r6, #8]
  I2Cx->CR1 |= I2C_CR1_PE;
 8003b30:	b289      	uxth	r1, r1
 8003b32:	f041 0101 	orr.w	r1, r1, #1
 8003b36:	8021      	strh	r1, [r4, #0]
  tmpreg = I2Cx->CR1;
 8003b38:	8823      	ldrh	r3, [r4, #0]
  tmpreg &= CR1_CLEAR_MASK;
 8003b3a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8003b3e:	f023 0302 	bic.w	r3, r3, #2
 8003b42:	041b      	lsls	r3, r3, #16
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003b44:	ea40 0107 	orr.w	r1, r0, r7
  tmpreg &= CR1_CLEAR_MASK;
 8003b48:	0c1b      	lsrs	r3, r3, #16
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003b4a:	430b      	orrs	r3, r1
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003b4c:	432a      	orrs	r2, r5
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003b4e:	b29b      	uxth	r3, r3
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003b50:	b292      	uxth	r2, r2
  I2Cx->CR1 = tmpreg;
 8003b52:	8023      	strh	r3, [r4, #0]
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003b54:	8122      	strh	r2, [r4, #8]
}
 8003b56:	b005      	add	sp, #20
 8003b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8003b5a:	88f5      	ldrh	r5, [r6, #6]
 8003b5c:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003b60:	4295      	cmp	r5, r2
 8003b62:	d01d      	beq.n	8003ba0 <I2C_Init+0xcc>
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8003b64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b70:	b29b      	uxth	r3, r3
      result |= I2C_DutyCycle_16_9;
 8003b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    if ((result & I2C_CCR_CCR) == 0)
 8003b76:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003b7a:	b90a      	cbnz	r2, 8003b80 <I2C_Init+0xac>
      result |= (uint16_t)0x0001;  
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003b80:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b84:	480a      	ldr	r0, [pc, #40]	; (8003bb0 <I2C_Init+0xdc>)
 8003b86:	fb02 f201 	mul.w	r2, r2, r1
 8003b8a:	fb80 0102 	smull	r0, r1, r0, r2
 8003b8e:	17d2      	asrs	r2, r2, #31
 8003b90:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
 8003b94:	3201      	adds	r2, #1
 8003b96:	b292      	uxth	r2, r2
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8003b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003b9c:	8422      	strh	r2, [r4, #32]
 8003b9e:	e7c1      	b.n	8003b24 <I2C_Init+0x50>
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8003ba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	e7e4      	b.n	8003b76 <I2C_Init+0xa2>
 8003bac:	431bde83 	.word	0x431bde83
 8003bb0:	10624dd3 	.word	0x10624dd3
 8003bb4:	000186a0 	.word	0x000186a0

08003bb8 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8003bb8:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8003bba:	b929      	cbnz	r1, 8003bc8 <I2C_Cmd+0x10>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	8003      	strh	r3, [r0, #0]
 8003bc6:	4770      	bx	lr
    I2Cx->CR1 |= I2C_CR1_PE;
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	8003      	strh	r3, [r0, #0]
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop

08003bd4 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003bd4:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8003bd6:	b929      	cbnz	r1, 8003be4 <I2C_GenerateSTART+0x10>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	8003      	strh	r3, [r0, #0]
 8003be2:	4770      	bx	lr
    I2Cx->CR1 |= I2C_CR1_START;
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	8003      	strh	r3, [r0, #0]
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8003bf0:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8003bf2:	b929      	cbnz	r1, 8003c00 <I2C_GenerateSTOP+0x10>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8003bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	0c1b      	lsrs	r3, r3, #16
 8003bfc:	8003      	strh	r3, [r0, #0]
 8003bfe:	4770      	bx	lr
    I2Cx->CR1 |= I2C_CR1_STOP;
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c06:	8003      	strh	r3, [r0, #0]
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop

08003c0c <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003c0c:	b922      	cbnz	r2, 8003c18 <I2C_Send7bitAddress+0xc>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8003c0e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003c12:	b289      	uxth	r1, r1
 8003c14:	8201      	strh	r1, [r0, #16]
 8003c16:	4770      	bx	lr
    Address |= I2C_OAR1_ADD0;
 8003c18:	f041 0101 	orr.w	r1, r1, #1
  I2Cx->DR = Address;
 8003c1c:	b289      	uxth	r1, r1
 8003c1e:	8201      	strh	r1, [r0, #16]
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8003c24:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8003c26:	b929      	cbnz	r1, 8003c34 <I2C_AcknowledgeConfig+0x10>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8003c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	8003      	strh	r3, [r0, #0]
 8003c32:	4770      	bx	lr
    I2Cx->CR1 |= I2C_CR1_ACK;
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c3a:	8003      	strh	r3, [r0, #0]
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop

08003c40 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8003c40:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8003c42:	b919      	cbnz	r1, 8003c4c <I2C_SoftwareResetCmd+0xc>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8003c44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c48:	8003      	strh	r3, [r0, #0]
 8003c4a:	4770      	bx	lr
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8003c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	8003      	strh	r3, [r0, #0]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop

08003c5c <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8003c5c:	8803      	ldrh	r3, [r0, #0]
  if (NewState == DISABLE)
 8003c5e:	b129      	cbz	r1, 8003c6c <I2C_StretchClockCmd+0x10>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8003c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	8003      	strh	r3, [r0, #0]
 8003c6a:	4770      	bx	lr
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c72:	8003      	strh	r3, [r0, #0]
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8003c78:	8201      	strh	r1, [r0, #16]
 8003c7a:	4770      	bx	lr

08003c7c <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8003c7c:	8a00      	ldrh	r0, [r0, #16]
}
 8003c7e:	b2c0      	uxtb	r0, r0
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop

08003c84 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003c84:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8003c86:	8b00      	ldrh	r0, [r0, #24]
  flag1 = I2Cx->SR1;
 8003c88:	b29b      	uxth	r3, r3
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003c8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8003c8e:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
 8003c92:	4018      	ands	r0, r3
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8003c94:	1a40      	subs	r0, r0, r1
 8003c96:	fab0 f080 	clz	r0, r0
 8003c9a:	0940      	lsrs	r0, r0, #5
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop

08003ca0 <RCC_GetClocksFreq>:
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003ca0:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <RCC_GetClocksFreq+0x80>)
 8003ca2:	6893      	ldr	r3, [r2, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8003ca8:	2b04      	cmp	r3, #4
{
 8003caa:	b410      	push	{r4}
  switch (tmp)
 8003cac:	d01b      	beq.n	8003ce6 <RCC_GetClocksFreq+0x46>
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d01c      	beq.n	8003cec <RCC_GetClocksFreq+0x4c>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <RCC_GetClocksFreq+0x84>)
 8003cb4:	6003      	str	r3, [r0, #0]
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003cb6:	4a1a      	ldr	r2, [pc, #104]	; (8003d20 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8003cb8:	491b      	ldr	r1, [pc, #108]	; (8003d28 <RCC_GetClocksFreq+0x88>)
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003cba:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
 8003cbc:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8003cc0:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003cc2:	40e3      	lsrs	r3, r4
 8003cc4:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003cc6:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8003cc8:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8003ccc:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003cce:	fa23 f404 	lsr.w	r4, r3, r4
 8003cd2:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003cd4:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8003cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
  tmp = tmp >> 13;
 8003cda:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8003cde:	5c8a      	ldrb	r2, [r1, r2]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003ce0:	40d3      	lsrs	r3, r2
 8003ce2:	60c3      	str	r3, [r0, #12]
}
 8003ce4:	4770      	bx	lr
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <RCC_GetClocksFreq+0x8c>)
 8003ce8:	6003      	str	r3, [r0, #0]
    break;
 8003cea:	e7e4      	b.n	8003cb6 <RCC_GetClocksFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003cec:	6854      	ldr	r4, [r2, #4]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cee:	6851      	ldr	r1, [r2, #4]
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cf0:	6852      	ldr	r2, [r2, #4]
    if (pllsource != 0)
 8003cf2:	0263      	lsls	r3, r4, #9
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003cf4:	f3c2 1288 	ubfx	r2, r2, #6, #9
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cfc:	bf4c      	ite	mi
 8003cfe:	4b0b      	ldrmi	r3, [pc, #44]	; (8003d2c <RCC_GetClocksFreq+0x8c>)
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003d00:	4b08      	ldrpl	r3, [pc, #32]	; (8003d24 <RCC_GetClocksFreq+0x84>)
 8003d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d06:	fb03 f302 	mul.w	r3, r3, r2
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <RCC_GetClocksFreq+0x80>)
 8003d0c:	6852      	ldr	r2, [r2, #4]
 8003d0e:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003d12:	3201      	adds	r2, #1
 8003d14:	0052      	lsls	r2, r2, #1
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8003d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d1a:	6003      	str	r3, [r0, #0]
    break;
 8003d1c:	e7cb      	b.n	8003cb6 <RCC_GetClocksFreq+0x16>
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	00f42400 	.word	0x00f42400
 8003d28:	200004b8 	.word	0x200004b8
 8003d2c:	00b71b00 	.word	0x00b71b00

08003d30 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <RCC_AHB1PeriphClockCmd+0x14>)
 8003d32:	6b13      	ldr	r3, [r2, #48]	; 0x30
  if (NewState != DISABLE)
 8003d34:	b919      	cbnz	r1, 8003d3e <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003d36:	ea23 0000 	bic.w	r0, r3, r0
 8003d3a:	6310      	str	r0, [r2, #48]	; 0x30
 8003d3c:	4770      	bx	lr
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003d3e:	4318      	orrs	r0, r3
 8003d40:	6310      	str	r0, [r2, #48]	; 0x30
 8003d42:	4770      	bx	lr
 8003d44:	40023800 	.word	0x40023800

08003d48 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <RCC_AHB2PeriphClockCmd+0x14>)
 8003d4a:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (NewState != DISABLE)
 8003d4c:	b919      	cbnz	r1, 8003d56 <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8003d4e:	ea23 0000 	bic.w	r0, r3, r0
 8003d52:	6350      	str	r0, [r2, #52]	; 0x34
 8003d54:	4770      	bx	lr
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003d56:	4318      	orrs	r0, r3
 8003d58:	6350      	str	r0, [r2, #52]	; 0x34
 8003d5a:	4770      	bx	lr
 8003d5c:	40023800 	.word	0x40023800

08003d60 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <RCC_APB1PeriphClockCmd+0x14>)
 8003d62:	6c13      	ldr	r3, [r2, #64]	; 0x40
  if (NewState != DISABLE)
 8003d64:	b919      	cbnz	r1, 8003d6e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003d66:	ea23 0000 	bic.w	r0, r3, r0
 8003d6a:	6410      	str	r0, [r2, #64]	; 0x40
 8003d6c:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 8003d6e:	4318      	orrs	r0, r3
 8003d70:	6410      	str	r0, [r2, #64]	; 0x40
 8003d72:	4770      	bx	lr
 8003d74:	40023800 	.word	0x40023800

08003d78 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003d78:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <RCC_APB2PeriphClockCmd+0x14>)
 8003d7a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (NewState != DISABLE)
 8003d7c:	b919      	cbnz	r1, 8003d86 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003d7e:	ea23 0000 	bic.w	r0, r3, r0
 8003d82:	6450      	str	r0, [r2, #68]	; 0x44
 8003d84:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8003d86:	4318      	orrs	r0, r3
 8003d88:	6450      	str	r0, [r2, #68]	; 0x44
 8003d8a:	4770      	bx	lr
 8003d8c:	40023800 	.word	0x40023800

08003d90 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <RCC_APB1PeriphResetCmd+0x14>)
 8003d92:	6a13      	ldr	r3, [r2, #32]
  if (NewState != DISABLE)
 8003d94:	b919      	cbnz	r1, 8003d9e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003d96:	ea23 0000 	bic.w	r0, r3, r0
 8003d9a:	6210      	str	r0, [r2, #32]
 8003d9c:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003d9e:	4318      	orrs	r0, r3
 8003da0:	6210      	str	r0, [r2, #32]
 8003da2:	4770      	bx	lr
 8003da4:	40023800 	.word	0x40023800

08003da8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003da8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003dac:	4b02      	ldr	r3, [pc, #8]	; (8003db8 <NVIC_PriorityGroupConfig+0x10>)
 8003dae:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8003db2:	60d8      	str	r0, [r3, #12]
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003dbc:	78c3      	ldrb	r3, [r0, #3]
 8003dbe:	b95b      	cbnz	r3, 8003dd8 <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003dc0:	7803      	ldrb	r3, [r0, #0]
 8003dc2:	4816      	ldr	r0, [pc, #88]	; (8003e1c <NVIC_Init+0x60>)
 8003dc4:	095a      	lsrs	r2, r3, #5
 8003dc6:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003dd2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }
}
 8003dd6:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003dd8:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <NVIC_Init+0x64>)
{
 8003dda:	b470      	push	{r4, r5, r6}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003ddc:	68d2      	ldr	r2, [r2, #12]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003dde:	7843      	ldrb	r3, [r0, #1]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003de0:	7886      	ldrb	r6, [r0, #2]
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003de2:	7801      	ldrb	r1, [r0, #0]
 8003de4:	480d      	ldr	r0, [pc, #52]	; (8003e1c <NVIC_Init+0x60>)
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003de6:	43d2      	mvns	r2, r2
 8003de8:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8003dec:	f1c2 0504 	rsb	r5, r2, #4
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003df0:	b2ed      	uxtb	r5, r5
    tmpsub = tmpsub >> tmppriority;
 8003df2:	240f      	movs	r4, #15
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003df4:	40ab      	lsls	r3, r5
    tmpsub = tmpsub >> tmppriority;
 8003df6:	fa44 f202 	asr.w	r2, r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003dfa:	4032      	ands	r2, r6
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003dfc:	b2db      	uxtb	r3, r3
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003dfe:	4313      	orrs	r3, r2
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003e00:	1844      	adds	r4, r0, r1
    tmppriority = tmppriority << 0x04;
 8003e02:	011b      	lsls	r3, r3, #4
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003e04:	f001 051f 	and.w	r5, r1, #31
 8003e08:	2201      	movs	r2, #1
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003e0a:	0949      	lsrs	r1, r1, #5
    tmppriority = tmppriority << 0x04;
 8003e0c:	b2db      	uxtb	r3, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003e0e:	40aa      	lsls	r2, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003e10:	f884 3300 	strb.w	r3, [r4, #768]	; 0x300
}
 8003e14:	bc70      	pop	{r4, r5, r6}
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003e16:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
 8003e1a:	4770      	bx	lr
 8003e1c:	e000e100 	.word	0xe000e100
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <SysTick_CLKSourceConfig+0x14>)
 8003e26:	6813      	ldr	r3, [r2, #0]
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8003e28:	2804      	cmp	r0, #4
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003e2a:	bf0c      	ite	eq
 8003e2c:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8003e30:	f023 0304 	bicne.w	r3, r3, #4
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4770      	bx	lr
 8003e38:	e000e010 	.word	0xe000e010

08003e3c <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8003e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	b089      	sub	sp, #36	; 0x24
 8003e42:	4604      	mov	r4, r0
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8003e44:	f000 fe10 	bl	8004a68 <USB_OTG_IsDeviceMode>
 8003e48:	b918      	cbnz	r0, 8003e52 <USBD_OTG_ISR_Handler+0x16>
  uint32_t retval = 0;
 8003e4a:	2000      	movs	r0, #0
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
}
 8003e4c:	b009      	add	sp, #36	; 0x24
 8003e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8003e52:	4620      	mov	r0, r4
 8003e54:	f000 fe0e 	bl	8004a74 <USB_OTG_ReadCoreItr>
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8003e58:	4681      	mov	r9, r0
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d0f5      	beq.n	8003e4a <USBD_OTG_ISR_Handler+0xe>
    if (gintr_status.b.outepintr)
 8003e5e:	f3c0 4807 	ubfx	r8, r0, #16, #8
 8003e62:	f018 0008 	ands.w	r0, r8, #8
 8003e66:	f040 8120 	bne.w	80040aa <USBD_OTG_ISR_Handler+0x26e>
    if (gintr_status.b.inepint)
 8003e6a:	f018 0f04 	tst.w	r8, #4
 8003e6e:	f040 80be 	bne.w	8003fee <USBD_OTG_ISR_Handler+0x1b2>
    if (gintr_status.b.modemismatch)
 8003e72:	fa5f f589 	uxtb.w	r5, r9
 8003e76:	07ab      	lsls	r3, r5, #30
 8003e78:	d42c      	bmi.n	8003ed4 <USBD_OTG_ISR_Handler+0x98>
    if (gintr_status.b.wkupintr)
 8003e7a:	f1b9 0f00 	cmp.w	r9, #0
 8003e7e:	f2c0 82b5 	blt.w	80043ec <USBD_OTG_ISR_Handler+0x5b0>
    if (gintr_status.b.usbsuspend)
 8003e82:	f3c9 2607 	ubfx	r6, r9, #8, #8
 8003e86:	0737      	lsls	r7, r6, #28
 8003e88:	f100 8185 	bmi.w	8004196 <USBD_OTG_ISR_Handler+0x35a>
    if (gintr_status.b.sofintr)
 8003e8c:	0729      	lsls	r1, r5, #28
 8003e8e:	f100 8178 	bmi.w	8004182 <USBD_OTG_ISR_Handler+0x346>
    if (gintr_status.b.rxstsqlvl)
 8003e92:	06ea      	lsls	r2, r5, #27
 8003e94:	f100 814e 	bmi.w	8004134 <USBD_OTG_ISR_Handler+0x2f8>
    if (gintr_status.b.usbreset)
 8003e98:	06f3      	lsls	r3, r6, #27
 8003e9a:	d41f      	bmi.n	8003edc <USBD_OTG_ISR_Handler+0xa0>
    if (gintr_status.b.enumdone)
 8003e9c:	06b7      	lsls	r7, r6, #26
 8003e9e:	f100 81c3 	bmi.w	8004228 <USBD_OTG_ISR_Handler+0x3ec>
    if (gintr_status.b.incomplisoin)
 8003ea2:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8003ea6:	06ee      	lsls	r6, r5, #27
 8003ea8:	f100 81af 	bmi.w	800420a <USBD_OTG_ISR_Handler+0x3ce>
    if (gintr_status.b.incomplisoout)
 8003eac:	06a9      	lsls	r1, r5, #26
 8003eae:	f100 8216 	bmi.w	80042de <USBD_OTG_ISR_Handler+0x4a2>
    if (gintr_status.b.sessreqintr)
 8003eb2:	f019 4f80 	tst.w	r9, #1073741824	; 0x40000000
 8003eb6:	f040 819d 	bne.w	80041f4 <USBD_OTG_ISR_Handler+0x3b8>
    if (gintr_status.b.otgintr)
 8003eba:	f019 0f04 	tst.w	r9, #4
 8003ebe:	d0c5      	beq.n	8003e4c <USBD_OTG_ISR_Handler+0x10>
static uint32_t DCD_OTG_ISR(USB_OTG_CORE_HANDLE *pdev)
{

  USB_OTG_GOTGINT_TypeDef  gotgint;

  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8003ec0:	68e3      	ldr	r3, [r4, #12]
 8003ec2:	685d      	ldr	r5, [r3, #4]
  
  if (gotgint.b.sesenddet)
 8003ec4:	076a      	lsls	r2, r5, #29
 8003ec6:	f100 828a 	bmi.w	80043de <USBD_OTG_ISR_Handler+0x5a2>
      retval |= DCD_OTG_ISR(pdev);
 8003eca:	2001      	movs	r0, #1
  {
    USBD_DCD_INT_fops->DevDisconnected (pdev);
  }
  /* Clear OTG interrupt */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32); 
 8003ecc:	605d      	str	r5, [r3, #4]
}
 8003ece:	b009      	add	sp, #36	; 0x24
 8003ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003ed4:	68e3      	ldr	r3, [r4, #12]
      gintsts.b.modemismatch = 1;
 8003ed6:	2202      	movs	r2, #2
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003ed8:	615a      	str	r2, [r3, #20]
 8003eda:	e7ce      	b.n	8003e7a <USBD_OTG_ISR_Handler+0x3e>
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8003edc:	6922      	ldr	r2, [r4, #16]
 8003ede:	6853      	ldr	r3, [r2, #4]
  dctl.d32 = 0;
 8003ee0:	2700      	movs	r7, #0
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	6053      	str	r3, [r2, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 8003ee8:	4639      	mov	r1, r7
 8003eea:	4620      	mov	r0, r4
 8003eec:	f000 fd82 	bl	80049f4 <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003ef0:	7862      	ldrb	r2, [r4, #1]
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d05c      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003ef6:	69a0      	ldr	r0, [r4, #24]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003ef8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003efa:	23ff      	movs	r3, #255	; 0xff
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003efc:	2a01      	cmp	r2, #1
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003efe:	6083      	str	r3, [r0, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f00:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f02:	d055      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f04:	69e0      	ldr	r0, [r4, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f06:	6da1      	ldr	r1, [r4, #88]	; 0x58
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f08:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f0a:	2a02      	cmp	r2, #2
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f0c:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f0e:	d04f      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f10:	6a20      	ldr	r0, [r4, #32]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f12:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f14:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f16:	2a03      	cmp	r2, #3
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f18:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f1a:	d049      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f1e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f20:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f22:	2a04      	cmp	r2, #4
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f24:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f26:	d043      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f2c:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f2e:	2a05      	cmp	r2, #5
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f30:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f32:	d03d      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f36:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f38:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f3a:	2a06      	cmp	r2, #6
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f3c:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f3e:	d037      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f40:	6b20      	ldr	r0, [r4, #48]	; 0x30
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f42:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f44:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f46:	2a07      	cmp	r2, #7
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f48:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f4a:	d031      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f4e:	6f21      	ldr	r1, [r4, #112]	; 0x70
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f50:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f52:	2a08      	cmp	r2, #8
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f54:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f56:	d02b      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f58:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f5a:	6f61      	ldr	r1, [r4, #116]	; 0x74
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f5c:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f5e:	2a09      	cmp	r2, #9
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f60:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f62:	d025      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f64:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f66:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f68:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f6a:	2a0a      	cmp	r2, #10
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f6c:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f6e:	d01f      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f70:	6c20      	ldr	r0, [r4, #64]	; 0x40
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f72:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f74:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f76:	2a0b      	cmp	r2, #11
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f78:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f7a:	d019      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f7c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f7e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f82:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f84:	2a0c      	cmp	r2, #12
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f86:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f88:	d012      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f8a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f8c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f90:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f92:	2a0d      	cmp	r2, #13
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f94:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003f96:	d00b      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f98:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003f9a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003f9e:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003fa0:	2a0e      	cmp	r2, #14
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003fa2:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003fa4:	d004      	beq.n	8003fb0 <USBD_OTG_ISR_Handler+0x174>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003fa6:	6d21      	ldr	r1, [r4, #80]	; 0x50
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003fa8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003fac:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003fae:	6093      	str	r3, [r2, #8]
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  
  daintmsk.ep.in = 1;
 8003fb0:	2501      	movs	r5, #1
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8003fb2:	6923      	ldr	r3, [r4, #16]
  daintmsk.ep.in = 1;
 8003fb4:	f365 070f 	bfi	r7, r5, #0, #16
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
 8003fbc:	220b      	movs	r2, #11
  daintmsk.ep.out = 1;
 8003fbe:	f365 471f 	bfi	r7, r5, #16, #16
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8003fc2:	6199      	str	r1, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 8003fc4:	61df      	str	r7, [r3, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8003fc6:	615a      	str	r2, [r3, #20]
#endif
  diepmsk.b.xfercompl = 1;
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8003fc8:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8003fca:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devaddr = 0;
 8003fcc:	f36f 120a 	bfc	r2, #4, #7
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8003fd0:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f001 f924 	bl	8005220 <USB_OTG_EP0_OutStart>
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8003fd8:	4b91      	ldr	r3, [pc, #580]	; (8004220 <USBD_OTG_ISR_Handler+0x3e4>)
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003fda:	68e2      	ldr	r2, [r4, #12]
  USBD_DCD_INT_fops->Reset(pdev);
 8003fdc:	681b      	ldr	r3, [r3, #0]
  gintsts.b.usbreset = 1;
 8003fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  USBD_DCD_INT_fops->Reset(pdev);
 8003fe2:	691b      	ldr	r3, [r3, #16]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003fe4:	6151      	str	r1, [r2, #20]
  USBD_DCD_INT_fops->Reset(pdev);
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4798      	blx	r3
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8003fea:	4628      	mov	r0, r5
 8003fec:	e756      	b.n	8003e9c <USBD_OTG_ISR_Handler+0x60>
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f001 f910 	bl	8005214 <USB_OTG_ReadDevAllInEPItr>
  while ( ep_intr )
 8003ff4:	4607      	mov	r7, r0
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	f000 817e 	beq.w	80042f8 <USBD_OTG_ISR_Handler+0x4bc>
 8003ffc:	4626      	mov	r6, r4
 8003ffe:	f104 0818 	add.w	r8, r4, #24
 8004002:	f04f 0b00 	mov.w	fp, #0
      fifoemptymsk = 0x1 << ep->num;  
 8004006:	f8cd 9004 	str.w	r9, [sp, #4]
 800400a:	e023      	b.n	8004054 <USBD_OTG_ISR_Handler+0x218>
      if ( diepint.b.timeout )
 800400c:	071a      	lsls	r2, r3, #28
 800400e:	d503      	bpl.n	8004018 <USBD_OTG_ISR_Handler+0x1dc>
        CLEAR_IN_EP_INTR(epnum, timeout);
 8004010:	f8d8 2000 	ldr.w	r2, [r8]
 8004014:	2308      	movs	r3, #8
 8004016:	6093      	str	r3, [r2, #8]
      if (diepint.b.intktxfemp)
 8004018:	06dd      	lsls	r5, r3, #27
 800401a:	d503      	bpl.n	8004024 <USBD_OTG_ISR_Handler+0x1e8>
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 800401c:	f8d8 2000 	ldr.w	r2, [r8]
 8004020:	2310      	movs	r3, #16
 8004022:	6093      	str	r3, [r2, #8]
      if (diepint.b.inepnakeff)
 8004024:	0658      	lsls	r0, r3, #25
 8004026:	d503      	bpl.n	8004030 <USBD_OTG_ISR_Handler+0x1f4>
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8004028:	f8d8 2000 	ldr.w	r2, [r8]
 800402c:	2340      	movs	r3, #64	; 0x40
 800402e:	6093      	str	r3, [r2, #8]
      if ( diepint.b.epdisabled )
 8004030:	0799      	lsls	r1, r3, #30
 8004032:	d503      	bpl.n	800403c <USBD_OTG_ISR_Handler+0x200>
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 8004034:	f8d8 2000 	ldr.w	r2, [r8]
 8004038:	2302      	movs	r3, #2
 800403a:	6093      	str	r3, [r2, #8]
      if (diepint.b.emptyintr)
 800403c:	061a      	lsls	r2, r3, #24
 800403e:	f100 8180 	bmi.w	8004342 <USBD_OTG_ISR_Handler+0x506>
  while ( ep_intr )
 8004042:	087f      	lsrs	r7, r7, #1
    epnum++;
 8004044:	f10b 0b01 	add.w	fp, fp, #1
 8004048:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800404c:	f108 0804 	add.w	r8, r8, #4
  while ( ep_intr )
 8004050:	f000 8150 	beq.w	80042f4 <USBD_OTG_ISR_Handler+0x4b8>
    if ((ep_intr & 0x1) == 0x01) /* In ITR */
 8004054:	07f8      	lsls	r0, r7, #31
 8004056:	d5f4      	bpl.n	8004042 <USBD_OTG_ISR_Handler+0x206>
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8004058:	6922      	ldr	r2, [r4, #16]
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 800405a:	fa5f fa8b 	uxtb.w	sl, fp
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 800405e:	6910      	ldr	r0, [r2, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8004060:	6b53      	ldr	r3, [r2, #52]	; 0x34
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8004062:	eb04 018a 	add.w	r1, r4, sl, lsl #2
  msk |= ((emp >> epnum) & 0x1) << 7;
 8004066:	fa23 f30a 	lsr.w	r3, r3, sl
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 800406a:	6989      	ldr	r1, [r1, #24]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800406c:	01db      	lsls	r3, r3, #7
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 800406e:	6889      	ldr	r1, [r1, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8004070:	b2db      	uxtb	r3, r3
 8004072:	4303      	orrs	r3, r0
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8004074:	400b      	ands	r3, r1
      if ( diepint.b.xfercompl )
 8004076:	b2db      	uxtb	r3, r3
 8004078:	07d9      	lsls	r1, r3, #31
 800407a:	d5c7      	bpl.n	800400c <USBD_OTG_ISR_Handler+0x1d0>
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 800407c:	6b53      	ldr	r3, [r2, #52]	; 0x34
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 800407e:	4968      	ldr	r1, [pc, #416]	; (8004220 <USBD_OTG_ISR_Handler+0x3e4>)
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8004080:	f8d8 0000 	ldr.w	r0, [r8]
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8004084:	6809      	ldr	r1, [r1, #0]
        fifoemptymsk = 0x1 << epnum;
 8004086:	2501      	movs	r5, #1
 8004088:	fa05 f50b 	lsl.w	r5, r5, fp
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 800408c:	ea23 0305 	bic.w	r3, r3, r5
 8004090:	6353      	str	r3, [r2, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8004092:	2201      	movs	r2, #1
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8004094:	684b      	ldr	r3, [r1, #4]
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8004096:	6082      	str	r2, [r0, #8]
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8004098:	4651      	mov	r1, sl
 800409a:	4620      	mov	r0, r4
 800409c:	4798      	blx	r3
        if (pdev->cfg.dma_enable == 1)
 800409e:	78e5      	ldrb	r5, [r4, #3]
 80040a0:	2d01      	cmp	r5, #1
 80040a2:	f000 81bd 	beq.w	8004420 <USBD_OTG_ISR_Handler+0x5e4>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e7b0      	b.n	800400c <USBD_OTG_ISR_Handler+0x1d0>
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 80040aa:	4620      	mov	r0, r4
 80040ac:	f001 f8a4 	bl	80051f8 <USB_OTG_ReadDevAllOutEp_itr>
  while ( ep_intr )
 80040b0:	4605      	mov	r5, r0
 80040b2:	2800      	cmp	r0, #0
 80040b4:	f000 8122 	beq.w	80042fc <USBD_OTG_ISR_Handler+0x4c0>
 80040b8:	f104 0654 	add.w	r6, r4, #84	; 0x54
 80040bc:	46a3      	mov	fp, r4
 80040be:	2700      	movs	r7, #0
 80040c0:	e008      	b.n	80040d4 <USBD_OTG_ISR_Handler+0x298>
 80040c2:	086d      	lsrs	r5, r5, #1
    epnum++;
 80040c4:	f107 0701 	add.w	r7, r7, #1
 80040c8:	f106 0604 	add.w	r6, r6, #4
 80040cc:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
  while ( ep_intr )
 80040d0:	f000 8114 	beq.w	80042fc <USBD_OTG_ISR_Handler+0x4c0>
    if (ep_intr&0x1)
 80040d4:	07e8      	lsls	r0, r5, #31
 80040d6:	d5f4      	bpl.n	80040c2 <USBD_OTG_ISR_Handler+0x286>
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 80040d8:	fa5f fa87 	uxtb.w	sl, r7
 80040dc:	4651      	mov	r1, sl
 80040de:	4620      	mov	r0, r4
 80040e0:	f001 f890 	bl	8005204 <USB_OTG_ReadDevOutEP_itr>
      if ( doepint.b.xfercompl )
 80040e4:	b2c0      	uxtb	r0, r0
 80040e6:	07c1      	lsls	r1, r0, #31
 80040e8:	d513      	bpl.n	8004112 <USBD_OTG_ISR_Handler+0x2d6>
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 80040ea:	6832      	ldr	r2, [r6, #0]
 80040ec:	2301      	movs	r3, #1
 80040ee:	6093      	str	r3, [r2, #8]
        if (pdev->cfg.dma_enable == 1)
 80040f0:	78e3      	ldrb	r3, [r4, #3]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	f000 81af 	beq.w	8004456 <USBD_OTG_ISR_Handler+0x61a>
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 80040f8:	4b49      	ldr	r3, [pc, #292]	; (8004220 <USBD_OTG_ISR_Handler+0x3e4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4651      	mov	r1, sl
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4620      	mov	r0, r4
 8004102:	4798      	blx	r3
        if (pdev->cfg.dma_enable == 1)
 8004104:	f894 a003 	ldrb.w	sl, [r4, #3]
 8004108:	f1ba 0f01 	cmp.w	sl, #1
 800410c:	f000 8196 	beq.w	800443c <USBD_OTG_ISR_Handler+0x600>
 8004110:	2001      	movs	r0, #1
      if ( doepint.b.epdisabled )
 8004112:	0782      	lsls	r2, r0, #30
 8004114:	d503      	bpl.n	800411e <USBD_OTG_ISR_Handler+0x2e2>
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 8004116:	6833      	ldr	r3, [r6, #0]
 8004118:	2202      	movs	r2, #2
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	4610      	mov	r0, r2
      if ( doepint.b.setup )
 800411e:	0703      	lsls	r3, r0, #28
 8004120:	d5cf      	bpl.n	80040c2 <USBD_OTG_ISR_Handler+0x286>
        USBD_DCD_INT_fops->SetupStage(pdev);
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <USBD_OTG_ISR_Handler+0x3e4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4620      	mov	r0, r4
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 800412c:	6832      	ldr	r2, [r6, #0]
 800412e:	2308      	movs	r3, #8
 8004130:	6093      	str	r3, [r2, #8]
 8004132:	e7c6      	b.n	80040c2 <USBD_OTG_ISR_Handler+0x286>
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 8004134:	68e3      	ldr	r3, [r4, #12]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	f022 0210 	bic.w	r2, r2, #16
 800413c:	619a      	str	r2, [r3, #24]
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 800413e:	6a1d      	ldr	r5, [r3, #32]
  switch (status.b.pktsts)
 8004140:	f3c5 4243 	ubfx	r2, r5, #17, #4
 8004144:	2a02      	cmp	r2, #2
  ep = &pdev->dev.out_ep[status.b.epnum];
 8004146:	f005 070f 	and.w	r7, r5, #15
  switch (status.b.pktsts)
 800414a:	f000 80d9 	beq.w	8004300 <USBD_OTG_ISR_Handler+0x4c4>
 800414e:	2a06      	cmp	r2, #6
 8004150:	d111      	bne.n	8004176 <USBD_OTG_ISR_Handler+0x33a>
    ep->xfer_count += status.b.bcnt;
 8004152:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004156:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 800415a:	2208      	movs	r2, #8
 800415c:	f204 51cc 	addw	r1, r4, #1484	; 0x5cc
 8004160:	4620      	mov	r0, r4
 8004162:	f000 f9db 	bl	800451c <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8004166:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800416a:	68e3      	ldr	r3, [r4, #12]
 800416c:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8004170:	4415      	add	r5, r2
 8004172:	f8c7 538c 	str.w	r5, [r7, #908]	; 0x38c
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	f042 0210 	orr.w	r2, r2, #16
 800417c:	619a      	str	r2, [r3, #24]
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 800417e:	2001      	movs	r0, #1
 8004180:	e68a      	b.n	8003e98 <USBD_OTG_ISR_Handler+0x5c>
  USBD_DCD_INT_fops->SOF(pdev);
 8004182:	4b27      	ldr	r3, [pc, #156]	; (8004220 <USBD_OTG_ISR_Handler+0x3e4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4620      	mov	r0, r4
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4798      	blx	r3
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 800418c:	68e3      	ldr	r3, [r4, #12]
  GINTSTS.b.sofintr = 1;
 800418e:	2208      	movs	r2, #8
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8004190:	615a      	str	r2, [r3, #20]
      retval |= DCD_HandleSof_ISR(pdev);
 8004192:	2001      	movs	r0, #1
 8004194:	e67d      	b.n	8003e92 <USBD_OTG_ISR_Handler+0x56>
  USBD_DCD_INT_fops->Suspend (pdev);      
 8004196:	4b22      	ldr	r3, [pc, #136]	; (8004220 <USBD_OTG_ISR_Handler+0x3e4>)
  prev_status = pdev->dev.device_status;
 8004198:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
  USBD_DCD_INT_fops->Suspend (pdev);      
 800419c:	681b      	ldr	r3, [r3, #0]
  __IO uint8_t prev_status = 0;
 800419e:	2100      	movs	r1, #0
  USBD_DCD_INT_fops->Suspend (pdev);      
 80041a0:	695b      	ldr	r3, [r3, #20]
  __IO uint8_t prev_status = 0;
 80041a2:	f88d 100f 	strb.w	r1, [sp, #15]
  USBD_DCD_INT_fops->Suspend (pdev);      
 80041a6:	4620      	mov	r0, r4
  prev_status = pdev->dev.device_status;
 80041a8:	f88d 200f 	strb.w	r2, [sp, #15]
  USBD_DCD_INT_fops->Suspend (pdev);      
 80041ac:	4798      	blx	r3
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80041ae:	6922      	ldr	r2, [r4, #16]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80041b0:	68e3      	ldr	r3, [r4, #12]
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80041b2:	6891      	ldr	r1, [r2, #8]
  gintsts.b.usbsuspend = 1;
 80041b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80041b8:	615a      	str	r2, [r3, #20]
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 80041ba:	7aa3      	ldrb	r3, [r4, #10]
 80041bc:	b1c3      	cbz	r3, 80041f0 <USBD_OTG_ISR_Handler+0x3b4>
 80041be:	07c8      	lsls	r0, r1, #31
 80041c0:	d516      	bpl.n	80041f0 <USBD_OTG_ISR_Handler+0x3b4>
 80041c2:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d112      	bne.n	80041f0 <USBD_OTG_ISR_Handler+0x3b4>
    (prev_status  == USB_OTG_CONFIGURED))
 80041ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    (pdev->dev.connection_status == 1) && 
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d10e      	bne.n	80041f0 <USBD_OTG_ISR_Handler+0x3b4>
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 80041d2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 80041d6:	4913      	ldr	r1, [pc, #76]	; (8004224 <USBD_OTG_ISR_Handler+0x3e8>)
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f042 0203 	orr.w	r2, r2, #3
 80041e6:	601a      	str	r2, [r3, #0]
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 80041e8:	690b      	ldr	r3, [r1, #16]
 80041ea:	f043 0306 	orr.w	r3, r3, #6
 80041ee:	610b      	str	r3, [r1, #16]
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 80041f0:	2001      	movs	r0, #1
 80041f2:	e64b      	b.n	8003e8c <USBD_OTG_ISR_Handler+0x50>
  USBD_DCD_INT_fops->DevConnected (pdev);
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <USBD_OTG_ISR_Handler+0x3e4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4620      	mov	r0, r4
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	4798      	blx	r3
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);   
 80041fe:	68e3      	ldr	r3, [r4, #12]
  gintsts.b.sessreqintr = 1;
 8004200:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);   
 8004204:	615a      	str	r2, [r3, #20]
      retval |= DCD_SessionRequest_ISR(pdev);
 8004206:	2001      	movs	r0, #1
 8004208:	e657      	b.n	8003eba <USBD_OTG_ISR_Handler+0x7e>
  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <USBD_OTG_ISR_Handler+0x3e4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4620      	mov	r0, r4
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4798      	blx	r3
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8004214:	68e3      	ldr	r3, [r4, #12]
  gintsts.b.incomplisoin = 1;
 8004216:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800421a:	615a      	str	r2, [r3, #20]
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 800421c:	2001      	movs	r0, #1
 800421e:	e645      	b.n	8003eac <USBD_OTG_ISR_Handler+0x70>
 8004220:	200004f4 	.word	0x200004f4
 8004224:	e000ed00 	.word	0xe000ed00
  USB_OTG_EP0Activate(pdev);
 8004228:	4620      	mov	r0, r4
 800422a:	f000 fe5d 	bl	8004ee8 <USB_OTG_EP0Activate>
  RCC_GetClocksFreq(&RCC_Clocks);
 800422e:	a804      	add	r0, sp, #16
 8004230:	f7ff fd36 	bl	8003ca0 <RCC_GetClocksFreq>
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8004234:	68e3      	ldr	r3, [r4, #12]
  hclk = RCC_Clocks.HCLK_Frequency;
 8004236:	9e05      	ldr	r6, [sp, #20]
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8004238:	68dd      	ldr	r5, [r3, #12]
  gusbcfg.b.usbtrdtim = 0;
 800423a:	f36f 258d 	bfc	r5, #10, #4
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 800423e:	60dd      	str	r5, [r3, #12]
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8004240:	4620      	mov	r0, r4
 8004242:	f000 fe47 	bl	8004ed4 <USB_OTG_GetDeviceSpeed>
 8004246:	2803      	cmp	r0, #3
 8004248:	f000 810e 	beq.w	8004468 <USBD_OTG_ISR_Handler+0x62c>
    if((hclk >= 15000000)&&(hclk < 16000000))
 800424c:	4b99      	ldr	r3, [pc, #612]	; (80044b4 <USBD_OTG_ISR_Handler+0x678>)
 800424e:	4a9a      	ldr	r2, [pc, #616]	; (80044b8 <USBD_OTG_ISR_Handler+0x67c>)
 8004250:	4433      	add	r3, r6
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8004252:	2001      	movs	r0, #1
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ; 
 8004254:	2140      	movs	r1, #64	; 0x40
    if((hclk >= 15000000)&&(hclk < 16000000))
 8004256:	4293      	cmp	r3, r2
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8004258:	70a0      	strb	r0, [r4, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ; 
 800425a:	80a1      	strh	r1, [r4, #4]
    if((hclk >= 15000000)&&(hclk < 16000000))
 800425c:	d96d      	bls.n	800433a <USBD_OTG_ISR_Handler+0x4fe>
    else if((hclk >= 16000000)&&(hclk < 17100000))
 800425e:	f5a6 0374 	sub.w	r3, r6, #15990784	; 0xf40000
 8004262:	4a96      	ldr	r2, [pc, #600]	; (80044bc <USBD_OTG_ISR_Handler+0x680>)
 8004264:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8004268:	4293      	cmp	r3, r2
 800426a:	f240 8106 	bls.w	800447a <USBD_OTG_ISR_Handler+0x63e>
    else if((hclk >= 17100000)&&(hclk < 18400000))
 800426e:	4b94      	ldr	r3, [pc, #592]	; (80044c0 <USBD_OTG_ISR_Handler+0x684>)
 8004270:	4a94      	ldr	r2, [pc, #592]	; (80044c4 <USBD_OTG_ISR_Handler+0x688>)
 8004272:	4433      	add	r3, r6
 8004274:	4293      	cmp	r3, r2
 8004276:	f240 8104 	bls.w	8004482 <USBD_OTG_ISR_Handler+0x646>
    else if((hclk >= 18400000)&&(hclk < 20000000))
 800427a:	f1a6 738c 	sub.w	r3, r6, #18350080	; 0x1180000
 800427e:	4a92      	ldr	r2, [pc, #584]	; (80044c8 <USBD_OTG_ISR_Handler+0x68c>)
 8004280:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8004284:	4293      	cmp	r3, r2
 8004286:	f240 8100 	bls.w	800448a <USBD_OTG_ISR_Handler+0x64e>
    else if((hclk >= 20000000)&&(hclk < 21800000))
 800428a:	4b90      	ldr	r3, [pc, #576]	; (80044cc <USBD_OTG_ISR_Handler+0x690>)
 800428c:	4a90      	ldr	r2, [pc, #576]	; (80044d0 <USBD_OTG_ISR_Handler+0x694>)
 800428e:	4433      	add	r3, r6
 8004290:	4293      	cmp	r3, r2
 8004292:	f240 80fe 	bls.w	8004492 <USBD_OTG_ISR_Handler+0x656>
    else if((hclk >= 21800000)&&(hclk < 24000000))
 8004296:	4b8f      	ldr	r3, [pc, #572]	; (80044d4 <USBD_OTG_ISR_Handler+0x698>)
 8004298:	4a8f      	ldr	r2, [pc, #572]	; (80044d8 <USBD_OTG_ISR_Handler+0x69c>)
 800429a:	4433      	add	r3, r6
 800429c:	4293      	cmp	r3, r2
 800429e:	f240 80fc 	bls.w	800449a <USBD_OTG_ISR_Handler+0x65e>
    else if((hclk >= 24000000)&&(hclk < 26600000))
 80042a2:	f1a6 73b7 	sub.w	r3, r6, #23986176	; 0x16e0000
 80042a6:	4a8d      	ldr	r2, [pc, #564]	; (80044dc <USBD_OTG_ISR_Handler+0x6a0>)
 80042a8:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80042ac:	4293      	cmp	r3, r2
 80042ae:	f240 80f8 	bls.w	80044a2 <USBD_OTG_ISR_Handler+0x666>
    else if((hclk >= 26600000)&&(hclk < 30000000))
 80042b2:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <USBD_OTG_ISR_Handler+0x6a4>)
 80042b4:	4a8b      	ldr	r2, [pc, #556]	; (80044e4 <USBD_OTG_ISR_Handler+0x6a8>)
 80042b6:	4433      	add	r3, r6
 80042b8:	4293      	cmp	r3, r2
 80042ba:	f240 80f6 	bls.w	80044aa <USBD_OTG_ISR_Handler+0x66e>
    else if((hclk >= 30000000)&&(hclk < 34300000))
 80042be:	4b8a      	ldr	r3, [pc, #552]	; (80044e8 <USBD_OTG_ISR_Handler+0x6ac>)
 80042c0:	4a8a      	ldr	r2, [pc, #552]	; (80044ec <USBD_OTG_ISR_Handler+0x6b0>)
 80042c2:	4433      	add	r3, r6
 80042c4:	4293      	cmp	r3, r2
      gusbcfg.b.usbtrdtim= 0x6;
 80042c6:	bf94      	ite	ls
 80042c8:	2306      	movls	r3, #6
      gusbcfg.b.usbtrdtim = 0x5;
 80042ca:	2305      	movhi	r3, #5
 80042cc:	f363 258d 	bfi	r5, r3, #10, #4
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80042d0:	68e3      	ldr	r3, [r4, #12]
  gintsts.b.enumdone = 1;
 80042d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80042d6:	60dd      	str	r5, [r3, #12]
      retval |= DCD_HandleEnumDone_ISR(pdev);
 80042d8:	2001      	movs	r0, #1
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 80042da:	615a      	str	r2, [r3, #20]
 80042dc:	e5e1      	b.n	8003ea2 <USBD_OTG_ISR_Handler+0x66>
  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 80042de:	4b84      	ldr	r3, [pc, #528]	; (80044f0 <USBD_OTG_ISR_Handler+0x6b4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4620      	mov	r0, r4
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4798      	blx	r3
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80042e8:	68e3      	ldr	r3, [r4, #12]
  gintsts.b.incomplisoout = 1;
 80042ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80042ee:	615a      	str	r2, [r3, #20]
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 80042f0:	2001      	movs	r0, #1
 80042f2:	e5de      	b.n	8003eb2 <USBD_OTG_ISR_Handler+0x76>
 80042f4:	f8dd 9004 	ldr.w	r9, [sp, #4]
      retval |= DCD_HandleInEP_ISR(pdev);
 80042f8:	2001      	movs	r0, #1
 80042fa:	e5ba      	b.n	8003e72 <USBD_OTG_ISR_Handler+0x36>
      retval |= DCD_HandleOutEP_ISR(pdev);
 80042fc:	2001      	movs	r0, #1
 80042fe:	e5b4      	b.n	8003e6a <USBD_OTG_ISR_Handler+0x2e>
    if (status.b.bcnt)
 8004300:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8004304:	422a      	tst	r2, r5
 8004306:	f43f af36 	beq.w	8004176 <USBD_OTG_ISR_Handler+0x33a>
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 800430a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800430e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8004312:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8004316:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 800431a:	462a      	mov	r2, r5
 800431c:	4620      	mov	r0, r4
 800431e:	f000 f8fd 	bl	800451c <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 8004322:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
      ep->xfer_count += status.b.bcnt;
 8004326:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800432a:	68e3      	ldr	r3, [r4, #12]
      ep->xfer_buff += status.b.bcnt;
 800432c:	4429      	add	r1, r5
      ep->xfer_count += status.b.bcnt;
 800432e:	442a      	add	r2, r5
      ep->xfer_buff += status.b.bcnt;
 8004330:	f8c7 1380 	str.w	r1, [r7, #896]	; 0x380
      ep->xfer_count += status.b.bcnt;
 8004334:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8004338:	e71d      	b.n	8004176 <USBD_OTG_ISR_Handler+0x33a>
      gusbcfg.b.usbtrdtim = 0xE;
 800433a:	230e      	movs	r3, #14
 800433c:	f363 258d 	bfi	r5, r3, #10, #4
 8004340:	e7c6      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
  len = ep->xfer_len - ep->xfer_count;
 8004342:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
 8004346:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
  len32b = (len + 3) / 4;
 800434a:	f8d6 0124 	ldr.w	r0, [r6, #292]	; 0x124
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 800434e:	f8d8 2000 	ldr.w	r2, [r8]
  len = ep->xfer_len - ep->xfer_count;
 8004352:	eba1 0903 	sub.w	r9, r1, r3
  len32b = (len + 3) / 4;
 8004356:	4581      	cmp	r9, r0
 8004358:	bf28      	it	cs
 800435a:	4681      	movcs	r9, r0
 800435c:	f109 0903 	add.w	r9, r9, #3
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8004360:	f8d2 e018 	ldr.w	lr, [r2, #24]
  len32b = (len + 3) / 4;
 8004364:	ea4f 0999 	mov.w	r9, r9, lsr #2
  while  (txstatus.b.txfspcavail > len32b &&
 8004368:	fa1f fe8e 	uxth.w	lr, lr
 800436c:	45ce      	cmp	lr, r9
    len = ep->xfer_len - ep->xfer_count;
 800436e:	eba1 0503 	sub.w	r5, r1, r3
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8004372:	4652      	mov	r2, sl
 8004374:	4620      	mov	r0, r4
  while  (txstatus.b.txfspcavail > len32b &&
 8004376:	f67f ae64 	bls.w	8004042 <USBD_OTG_ISR_Handler+0x206>
 800437a:	428b      	cmp	r3, r1
 800437c:	f4bf ae61 	bcs.w	8004042 <USBD_OTG_ISR_Handler+0x206>
          ep->xfer_count < ep->xfer_len &&
 8004380:	2900      	cmp	r1, #0
 8004382:	f43f ae5e 	beq.w	8004042 <USBD_OTG_ISR_Handler+0x206>
 8004386:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 800438a:	f8d6 1128 	ldr.w	r1, [r6, #296]	; 0x128
 800438e:	429d      	cmp	r5, r3
 8004390:	bf28      	it	cs
 8004392:	461d      	movcs	r5, r3
 8004394:	b2ab      	uxth	r3, r5
 8004396:	f000 f8ad 	bl	80044f4 <USB_OTG_WritePacket>
    ep->xfer_count += len;
 800439a:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    ep->xfer_buff  += len;
 800439e:	f8d6 2128 	ldr.w	r2, [r6, #296]	; 0x128
    if (ep->xfer_len == ep->xfer_count)
 80043a2:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80043a6:	f8d8 0000 	ldr.w	r0, [r8]
    ep->xfer_count += len;
 80043aa:	442b      	add	r3, r5
    len32b = (len + 3) / 4;
 80043ac:	f105 0903 	add.w	r9, r5, #3
    ep->xfer_buff  += len;
 80043b0:	442a      	add	r2, r5
    if (ep->xfer_len == ep->xfer_count)
 80043b2:	428b      	cmp	r3, r1
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80043b4:	f8d0 e018 	ldr.w	lr, [r0, #24]
    ep->xfer_buff  += len;
 80043b8:	f8c6 2128 	str.w	r2, [r6, #296]	; 0x128
    len32b = (len + 3) / 4;
 80043bc:	ea4f 0999 	mov.w	r9, r9, lsr #2
    ep->xfer_count += len;
 80043c0:	f8c6 3134 	str.w	r3, [r6, #308]	; 0x134
    if (ep->xfer_len == ep->xfer_count)
 80043c4:	d1d0      	bne.n	8004368 <USBD_OTG_ISR_Handler+0x52c>
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 
 80043c6:	6925      	ldr	r5, [r4, #16]
      fifoemptymsk = 0x1 << ep->num;  
 80043c8:	f896 011c 	ldrb.w	r0, [r6, #284]	; 0x11c
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 
 80043cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      fifoemptymsk = 0x1 << ep->num;  
 80043ce:	f04f 0c01 	mov.w	ip, #1
 80043d2:	fa0c f000 	lsl.w	r0, ip, r0
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 
 80043d6:	ea22 0200 	bic.w	r2, r2, r0
 80043da:	636a      	str	r2, [r5, #52]	; 0x34
 80043dc:	e7c4      	b.n	8004368 <USBD_OTG_ISR_Handler+0x52c>
    USBD_DCD_INT_fops->DevDisconnected (pdev);
 80043de:	4b44      	ldr	r3, [pc, #272]	; (80044f0 <USBD_OTG_ISR_Handler+0x6b4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4620      	mov	r0, r4
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	4798      	blx	r3
 80043e8:	68e3      	ldr	r3, [r4, #12]
 80043ea:	e56e      	b.n	8003eca <USBD_OTG_ISR_Handler+0x8e>
  if(pdev->cfg.low_power)
 80043ec:	7aa3      	ldrb	r3, [r4, #10]
 80043ee:	b13b      	cbz	r3, 8004400 <USBD_OTG_ISR_Handler+0x5c4>
    power.d32 = USB_OTG_READ_REG32(pdev->regs.PCGCCTL);
 80043f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043f4:	6813      	ldr	r3, [r2, #0]
    power.b.gatehclk = 0;
 80043f6:	f36f 0341 	bfc	r3, #1, #1
    power.b.stoppclk = 0;
 80043fa:	f36f 0300 	bfc	r3, #0, #1
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 80043fe:	6013      	str	r3, [r2, #0]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8004400:	6922      	ldr	r2, [r4, #16]
  USBD_DCD_INT_fops->Resume (pdev);
 8004402:	493b      	ldr	r1, [pc, #236]	; (80044f0 <USBD_OTG_ISR_Handler+0x6b4>)
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8004404:	6853      	ldr	r3, [r2, #4]
  USBD_DCD_INT_fops->Resume (pdev);
 8004406:	6809      	ldr	r1, [r1, #0]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	6053      	str	r3, [r2, #4]
  USBD_DCD_INT_fops->Resume (pdev);
 800440e:	4620      	mov	r0, r4
 8004410:	698b      	ldr	r3, [r1, #24]
 8004412:	4798      	blx	r3
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8004414:	68e3      	ldr	r3, [r4, #12]
  gintsts.b.wkupintr = 1;
 8004416:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800441a:	615a      	str	r2, [r3, #20]
      retval |= DCD_HandleResume_ISR(pdev);
 800441c:	2001      	movs	r0, #1
 800441e:	e530      	b.n	8003e82 <USBD_OTG_ISR_Handler+0x46>
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8004420:	f1bb 0f00 	cmp.w	fp, #0
 8004424:	f47f ae3f 	bne.w	80040a6 <USBD_OTG_ISR_Handler+0x26a>
 8004428:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 800442c:	2b04      	cmp	r3, #4
 800442e:	f47f ae3a 	bne.w	80040a6 <USBD_OTG_ISR_Handler+0x26a>
            USB_OTG_EP0_OutStart(pdev);
 8004432:	4620      	mov	r0, r4
 8004434:	f000 fef4 	bl	8005220 <USB_OTG_EP0_OutStart>
 8004438:	462b      	mov	r3, r5
 800443a:	e5e7      	b.n	800400c <USBD_OTG_ISR_Handler+0x1d0>
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 800443c:	2f00      	cmp	r7, #0
 800443e:	f47f ae67 	bne.w	8004110 <USBD_OTG_ISR_Handler+0x2d4>
 8004442:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 8004446:	2b05      	cmp	r3, #5
 8004448:	f47f ae62 	bne.w	8004110 <USBD_OTG_ISR_Handler+0x2d4>
            USB_OTG_EP0_OutStart(pdev);
 800444c:	4620      	mov	r0, r4
 800444e:	f000 fee7 	bl	8005220 <USB_OTG_EP0_OutStart>
 8004452:	4650      	mov	r0, sl
 8004454:	e65d      	b.n	8004112 <USBD_OTG_ISR_Handler+0x2d6>
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8004456:	6912      	ldr	r2, [r2, #16]
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8004458:	f8db 337c 	ldr.w	r3, [fp, #892]	; 0x37c
            deptsiz.b.xfersize;
 800445c:	f3c2 0212 	ubfx	r2, r2, #0, #19
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	f8cb 338c 	str.w	r3, [fp, #908]	; 0x38c
 8004466:	e647      	b.n	80040f8 <USBD_OTG_ISR_Handler+0x2bc>
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8004468:	2100      	movs	r1, #0
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800446a:	f44f 7200 	mov.w	r2, #512	; 0x200
    gusbcfg.b.usbtrdtim = 9;
 800446e:	2309      	movs	r3, #9
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8004470:	70a1      	strb	r1, [r4, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8004472:	80a2      	strh	r2, [r4, #4]
    gusbcfg.b.usbtrdtim = 9;
 8004474:	f363 258d 	bfi	r5, r3, #10, #4
 8004478:	e72a      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
      gusbcfg.b.usbtrdtim = 0xD;
 800447a:	230d      	movs	r3, #13
 800447c:	f363 258d 	bfi	r5, r3, #10, #4
 8004480:	e726      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
      gusbcfg.b.usbtrdtim = 0xC;
 8004482:	230c      	movs	r3, #12
 8004484:	f363 258d 	bfi	r5, r3, #10, #4
 8004488:	e722      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
      gusbcfg.b.usbtrdtim = 0xB;
 800448a:	230b      	movs	r3, #11
 800448c:	f363 258d 	bfi	r5, r3, #10, #4
 8004490:	e71e      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
      gusbcfg.b.usbtrdtim = 0xA;
 8004492:	230a      	movs	r3, #10
 8004494:	f363 258d 	bfi	r5, r3, #10, #4
 8004498:	e71a      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
      gusbcfg.b.usbtrdtim = 0x9;
 800449a:	2309      	movs	r3, #9
 800449c:	f363 258d 	bfi	r5, r3, #10, #4
 80044a0:	e716      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
      gusbcfg.b.usbtrdtim = 0x8;
 80044a2:	2308      	movs	r3, #8
 80044a4:	f363 258d 	bfi	r5, r3, #10, #4
 80044a8:	e712      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
      gusbcfg.b.usbtrdtim = 0x7;
 80044aa:	2307      	movs	r3, #7
 80044ac:	f363 258d 	bfi	r5, r3, #10, #4
 80044b0:	e70e      	b.n	80042d0 <USBD_OTG_ISR_Handler+0x494>
 80044b2:	bf00      	nop
 80044b4:	ff1b1e40 	.word	0xff1b1e40
 80044b8:	000f423f 	.word	0x000f423f
 80044bc:	0010c8df 	.word	0x0010c8df
 80044c0:	fefb1320 	.word	0xfefb1320
 80044c4:	0013d61f 	.word	0x0013d61f
 80044c8:	001869ff 	.word	0x001869ff
 80044cc:	feced300 	.word	0xfeced300
 80044d0:	001b773f 	.word	0x001b773f
 80044d4:	feb35bc0 	.word	0xfeb35bc0
 80044d8:	002191bf 	.word	0x002191bf
 80044dc:	0027ac3f 	.word	0x0027ac3f
 80044e0:	fe6a1dc0 	.word	0xfe6a1dc0
 80044e4:	0033e13f 	.word	0x0033e13f
 80044e8:	fe363c80 	.word	0xfe363c80
 80044ec:	00419cdf 	.word	0x00419cdf
 80044f0:	200004f4 	.word	0x200004f4

080044f4 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 80044f4:	b430      	push	{r4, r5}
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 80044f6:	78c4      	ldrb	r4, [r0, #3]
 80044f8:	b96c      	cbnz	r4, 8004516 <USB_OTG_WritePacket+0x22>
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80044fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    count32b =  (len + 3) / 4;
 80044fe:	1cd8      	adds	r0, r3, #3
    for (i = 0; i < count32b; i++)
 8004500:	1080      	asrs	r0, r0, #2
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8004502:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    for (i = 0; i < count32b; i++)
 8004506:	d006      	beq.n	8004516 <USB_OTG_WritePacket+0x22>
 8004508:	4623      	mov	r3, r4
 800450a:	3301      	adds	r3, #1
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 800450c:	f851 2b04 	ldr.w	r2, [r1], #4
 8004510:	602a      	str	r2, [r5, #0]
    for (i = 0; i < count32b; i++)
 8004512:	4298      	cmp	r0, r3
 8004514:	d1f9      	bne.n	800450a <USB_OTG_WritePacket+0x16>
      src+=4;
    }
  }
  return status;
}
 8004516:	2000      	movs	r0, #0
 8004518:	bc30      	pop	{r4, r5}
 800451a:	4770      	bx	lr

0800451c <USB_OTG_ReadPacket>:
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 800451c:	3203      	adds	r2, #3
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for( i = 0; i < count32b; i++)
 800451e:	1092      	asrs	r2, r2, #2
{
 8004520:	b430      	push	{r4, r5}
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8004522:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
  for( i = 0; i < count32b; i++)
 8004526:	d009      	beq.n	800453c <USB_OTG_ReadPacket+0x20>
 8004528:	4608      	mov	r0, r1
 800452a:	2300      	movs	r3, #0
 800452c:	3301      	adds	r3, #1
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 800452e:	682c      	ldr	r4, [r5, #0]
 8004530:	f840 4b04 	str.w	r4, [r0], #4
  for( i = 0; i < count32b; i++)
 8004534:	429a      	cmp	r2, r3
 8004536:	d1f9      	bne.n	800452c <USB_OTG_ReadPacket+0x10>
 8004538:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    dest += 4 ;
  }
  return ((void *)dest);
}
 800453c:	4608      	mov	r0, r1
 800453e:	bc30      	pop	{r4, r5}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop

08004544 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8004546:	2401      	movs	r4, #1
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8004548:	2240      	movs	r2, #64	; 0x40
  pdev->cfg.dma_enable       = 0;
 800454a:	2300      	movs	r3, #0
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 800454c:	42a1      	cmp	r1, r4
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 800454e:	7084      	strb	r4, [r0, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8004550:	8082      	strh	r2, [r0, #4]
  pdev->cfg.dma_enable       = 0;
 8004552:	70c3      	strb	r3, [r0, #3]
  if (coreID == USB_OTG_FS_CORE_ID)
 8004554:	f000 8165 	beq.w	8004822 <USB_OTG_SelectCore+0x2de>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8004558:	2900      	cmp	r1, #0
 800455a:	f000 814f 	beq.w	80047fc <USB_OTG_SelectCore+0x2b8>
 800455e:	7842      	ldrb	r2, [r0, #1]
  else
  {
    /* Do Nothing */
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8004560:	60c3      	str	r3, [r0, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8004562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004566:	6101      	str	r1, [r0, #16]
 8004568:	7806      	ldrb	r6, [r0, #0]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800456a:	2a00      	cmp	r2, #0
 800456c:	f000 816c 	beq.w	8004848 <USB_OTG_SelectCore+0x304>
 8004570:	f44f 6760 	mov.w	r7, #3584	; 0xe00
 8004574:	f44f 6488 	mov.w	r4, #1088	; 0x440
 8004578:	f44f 6180 	mov.w	r1, #1024	; 0x400
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800457c:	f503 6e10 	add.w	lr, r3, #2304	; 0x900
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8004580:	f503 6530 	add.w	r5, r3, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004584:	2a01      	cmp	r2, #1
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004586:	f8c0 e018 	str.w	lr, [r0, #24]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800458a:	6545      	str	r5, [r0, #84]	; 0x54
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800458c:	d07e      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800458e:	f503 6e12 	add.w	lr, r3, #2336	; 0x920
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8004592:	f503 6532 	add.w	r5, r3, #2848	; 0xb20
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004596:	2a02      	cmp	r2, #2
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004598:	f8c0 e01c 	str.w	lr, [r0, #28]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800459c:	6585      	str	r5, [r0, #88]	; 0x58
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800459e:	d075      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80045a0:	f503 6e14 	add.w	lr, r3, #2368	; 0x940
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80045a4:	f503 6534 	add.w	r5, r3, #2880	; 0xb40
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045a8:	2a03      	cmp	r2, #3
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80045aa:	f8c0 e020 	str.w	lr, [r0, #32]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80045ae:	65c5      	str	r5, [r0, #92]	; 0x5c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045b0:	d06c      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80045b2:	f503 6e16 	add.w	lr, r3, #2400	; 0x960
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80045b6:	f503 6536 	add.w	r5, r3, #2912	; 0xb60
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045ba:	2a04      	cmp	r2, #4
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80045bc:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80045c0:	6605      	str	r5, [r0, #96]	; 0x60
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045c2:	d063      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80045c4:	f503 6e18 	add.w	lr, r3, #2432	; 0x980
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80045c8:	f503 6538 	add.w	r5, r3, #2944	; 0xb80
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045cc:	2a05      	cmp	r2, #5
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80045ce:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80045d2:	6645      	str	r5, [r0, #100]	; 0x64
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045d4:	d05a      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80045d6:	f503 6e1a 	add.w	lr, r3, #2464	; 0x9a0
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80045da:	f503 653a 	add.w	r5, r3, #2976	; 0xba0
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045de:	2a06      	cmp	r2, #6
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80045e0:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80045e4:	6685      	str	r5, [r0, #104]	; 0x68
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045e6:	d051      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80045e8:	f503 6e1c 	add.w	lr, r3, #2496	; 0x9c0
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80045ec:	f503 653c 	add.w	r5, r3, #3008	; 0xbc0
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045f0:	2a07      	cmp	r2, #7
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80045f2:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80045f6:	66c5      	str	r5, [r0, #108]	; 0x6c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80045f8:	d048      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80045fa:	f503 6e1e 	add.w	lr, r3, #2528	; 0x9e0
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80045fe:	f503 653e 	add.w	r5, r3, #3040	; 0xbe0
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004602:	2a08      	cmp	r2, #8
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004604:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8004608:	6705      	str	r5, [r0, #112]	; 0x70
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800460a:	d03f      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800460c:	f503 6e20 	add.w	lr, r3, #2560	; 0xa00
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8004610:	f503 6540 	add.w	r5, r3, #3072	; 0xc00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004614:	2a09      	cmp	r2, #9
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004616:	f8c0 e038 	str.w	lr, [r0, #56]	; 0x38
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800461a:	6745      	str	r5, [r0, #116]	; 0x74
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800461c:	d036      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800461e:	f503 6e22 	add.w	lr, r3, #2592	; 0xa20
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8004622:	f503 6542 	add.w	r5, r3, #3104	; 0xc20
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004626:	2a0a      	cmp	r2, #10
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004628:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800462c:	6785      	str	r5, [r0, #120]	; 0x78
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800462e:	d02d      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8004630:	f503 6e24 	add.w	lr, r3, #2624	; 0xa40
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8004634:	f503 6544 	add.w	r5, r3, #3136	; 0xc40
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004638:	2a0b      	cmp	r2, #11
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 800463a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800463e:	67c5      	str	r5, [r0, #124]	; 0x7c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004640:	d024      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8004642:	f503 6e26 	add.w	lr, r3, #2656	; 0xa60
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8004646:	f503 6546 	add.w	r5, r3, #3168	; 0xc60
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800464a:	2a0c      	cmp	r2, #12
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 800464c:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8004650:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004654:	d01a      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8004656:	f503 6e28 	add.w	lr, r3, #2688	; 0xa80
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 800465a:	f503 6548 	add.w	r5, r3, #3200	; 0xc80
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800465e:	2a0d      	cmp	r2, #13
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004660:	f8c0 e048 	str.w	lr, [r0, #72]	; 0x48
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8004664:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004668:	d010      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800466a:	f503 6e2a 	add.w	lr, r3, #2720	; 0xaa0
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 800466e:	f503 654a 	add.w	r5, r3, #3232	; 0xca0
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004672:	2a0e      	cmp	r2, #14
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004674:	f8c0 e04c 	str.w	lr, [r0, #76]	; 0x4c
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8004678:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800467c:	d006      	beq.n	800468c <USB_OTG_SelectCore+0x148>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800467e:	f503 652c 	add.w	r5, r3, #2752	; 0xac0
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8004682:	f503 624c 	add.w	r2, r3, #3264	; 0xcc0
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004686:	6505      	str	r5, [r0, #80]	; 0x50
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8004688:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 800468c:	6141      	str	r1, [r0, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 800468e:	f8c0 40cc 	str.w	r4, [r0, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004692:	2e00      	cmp	r6, #0
 8004694:	f000 80ae 	beq.w	80047f4 <USB_OTG_SelectCore+0x2b0>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8004698:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800469c:	2e01      	cmp	r6, #1
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800469e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046a2:	f000 80e2 	beq.w	800486a <USB_OTG_SelectCore+0x326>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80046a6:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046aa:	2e02      	cmp	r6, #2
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80046ac:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046b0:	f000 80d2 	beq.w	8004858 <USB_OTG_SelectCore+0x314>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80046b4:	f503 62a8 	add.w	r2, r3, #1344	; 0x540
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046b8:	2e03      	cmp	r6, #3
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80046ba:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046be:	d045      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80046c0:	f503 62ac 	add.w	r2, r3, #1376	; 0x560
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046c4:	2e04      	cmp	r6, #4
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80046c6:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046ca:	d03f      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80046cc:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046d0:	2e05      	cmp	r6, #5
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80046d2:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046d6:	d039      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80046d8:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046dc:	2e06      	cmp	r6, #6
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80046de:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046e2:	d033      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80046e4:	f503 62b8 	add.w	r2, r3, #1472	; 0x5c0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046e8:	2e07      	cmp	r6, #7
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80046ea:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046ee:	d02d      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80046f0:	f503 62bc 	add.w	r2, r3, #1504	; 0x5e0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046f4:	2e08      	cmp	r6, #8
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80046f6:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80046fa:	d027      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80046fc:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004700:	2e09      	cmp	r6, #9
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8004702:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004706:	d021      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8004708:	f503 62c4 	add.w	r2, r3, #1568	; 0x620
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800470c:	2e0a      	cmp	r6, #10
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800470e:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004712:	d01b      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8004714:	f503 62c8 	add.w	r2, r3, #1600	; 0x640
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004718:	2e0b      	cmp	r6, #11
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800471a:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800471e:	d015      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8004720:	f503 62cc 	add.w	r2, r3, #1632	; 0x660
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004724:	2e0c      	cmp	r6, #12
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8004726:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800472a:	d00f      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 800472c:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004730:	2e0d      	cmp	r6, #13
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8004732:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004736:	d009      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8004738:	f503 62d4 	add.w	r2, r3, #1696	; 0x6a0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800473c:	2e0e      	cmp	r6, #14
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800473e:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004742:	d003      	beq.n	800474c <USB_OTG_SelectCore+0x208>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8004744:	f503 62d8 	add.w	r2, r3, #1728	; 0x6c0
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8004748:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800474c:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8004750:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8004754:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004758:	2e03      	cmp	r6, #3
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800475a:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
 800475e:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
 8004762:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004766:	d045      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8004768:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800476c:	2e04      	cmp	r6, #4
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800476e:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004772:	d03f      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8004774:	f503 42a0 	add.w	r2, r3, #20480	; 0x5000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004778:	2e05      	cmp	r6, #5
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800477a:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800477e:	d039      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8004780:	f503 42c0 	add.w	r2, r3, #24576	; 0x6000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004784:	2e06      	cmp	r6, #6
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8004786:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800478a:	d033      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800478c:	f503 42e0 	add.w	r2, r3, #28672	; 0x7000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004790:	2e07      	cmp	r6, #7
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8004792:	f8c0 20e8 	str.w	r2, [r0, #232]	; 0xe8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004796:	d02d      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8004798:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800479c:	2e08      	cmp	r6, #8
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800479e:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047a2:	d027      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047a4:	f503 4210 	add.w	r2, r3, #36864	; 0x9000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047a8:	2e09      	cmp	r6, #9
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047aa:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047ae:	d021      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047b0:	f503 4220 	add.w	r2, r3, #40960	; 0xa000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047b4:	2e0a      	cmp	r6, #10
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047b6:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047ba:	d01b      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047bc:	f503 4230 	add.w	r2, r3, #45056	; 0xb000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047c0:	2e0b      	cmp	r6, #11
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047c2:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047c6:	d015      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047c8:	f503 4240 	add.w	r2, r3, #49152	; 0xc000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047cc:	2e0c      	cmp	r6, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047ce:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047d2:	d00f      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047d4:	f503 4250 	add.w	r2, r3, #53248	; 0xd000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047d8:	2e0d      	cmp	r6, #13
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047da:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047de:	d009      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047e0:	f503 4260 	add.w	r2, r3, #57344	; 0xe000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047e4:	2e0e      	cmp	r6, #14
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047e6:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80047ea:	d003      	beq.n	80047f4 <USB_OTG_SelectCore+0x2b0>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80047ec:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 80047f0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 80047f4:	f8c0 710c 	str.w	r7, [r0, #268]	; 0x10c
  
  return status;
}
 80047f8:	2000      	movs	r0, #0
 80047fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047fc:	4d1d      	ldr	r5, [pc, #116]	; (8004874 <USB_OTG_SelectCore+0x330>)
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 80047fe:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8004800:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    pdev->cfg.host_channels    = 12 ;
 8004804:	260c      	movs	r6, #12
    pdev->cfg.dev_endpoints    = 6 ;
 8004806:	2206      	movs	r2, #6
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8004808:	80c1      	strh	r1, [r0, #6]
 800480a:	4f1b      	ldr	r7, [pc, #108]	; (8004878 <USB_OTG_SelectCore+0x334>)
 800480c:	4c1b      	ldr	r4, [pc, #108]	; (800487c <USB_OTG_SelectCore+0x338>)
 800480e:	491c      	ldr	r1, [pc, #112]	; (8004880 <USB_OTG_SelectCore+0x33c>)
 8004810:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8004890 <USB_OTG_SelectCore+0x34c>
    pdev->cfg.host_channels    = 12 ;
 8004814:	7006      	strb	r6, [r0, #0]
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8004816:	462b      	mov	r3, r5
    pdev->cfg.dev_endpoints    = 6 ;
 8004818:	7042      	strb	r2, [r0, #1]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 800481a:	60c5      	str	r5, [r0, #12]
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 800481c:	f8c0 e010 	str.w	lr, [r0, #16]
 8004820:	e6ac      	b.n	800457c <USB_OTG_SelectCore+0x38>
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8004822:	f44f 74a0 	mov.w	r4, #320	; 0x140
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8004826:	2302      	movs	r3, #2
    pdev->cfg.host_channels    = 8 ;
 8004828:	2608      	movs	r6, #8
    pdev->cfg.dev_endpoints    = 4 ;
 800482a:	2204      	movs	r2, #4
 800482c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8004830:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8004832:	80c4      	strh	r4, [r0, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8004834:	7203      	strb	r3, [r0, #8]
    pdev->cfg.host_channels    = 8 ;
 8004836:	7006      	strb	r6, [r0, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8004838:	7042      	strb	r2, [r0, #1]
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 800483a:	462b      	mov	r3, r5
 800483c:	4f11      	ldr	r7, [pc, #68]	; (8004884 <USB_OTG_SelectCore+0x340>)
 800483e:	4c12      	ldr	r4, [pc, #72]	; (8004888 <USB_OTG_SelectCore+0x344>)
 8004840:	4912      	ldr	r1, [pc, #72]	; (800488c <USB_OTG_SelectCore+0x348>)
 8004842:	f8df e050 	ldr.w	lr, [pc, #80]	; 8004894 <USB_OTG_SelectCore+0x350>
 8004846:	e7e8      	b.n	800481a <USB_OTG_SelectCore+0x2d6>
  uint32_t i , baseAddress = 0;
 8004848:	4613      	mov	r3, r2
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800484a:	f44f 6760 	mov.w	r7, #3584	; 0xe00
 800484e:	f44f 6488 	mov.w	r4, #1088	; 0x440
 8004852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004856:	e719      	b.n	800468c <USB_OTG_SelectCore+0x148>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8004858:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800485c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004860:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
 8004864:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 8004868:	e7c4      	b.n	80047f4 <USB_OTG_SelectCore+0x2b0>
 800486a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486e:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 8004872:	e7bf      	b.n	80047f4 <USB_OTG_SelectCore+0x2b0>
 8004874:	40040000 	.word	0x40040000
 8004878:	40040e00 	.word	0x40040e00
 800487c:	40040440 	.word	0x40040440
 8004880:	40040400 	.word	0x40040400
 8004884:	50000e00 	.word	0x50000e00
 8004888:	50000440 	.word	0x50000440
 800488c:	50000400 	.word	0x50000400
 8004890:	40040800 	.word	0x40040800
 8004894:	50000800 	.word	0x50000800

08004898 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8004898:	b570      	push	{r4, r5, r6, lr}
#endif
  usbcfg.d32 = 0;
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;

  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 800489a:	7a03      	ldrb	r3, [r0, #8]
 800489c:	2b01      	cmp	r3, #1
{
 800489e:	b082      	sub	sp, #8
 80048a0:	4605      	mov	r5, r0
  gccfg.d32 = 0;
 80048a2:	f04f 0200 	mov.w	r2, #0
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048a6:	d04a      	beq.n	800493e <USB_OTG_CoreInit+0xa6>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 80048a8:	68c1      	ldr	r1, [r0, #12]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80048aa:	4c49      	ldr	r4, [pc, #292]	; (80049d0 <USB_OTG_CoreInit+0x138>)
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 80048ac:	68cb      	ldr	r3, [r1, #12]
    usbcfg.b.physel  = 1; /* FS Interface */
 80048ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80048b2:	60cb      	str	r3, [r1, #12]
    USB_OTG_BSP_uDelay(3);
 80048b4:	2003      	movs	r0, #3
  greset.d32 = 0;
 80048b6:	9201      	str	r2, [sp, #4]
    USB_OTG_BSP_uDelay(3);
 80048b8:	f7fd fb4c 	bl	8001f54 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80048bc:	68eb      	ldr	r3, [r5, #12]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	9201      	str	r2, [sp, #4]
 80048c2:	e006      	b.n	80048d2 <USB_OTG_CoreInit+0x3a>
    USB_OTG_BSP_uDelay(3);
 80048c4:	f7fd fb46 	bl	8001f54 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80048c8:	68eb      	ldr	r3, [r5, #12]
    if (++count > 200000)
 80048ca:	3c01      	subs	r4, #1
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 80048d0:	d019      	beq.n	8004906 <USB_OTG_CoreInit+0x6e>
  while (greset.b.ahbidle == 0);
 80048d2:	9a01      	ldr	r2, [sp, #4]
 80048d4:	2a00      	cmp	r2, #0
    USB_OTG_BSP_uDelay(3);
 80048d6:	f04f 0003 	mov.w	r0, #3
  while (greset.b.ahbidle == 0);
 80048da:	daf3      	bge.n	80048c4 <USB_OTG_CoreInit+0x2c>
  greset.b.csftrst = 1;
 80048dc:	9901      	ldr	r1, [sp, #4]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80048de:	4a3c      	ldr	r2, [pc, #240]	; (80049d0 <USB_OTG_CoreInit+0x138>)
  greset.b.csftrst = 1;
 80048e0:	f041 0101 	orr.w	r1, r1, #1
 80048e4:	9101      	str	r1, [sp, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80048e6:	9901      	ldr	r1, [sp, #4]
 80048e8:	6119      	str	r1, [r3, #16]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80048ea:	6919      	ldr	r1, [r3, #16]
 80048ec:	9101      	str	r1, [sp, #4]
 80048ee:	e003      	b.n	80048f8 <USB_OTG_CoreInit+0x60>
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80048f4:	3a01      	subs	r2, #1
 80048f6:	d002      	beq.n	80048fe <USB_OTG_CoreInit+0x66>
  while (greset.b.csftrst == 1);
 80048f8:	9901      	ldr	r1, [sp, #4]
 80048fa:	07c9      	lsls	r1, r1, #31
 80048fc:	d4f8      	bmi.n	80048f0 <USB_OTG_CoreInit+0x58>
  USB_OTG_BSP_uDelay(3);
 80048fe:	2003      	movs	r0, #3
 8004900:	f7fd fb28 	bl	8001f54 <USB_OTG_BSP_uDelay>
 8004904:	68eb      	ldr	r3, [r5, #12]
   
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 8004906:	7a6a      	ldrb	r2, [r5, #9]
    {
      gccfg.b.sofouten = 1;  
 8004908:	2a00      	cmp	r2, #0
 800490a:	bf0c      	ite	eq
 800490c:	f44f 2250 	moveq.w	r2, #851968	; 0xd0000
 8004910:	f44f 12e8 	movne.w	r2, #1900544	; 0x1d0000
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8004916:	2014      	movs	r0, #20
 8004918:	f7fd fb2e 	bl	8001f78 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 800491c:	78eb      	ldrb	r3, [r5, #3]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d002      	beq.n	8004928 <USB_OTG_CoreInit+0x90>
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  
  return status;
}
 8004922:	2000      	movs	r0, #0
 8004924:	b002      	add	sp, #8
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	68eb      	ldr	r3, [r5, #12]
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 800492a:	689e      	ldr	r6, [r3, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 800492c:	2205      	movs	r2, #5
 800492e:	f362 0644 	bfi	r6, r2, #1, #4
    ahbcfg.b.dmaenable = 1;
 8004932:	f046 0620 	orr.w	r6, r6, #32
}
 8004936:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8004938:	609e      	str	r6, [r3, #8]
}
 800493a:	b002      	add	sp, #8
 800493c:	bd70      	pop	{r4, r5, r6, pc}
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 800493e:	68c1      	ldr	r1, [r0, #12]
    if (pdev->cfg.Sof_output)
 8004940:	7a43      	ldrb	r3, [r0, #9]
 8004942:	4616      	mov	r6, r2
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8004944:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    gccfg.b.pwdn = 0;
 8004946:	f366 4210 	bfi	r2, r6, #16, #1
    if (pdev->cfg.Sof_output)
 800494a:	b10b      	cbz	r3, 8004950 <USB_OTG_CoreInit+0xb8>
      gccfg.b.sofouten = 1;   
 800494c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8004950:	638a      	str	r2, [r1, #56]	; 0x38
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8004952:	68cb      	ldr	r3, [r1, #12]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8004954:	4c1e      	ldr	r4, [pc, #120]	; (80049d0 <USB_OTG_CoreInit+0x138>)
    usbcfg.b.physel            = 0; /* HS Interface */
 8004956:	f36f 1386 	bfc	r3, #6, #1
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 800495a:	f36f 5396 	bfc	r3, #22, #1
    usbcfg.b.ulpi_fsls = 0;
 800495e:	f36f 4351 	bfc	r3, #17, #1
    usbcfg.b.ulpi_clk_sus_m = 0;
 8004962:	f36f 43d3 	bfc	r3, #19, #1
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8004966:	60cb      	str	r3, [r1, #12]
    USB_OTG_BSP_uDelay(3);
 8004968:	2003      	movs	r0, #3
  greset.d32 = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
    USB_OTG_BSP_uDelay(3);
 800496e:	f7fd faf1 	bl	8001f54 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8004972:	68eb      	ldr	r3, [r5, #12]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	9200      	str	r2, [sp, #0]
 8004978:	e006      	b.n	8004988 <USB_OTG_CoreInit+0xf0>
    USB_OTG_BSP_uDelay(3);
 800497a:	f7fd faeb 	bl	8001f54 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 800497e:	68eb      	ldr	r3, [r5, #12]
    if (++count > 200000)
 8004980:	3c01      	subs	r4, #1
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	9200      	str	r2, [sp, #0]
    if (++count > 200000)
 8004986:	d018      	beq.n	80049ba <USB_OTG_CoreInit+0x122>
  while (greset.b.ahbidle == 0);
 8004988:	9a00      	ldr	r2, [sp, #0]
 800498a:	2a00      	cmp	r2, #0
    USB_OTG_BSP_uDelay(3);
 800498c:	f04f 0003 	mov.w	r0, #3
  while (greset.b.ahbidle == 0);
 8004990:	daf3      	bge.n	800497a <USB_OTG_CoreInit+0xe2>
  greset.b.csftrst = 1;
 8004992:	9900      	ldr	r1, [sp, #0]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8004994:	4a0e      	ldr	r2, [pc, #56]	; (80049d0 <USB_OTG_CoreInit+0x138>)
  greset.b.csftrst = 1;
 8004996:	f041 0101 	orr.w	r1, r1, #1
 800499a:	9100      	str	r1, [sp, #0]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800499c:	9900      	ldr	r1, [sp, #0]
 800499e:	6119      	str	r1, [r3, #16]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80049a0:	6919      	ldr	r1, [r3, #16]
 80049a2:	9100      	str	r1, [sp, #0]
 80049a4:	e003      	b.n	80049ae <USB_OTG_CoreInit+0x116>
 80049a6:	6919      	ldr	r1, [r3, #16]
 80049a8:	9100      	str	r1, [sp, #0]
    if (++count > 200000)
 80049aa:	3a01      	subs	r2, #1
 80049ac:	d002      	beq.n	80049b4 <USB_OTG_CoreInit+0x11c>
  while (greset.b.csftrst == 1);
 80049ae:	9900      	ldr	r1, [sp, #0]
 80049b0:	07c8      	lsls	r0, r1, #31
 80049b2:	d4f8      	bmi.n	80049a6 <USB_OTG_CoreInit+0x10e>
  USB_OTG_BSP_uDelay(3);
 80049b4:	2003      	movs	r0, #3
 80049b6:	f7fd facd 	bl	8001f54 <USB_OTG_BSP_uDelay>
    if(pdev->cfg.dma_enable == 1)
 80049ba:	78eb      	ldrb	r3, [r5, #3]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d1b0      	bne.n	8004922 <USB_OTG_CoreInit+0x8a>
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80049c0:	2205      	movs	r2, #5
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80049c2:	68eb      	ldr	r3, [r5, #12]
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80049c4:	f362 0644 	bfi	r6, r2, #1, #4
      ahbcfg.b.dmaenable = 1;
 80049c8:	f046 0620 	orr.w	r6, r6, #32
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80049cc:	609e      	str	r6, [r3, #8]
 80049ce:	e7ac      	b.n	800492a <USB_OTG_CoreInit+0x92>
 80049d0:	00030d40 	.word	0x00030d40

080049d4 <USB_OTG_EnableGlobalInt>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 80049d4:	68c2      	ldr	r2, [r0, #12]
 80049d6:	6893      	ldr	r3, [r2, #8]
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6093      	str	r3, [r2, #8]
  return status;
}
 80049de:	2000      	movs	r0, #0
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop

080049e4 <USB_OTG_DisableGlobalInt>:
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 80049e4:	68c2      	ldr	r2, [r0, #12]
 80049e6:	6893      	ldr	r3, [r2, #8]
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6093      	str	r3, [r2, #8]
  return status;
}
 80049ee:	2000      	movs	r0, #0
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop

080049f4 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 80049f4:	b500      	push	{lr}
 80049f6:	b083      	sub	sp, #12
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 80049fc:	9a01      	ldr	r2, [sp, #4]
  greset.b.txfnum  = num;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80049fe:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <USB_OTG_FlushTxFifo+0x44>)
  greset.b.txfflsh = 1;
 8004a00:	f042 0220 	orr.w	r2, r2, #32
 8004a04:	9201      	str	r2, [sp, #4]
  greset.b.txfnum  = num;
 8004a06:	9a01      	ldr	r2, [sp, #4]
 8004a08:	f361 128a 	bfi	r2, r1, #6, #5
 8004a0c:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8004a0e:	68c1      	ldr	r1, [r0, #12]
 8004a10:	9a01      	ldr	r2, [sp, #4]
 8004a12:	610a      	str	r2, [r1, #16]
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8004a14:	690a      	ldr	r2, [r1, #16]
 8004a16:	9201      	str	r2, [sp, #4]
 8004a18:	e003      	b.n	8004a22 <USB_OTG_FlushTxFifo+0x2e>
 8004a1a:	690a      	ldr	r2, [r1, #16]
 8004a1c:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	d002      	beq.n	8004a28 <USB_OTG_FlushTxFifo+0x34>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8004a22:	9a01      	ldr	r2, [sp, #4]
 8004a24:	0692      	lsls	r2, r2, #26
 8004a26:	d4f8      	bmi.n	8004a1a <USB_OTG_FlushTxFifo+0x26>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8004a28:	2003      	movs	r0, #3
 8004a2a:	f7fd fa93 	bl	8001f54 <USB_OTG_BSP_uDelay>
  return status;
}
 8004a2e:	2000      	movs	r0, #0
 8004a30:	b003      	add	sp, #12
 8004a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a36:	bf00      	nop
 8004a38:	00030d40 	.word	0x00030d40

08004a3c <USB_OTG_SetCurrentMode>:
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8004a3c:	68c2      	ldr	r2, [r0, #12]
{
 8004a3e:	b508      	push	{r3, lr}
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8004a40:	68d3      	ldr	r3, [r2, #12]
  
  usbcfg.b.force_host = 0;
  usbcfg.b.force_dev = 0;
  
  if ( mode == HOST_MODE)
 8004a42:	2901      	cmp	r1, #1
  usbcfg.b.force_host = 0;
 8004a44:	f36f 735d 	bfc	r3, #29, #1
  usbcfg.b.force_dev = 0;
 8004a48:	f36f 739e 	bfc	r3, #30, #1
  if ( mode == HOST_MODE)
 8004a4c:	d008      	beq.n	8004a60 <USB_OTG_SetCurrentMode+0x24>
  {
    usbcfg.b.force_host = 1;
  }
  else if ( mode == DEVICE_MODE)
 8004a4e:	b909      	cbnz	r1, 8004a54 <USB_OTG_SetCurrentMode+0x18>
  {
    usbcfg.b.force_dev = 1;
 8004a50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  else
  {
    /* Do Nothing */
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8004a54:	60d3      	str	r3, [r2, #12]
  USB_OTG_BSP_mDelay(50);
 8004a56:	2032      	movs	r0, #50	; 0x32
 8004a58:	f7fd fa8e 	bl	8001f78 <USB_OTG_BSP_mDelay>
  return status;
}
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	bd08      	pop	{r3, pc}
    usbcfg.b.force_host = 1;
 8004a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a64:	e7f6      	b.n	8004a54 <USB_OTG_SetCurrentMode+0x18>
 8004a66:	bf00      	nop

08004a68 <USB_OTG_IsDeviceMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8004a68:	68c3      	ldr	r3, [r0, #12]
 8004a6a:	6958      	ldr	r0, [r3, #20]
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8004a6c:	43c0      	mvns	r0, r0
}
 8004a6e:	f000 0001 	and.w	r0, r0, #1
 8004a72:	4770      	bx	lr

08004a74 <USB_OTG_ReadCoreItr>:
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v = 0;
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8004a74:	68c3      	ldr	r3, [r0, #12]
 8004a76:	6958      	ldr	r0, [r3, #20]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8004a78:	699b      	ldr	r3, [r3, #24]
  return v;
}
 8004a7a:	4018      	ands	r0, r3
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <USB_OTG_CoreInitDev>:
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8004a80:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8004a84:	b5f0      	push	{r4, r5, r6, r7, lr}
  nptxfifosize.d32 = 0;
 8004a86:	2300      	movs	r3, #0
{
 8004a88:	4604      	mov	r4, r0
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8004a8a:	6900      	ldr	r0, [r0, #16]
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8004a8c:	6013      	str	r3, [r2, #0]
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8004a8e:	6802      	ldr	r2, [r0, #0]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8004a90:	f363 22cc 	bfi	r2, r3, #11, #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8004a94:	6002      	str	r2, [r0, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8004a96:	7ae1      	ldrb	r1, [r4, #11]
 8004a98:	2901      	cmp	r1, #1
{
 8004a9a:	b083      	sub	sp, #12
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8004a9c:	f000 81ee 	beq.w	8004e7c <USB_OTG_CoreInitDev+0x3fc>
 8004aa0:	68e1      	ldr	r1, [r4, #12]
  greset.d32 = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 8004aa6:	9a01      	ldr	r2, [sp, #4]
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8004aa8:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <USB_OTG_CoreInitDev+0x74>)
  greset.b.txfflsh = 1;
 8004aaa:	f042 0220 	orr.w	r2, r2, #32
 8004aae:	9201      	str	r2, [sp, #4]
  greset.b.txfnum  = num;
 8004ab0:	9a01      	ldr	r2, [sp, #4]
 8004ab2:	2010      	movs	r0, #16
 8004ab4:	f360 128a 	bfi	r2, r0, #6, #5
 8004ab8:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8004aba:	9a01      	ldr	r2, [sp, #4]
 8004abc:	610a      	str	r2, [r1, #16]
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8004abe:	690a      	ldr	r2, [r1, #16]
 8004ac0:	9201      	str	r2, [sp, #4]
 8004ac2:	e003      	b.n	8004acc <USB_OTG_CoreInitDev+0x4c>
 8004ac4:	690a      	ldr	r2, [r1, #16]
 8004ac6:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	d002      	beq.n	8004ad2 <USB_OTG_CoreInitDev+0x52>
  while (greset.b.txfflsh == 1);
 8004acc:	9a01      	ldr	r2, [sp, #4]
 8004ace:	0690      	lsls	r0, r2, #26
 8004ad0:	d4f8      	bmi.n	8004ac4 <USB_OTG_CoreInitDev+0x44>
  USB_OTG_BSP_uDelay(3);
 8004ad2:	2003      	movs	r0, #3
 8004ad4:	f7fd fa3e 	bl	8001f54 <USB_OTG_BSP_uDelay>
  greset.d32 = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9300      	str	r3, [sp, #0]
  greset.b.rxfflsh = 1;
 8004adc:	9a00      	ldr	r2, [sp, #0]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8004ade:	68e1      	ldr	r1, [r4, #12]
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <USB_OTG_CoreInitDev+0x74>)
  greset.b.rxfflsh = 1;
 8004ae2:	f042 0210 	orr.w	r2, r2, #16
 8004ae6:	9200      	str	r2, [sp, #0]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8004ae8:	9a00      	ldr	r2, [sp, #0]
 8004aea:	610a      	str	r2, [r1, #16]
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8004aec:	690a      	ldr	r2, [r1, #16]
 8004aee:	9200      	str	r2, [sp, #0]
 8004af0:	e006      	b.n	8004b00 <USB_OTG_CoreInitDev+0x80>
 8004af2:	bf00      	nop
 8004af4:	00030d40 	.word	0x00030d40
 8004af8:	690a      	ldr	r2, [r1, #16]
 8004afa:	9200      	str	r2, [sp, #0]
    if (++count > 200000)
 8004afc:	3b01      	subs	r3, #1
 8004afe:	d002      	beq.n	8004b06 <USB_OTG_CoreInitDev+0x86>
  while (greset.b.rxfflsh == 1);
 8004b00:	9a00      	ldr	r2, [sp, #0]
 8004b02:	06d2      	lsls	r2, r2, #27
 8004b04:	d4f8      	bmi.n	8004af8 <USB_OTG_CoreInitDev+0x78>
  USB_OTG_BSP_uDelay(3);
 8004b06:	2003      	movs	r0, #3
 8004b08:	f7fd fa24 	bl	8001f54 <USB_OTG_BSP_uDelay>
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8004b0c:	6920      	ldr	r0, [r4, #16]
 8004b0e:	2200      	movs	r2, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8004b14:	6102      	str	r2, [r0, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8004b16:	6142      	str	r2, [r0, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8004b18:	6183      	str	r3, [r0, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8004b1a:	61c2      	str	r2, [r0, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b1c:	7863      	ldrb	r3, [r4, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8176 	beq.w	8004e10 <USB_OTG_CoreInitDev+0x390>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004b24:	69a5      	ldr	r5, [r4, #24]
 8004b26:	6829      	ldr	r1, [r5, #0]
    if (depctl.b.epena)
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	bfac      	ite	ge
 8004b2c:	2600      	movge	r6, #0
 8004b2e:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004b32:	21ff      	movs	r1, #255	; 0xff
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b34:	2b01      	cmp	r3, #1
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004b36:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004b38:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004b3a:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b3c:	f000 80ab 	beq.w	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004b40:	69e5      	ldr	r5, [r4, #28]
 8004b42:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004b44:	2e00      	cmp	r6, #0
 8004b46:	bfac      	ite	ge
 8004b48:	2600      	movge	r6, #0
 8004b4a:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b4e:	2b02      	cmp	r3, #2
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004b50:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004b52:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004b54:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b56:	f000 809e 	beq.w	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004b5a:	6a25      	ldr	r5, [r4, #32]
 8004b5c:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	bfac      	ite	ge
 8004b62:	2600      	movge	r6, #0
 8004b64:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b68:	2b03      	cmp	r3, #3
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004b6a:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004b6c:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004b6e:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b70:	f000 8091 	beq.w	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004b74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004b76:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004b78:	2e00      	cmp	r6, #0
 8004b7a:	bfac      	ite	ge
 8004b7c:	2600      	movge	r6, #0
 8004b7e:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b82:	2b04      	cmp	r3, #4
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004b84:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004b86:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004b88:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b8a:	f000 8084 	beq.w	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004b8e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004b90:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004b92:	2e00      	cmp	r6, #0
 8004b94:	bfac      	ite	ge
 8004b96:	2600      	movge	r6, #0
 8004b98:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004b9c:	2b05      	cmp	r3, #5
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004b9e:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004ba0:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004ba2:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004ba4:	d077      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004ba6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004ba8:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004baa:	2e00      	cmp	r6, #0
 8004bac:	bfac      	ite	ge
 8004bae:	2600      	movge	r6, #0
 8004bb0:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004bb4:	2b06      	cmp	r3, #6
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004bb6:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004bb8:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004bba:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004bbc:	d06b      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004bbe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004bc0:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	bfac      	ite	ge
 8004bc6:	2600      	movge	r6, #0
 8004bc8:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004bcc:	2b07      	cmp	r3, #7
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004bce:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004bd0:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004bd2:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004bd4:	d05f      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004bd6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004bd8:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	bfac      	ite	ge
 8004bde:	2600      	movge	r6, #0
 8004be0:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004be4:	2b08      	cmp	r3, #8
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004be6:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004be8:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004bea:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004bec:	d053      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004bee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004bf0:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	bfac      	ite	ge
 8004bf6:	2600      	movge	r6, #0
 8004bf8:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004bfc:	2b09      	cmp	r3, #9
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004bfe:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004c00:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004c02:	60a9      	str	r1, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c04:	d047      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004c06:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004c08:	682a      	ldr	r2, [r5, #0]
      depctl.b.snak = 1;
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	bfac      	ite	ge
 8004c0e:	2600      	movge	r6, #0
 8004c10:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004c14:	2100      	movs	r1, #0
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004c16:	22ff      	movs	r2, #255	; 0xff
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c18:	2b0a      	cmp	r3, #10
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004c1a:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004c1c:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004c1e:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c20:	d039      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004c22:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8004c24:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004c26:	428e      	cmp	r6, r1
 8004c28:	bfac      	ite	ge
 8004c2a:	460e      	movge	r6, r1
 8004c2c:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c30:	2b0b      	cmp	r3, #11
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004c32:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004c34:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004c36:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c38:	d02d      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004c3a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8004c3c:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004c3e:	428e      	cmp	r6, r1
 8004c40:	bfac      	ite	ge
 8004c42:	460e      	movge	r6, r1
 8004c44:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c48:	2b0c      	cmp	r3, #12
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004c4a:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004c4c:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004c4e:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c50:	d021      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004c52:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004c54:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004c56:	428e      	cmp	r6, r1
 8004c58:	bfac      	ite	ge
 8004c5a:	460e      	movge	r6, r1
 8004c5c:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c60:	2b0d      	cmp	r3, #13
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004c62:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004c64:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004c66:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c68:	d015      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004c6a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004c6c:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004c6e:	428e      	cmp	r6, r1
 8004c70:	bfac      	ite	ge
 8004c72:	460e      	movge	r6, r1
 8004c74:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c78:	2b0e      	cmp	r3, #14
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004c7a:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004c7c:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004c7e:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004c80:	d009      	beq.n	8004c96 <USB_OTG_CoreInitDev+0x216>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004c82:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004c84:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004c86:	428e      	cmp	r6, r1
 8004c88:	bfac      	ite	ge
 8004c8a:	460e      	movge	r6, r1
 8004c8c:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004c90:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8004c92:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8004c94:	60aa      	str	r2, [r5, #8]
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004c96:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004c98:	682a      	ldr	r2, [r5, #0]
    if (depctl.b.epena)
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8004c9a:	2a00      	cmp	r2, #0
 8004c9c:	bfac      	ite	ge
 8004c9e:	2600      	movge	r6, #0
 8004ca0:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004ca4:	2100      	movs	r1, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004ca6:	22ff      	movs	r2, #255	; 0xff
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004ca8:	2b01      	cmp	r3, #1
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004caa:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004cac:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004cae:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004cb0:	f000 80ae 	beq.w	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004cb4:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8004cb6:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004cb8:	428e      	cmp	r6, r1
 8004cba:	bfac      	ite	ge
 8004cbc:	460e      	movge	r6, r1
 8004cbe:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004cc2:	2b02      	cmp	r3, #2
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004cc4:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004cc6:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004cc8:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004cca:	f000 80a1 	beq.w	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004cce:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8004cd0:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004cd2:	428e      	cmp	r6, r1
 8004cd4:	bfac      	ite	ge
 8004cd6:	460e      	movge	r6, r1
 8004cd8:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004cdc:	2b03      	cmp	r3, #3
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004cde:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004ce0:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004ce2:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004ce4:	f000 8094 	beq.w	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004ce8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004cea:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004cec:	428e      	cmp	r6, r1
 8004cee:	bfac      	ite	ge
 8004cf0:	460e      	movge	r6, r1
 8004cf2:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004cf6:	2b04      	cmp	r3, #4
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004cf8:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004cfa:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004cfc:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004cfe:	f000 8087 	beq.w	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004d02:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004d04:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004d06:	428e      	cmp	r6, r1
 8004d08:	bfac      	ite	ge
 8004d0a:	460e      	movge	r6, r1
 8004d0c:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d10:	2b05      	cmp	r3, #5
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004d12:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004d14:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004d16:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d18:	d07a      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004d1a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8004d1c:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004d1e:	428e      	cmp	r6, r1
 8004d20:	bfac      	ite	ge
 8004d22:	460e      	movge	r6, r1
 8004d24:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d28:	2b06      	cmp	r3, #6
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004d2a:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004d2c:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004d2e:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d30:	d06e      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004d32:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8004d34:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004d36:	428e      	cmp	r6, r1
 8004d38:	bfac      	ite	ge
 8004d3a:	460e      	movge	r6, r1
 8004d3c:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d40:	2b07      	cmp	r3, #7
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004d42:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004d44:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004d46:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d48:	d062      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004d4a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8004d4c:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004d4e:	428e      	cmp	r6, r1
 8004d50:	bfac      	ite	ge
 8004d52:	460e      	movge	r6, r1
 8004d54:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d58:	2b08      	cmp	r3, #8
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004d5a:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004d5c:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004d5e:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d60:	d056      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004d62:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8004d64:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004d66:	428e      	cmp	r6, r1
 8004d68:	bfac      	ite	ge
 8004d6a:	460e      	movge	r6, r1
 8004d6c:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d70:	2b09      	cmp	r3, #9
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004d72:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004d74:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004d76:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d78:	d04a      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004d7a:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 8004d7c:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004d7e:	428e      	cmp	r6, r1
 8004d80:	bfac      	ite	ge
 8004d82:	460e      	movge	r6, r1
 8004d84:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d88:	2b0a      	cmp	r3, #10
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004d8a:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004d8c:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004d8e:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004d90:	d03e      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004d92:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8004d94:	682a      	ldr	r2, [r5, #0]
      depctl.b.snak = 1;
 8004d96:	428a      	cmp	r2, r1
 8004d98:	bfac      	ite	ge
 8004d9a:	460e      	movge	r6, r1
 8004d9c:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004da0:	22ff      	movs	r2, #255	; 0xff
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004da2:	2b0b      	cmp	r3, #11
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004da4:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004da6:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004da8:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004daa:	d031      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004dac:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004db0:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004db2:	428e      	cmp	r6, r1
 8004db4:	bfac      	ite	ge
 8004db6:	460e      	movge	r6, r1
 8004db8:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004dbc:	2b0c      	cmp	r3, #12
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004dbe:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004dc0:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004dc2:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004dc4:	d024      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004dc6:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004dca:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004dcc:	428e      	cmp	r6, r1
 8004dce:	bfac      	ite	ge
 8004dd0:	460e      	movge	r6, r1
 8004dd2:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004dd6:	2b0d      	cmp	r3, #13
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004dd8:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004dda:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004ddc:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004dde:	d017      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004de0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8004de4:	682e      	ldr	r6, [r5, #0]
      depctl.b.snak = 1;
 8004de6:	428e      	cmp	r6, r1
 8004de8:	bfac      	ite	ge
 8004dea:	460e      	movge	r6, r1
 8004dec:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004df0:	2b0e      	cmp	r3, #14
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004df2:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004df4:	6129      	str	r1, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004df6:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8004df8:	d00a      	beq.n	8004e10 <USB_OTG_CoreInitDev+0x390>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8004dfa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004dfe:	681d      	ldr	r5, [r3, #0]
      depctl.b.snak = 1;
 8004e00:	428d      	cmp	r5, r1
 8004e02:	bfac      	ite	ge
 8004e04:	460d      	movge	r5, r1
 8004e06:	f04f 4590 	movlt.w	r5, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8004e0a:	601d      	str	r5, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8004e0c:	6119      	str	r1, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8004e0e:	609a      	str	r2, [r3, #8]
  }
  msk.d32 = 0;
  msk.b.txfifoundrn = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8004e10:	6903      	ldr	r3, [r0, #16]
 8004e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e16:	6103      	str	r3, [r0, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8004e18:	78e1      	ldrb	r1, [r4, #3]
 8004e1a:	2901      	cmp	r1, #1
  msk.b.txfifoundrn = 1;
 8004e1c:	f04f 0300 	mov.w	r3, #0
  if (pdev->cfg.dma_enable == 1)
 8004e20:	d01b      	beq.n	8004e5a <USB_OTG_CoreInitDev+0x3da>
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8004e22:	68e2      	ldr	r2, [r4, #12]
  int_mask.b.usbsuspend = 1; 
 8004e24:	4c29      	ldr	r4, [pc, #164]	; (8004ecc <USB_OTG_CoreInitDev+0x44c>)
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8004e26:	6193      	str	r3, [r2, #24]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
  
  if (pdev->cfg.dma_enable == 0)
  {
    intmsk.b.rxstsqlvl = 1;
 8004e28:	2900      	cmp	r1, #0
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8004e2e:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
 8004e32:	6151      	str	r1, [r2, #20]
    intmsk.b.rxstsqlvl = 1;
 8004e34:	bf08      	it	eq
 8004e36:	2310      	moveq	r3, #16
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8004e38:	6050      	str	r0, [r2, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8004e3a:	6151      	str	r1, [r2, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8004e3c:	6194      	str	r4, [r2, #24]
  
  intmsk.b.incomplisoin    = 1; 
  intmsk.b.incomplisoout    = 1;   
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
 8004e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e42:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8004e46:	6991      	ldr	r1, [r2, #24]
  intmsk.b.otgintr    = 1;    
 8004e48:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e4c:	f043 030c 	orr.w	r3, r3, #12
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8004e50:	430b      	orrs	r3, r1
}
 8004e52:	2000      	movs	r0, #0
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8004e54:	6193      	str	r3, [r2, #24]
}
 8004e56:	b003      	add	sp, #12
 8004e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dthrctl.b.rx_thr_en = 1;
 8004e5a:	4d1d      	ldr	r5, [pc, #116]	; (8004ed0 <USB_OTG_CoreInitDev+0x450>)
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8004e5c:	68e2      	ldr	r2, [r4, #12]
  int_mask.b.usbsuspend = 1; 
 8004e5e:	4c1b      	ldr	r4, [pc, #108]	; (8004ecc <USB_OTG_CoreInitDev+0x44c>)
    dthrctl.b.tx_thr_len = 64;
 8004e60:	2140      	movs	r1, #64	; 0x40
    dthrctl.b.rx_thr_len = 64;
 8004e62:	f361 4559 	bfi	r5, r1, #17, #9
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8004e66:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8004e6a:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8004e6e:	6305      	str	r5, [r0, #48]	; 0x30
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8004e70:	6193      	str	r3, [r2, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8004e72:	6151      	str	r1, [r2, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8004e74:	6056      	str	r6, [r2, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8004e76:	6151      	str	r1, [r2, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8004e78:	6194      	str	r4, [r2, #24]
 8004e7a:	e7e0      	b.n	8004e3e <USB_OTG_CoreInitDev+0x3be>
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8004e7c:	6806      	ldr	r6, [r0, #0]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8004e7e:	68e1      	ldr	r1, [r4, #12]
 8004e80:	461a      	mov	r2, r3
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8004e82:	2720      	movs	r7, #32
  dcfg.b.devspd = speed;
 8004e84:	f046 0603 	orr.w	r6, r6, #3
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8004e88:	f04f 0ea0 	mov.w	lr, #160	; 0xa0
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8004e8c:	6006      	str	r6, [r0, #0]
 8004e8e:	461d      	mov	r5, r3
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8004e90:	2080      	movs	r0, #128	; 0x80
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8004e92:	f367 431f 	bfi	r3, r7, #16, #16
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8004e96:	f36e 020f 	bfi	r2, lr, #0, #16
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8004e9a:	f360 030f 	bfi	r3, r0, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8004e9e:	f360 421f 	bfi	r2, r0, #16, #16
    txfifosize.b.startaddr += txfifosize.b.depth;
 8004ea2:	f44f 7690 	mov.w	r6, #288	; 0x120
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8004ea6:	6248      	str	r0, [r1, #36]	; 0x24
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8004ea8:	628b      	str	r3, [r1, #40]	; 0x28
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8004eaa:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    txfifosize.b.startaddr += txfifosize.b.depth;
 8004eae:	f366 020f 	bfi	r2, r6, #0, #16
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8004eb2:	f367 421f 	bfi	r2, r7, #16, #16
    txfifosize.b.startaddr += txfifosize.b.depth;
 8004eb6:	f44f 73a0 	mov.w	r3, #320	; 0x140
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8004eba:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    txfifosize.b.startaddr += txfifosize.b.depth;
 8004ebe:	f363 020f 	bfi	r2, r3, #0, #16
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
 8004ec2:	f365 421f 	bfi	r2, r5, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8004ec6:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 8004eca:	e5ea      	b.n	8004aa2 <USB_OTG_CoreInitDev+0x22>
 8004ecc:	80000800 	.word	0x80000800
 8004ed0:	00010103 	.word	0x00010103

08004ed4 <USB_OTG_GetDeviceSpeed>:
{
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8004ed4:	6903      	ldr	r3, [r0, #16]
 8004ed6:	4a03      	ldr	r2, [pc, #12]	; (8004ee4 <USB_OTG_GetDeviceSpeed+0x10>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f3c3 0341 	ubfx	r3, r3, #1, #2
    speed = USB_SPEED_FULL;
    break; 
  }
  
  return speed;
}
 8004ede:	5cd0      	ldrb	r0, [r2, r3]
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	0800b424 	.word	0x0800b424

08004ee8 <USB_OTG_EP0Activate>:
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8004ee8:	6902      	ldr	r2, [r0, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8004eea:	6981      	ldr	r1, [r0, #24]
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8004eec:	6893      	ldr	r3, [r2, #8]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8004eee:	6808      	ldr	r0, [r1, #0]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8004ef0:	f3c3 0341 	ubfx	r3, r3, #1, #2
{
 8004ef4:	b500      	push	{lr}
  switch (dsts.b.enumspd)
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d803      	bhi.n	8004f02 <USB_OTG_EP0Activate+0x1a>
 8004efa:	e8df f003 	tbb	[pc, r3]
 8004efe:	0202      	.short	0x0202
 8004f00:	020c      	.short	0x020c
    break;
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
    break;
  default:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8004f02:	f36f 000a 	bfc	r0, #0, #11
    break; 
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8004f06:	6008      	str	r0, [r1, #0]
  dctl.b.cgnpinnak = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8004f08:	6853      	ldr	r3, [r2, #4]
 8004f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0e:	6053      	str	r3, [r2, #4]
  return status;
}
 8004f10:	2000      	movs	r0, #0
 8004f12:	f85d fb04 	ldr.w	pc, [sp], #4
    diepctl.b.mps = DEP0CTL_MPS_8;
 8004f16:	2303      	movs	r3, #3
 8004f18:	f363 000a 	bfi	r0, r3, #0, #11
    break;
 8004f1c:	e7f3      	b.n	8004f06 <USB_OTG_EP0Activate+0x1e>
 8004f1e:	bf00      	nop

08004f20 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8004f20:	b470      	push	{r4, r5, r6}
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8004f22:	784b      	ldrb	r3, [r1, #1]
 8004f24:	2b01      	cmp	r3, #1
  daintmsk.d32 = 0;
 8004f26:	f04f 0200 	mov.w	r2, #0
  if (ep->is_in == 1)
 8004f2a:	d01f      	beq.n	8004f6c <USB_OTG_EPActivate+0x4c>
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8004f2c:	780d      	ldrb	r5, [r1, #0]
 8004f2e:	eb00 0485 	add.w	r4, r0, r5, lsl #2
    daintmsk.ep.out = 1 << ep->num;
 8004f32:	2301      	movs	r3, #1
 8004f34:	40ab      	lsls	r3, r5
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8004f36:	6d64      	ldr	r4, [r4, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8004f38:	f363 421f 	bfi	r2, r3, #16, #16
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8004f3c:	6823      	ldr	r3, [r4, #0]
  if (!depctl.b.usbactep)
 8004f3e:	041d      	lsls	r5, r3, #16
 8004f40:	d40d      	bmi.n	8004f5e <USB_OTG_EPActivate+0x3e>
  {
    depctl.b.mps    = ep->maxpacket;
 8004f42:	688e      	ldr	r6, [r1, #8]
    depctl.b.eptype = ep->type;
 8004f44:	78cd      	ldrb	r5, [r1, #3]
    depctl.b.txfnum = ep->tx_fifo_num;
 8004f46:	88c9      	ldrh	r1, [r1, #6]
    depctl.b.mps    = ep->maxpacket;
 8004f48:	f366 030a 	bfi	r3, r6, #0, #11
    depctl.b.eptype = ep->type;
 8004f4c:	f365 4393 	bfi	r3, r5, #18, #2
    depctl.b.txfnum = ep->tx_fifo_num;
 8004f50:	f361 5399 	bfi	r3, r1, #22, #4
    depctl.b.setd0pid = 1;
    depctl.b.usbactep = 1;
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8004f5c:	6023      	str	r3, [r4, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8004f5e:	6903      	ldr	r3, [r0, #16]
 8004f60:	69d9      	ldr	r1, [r3, #28]
 8004f62:	430a      	orrs	r2, r1
  return status;
}
 8004f64:	2000      	movs	r0, #0
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8004f66:	61da      	str	r2, [r3, #28]
}
 8004f68:	bc70      	pop	{r4, r5, r6}
 8004f6a:	4770      	bx	lr
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8004f6c:	780c      	ldrb	r4, [r1, #0]
 8004f6e:	eb00 0584 	add.w	r5, r0, r4, lsl #2
    daintmsk.ep.in = 1 << ep->num;
 8004f72:	40a3      	lsls	r3, r4
 8004f74:	f363 020f 	bfi	r2, r3, #0, #16
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8004f78:	69ac      	ldr	r4, [r5, #24]
 8004f7a:	e7df      	b.n	8004f3c <USB_OTG_EPActivate+0x1c>

08004f7c <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8004f7c:	b430      	push	{r4, r5}
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8004f7e:	784b      	ldrb	r3, [r1, #1]
  depctl.d32 = 0;
 8004f80:	2200      	movs	r2, #0
  if (ep->is_in == 1)
 8004f82:	2b01      	cmp	r3, #1
  daintmsk.d32 = 0;  
 8004f84:	4614      	mov	r4, r2
  if (ep->is_in == 1)
 8004f86:	d012      	beq.n	8004fae <USB_OTG_EPDeactivate+0x32>
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8004f88:	780b      	ldrb	r3, [r1, #0]
 8004f8a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    daintmsk.ep.out = 1 << ep->num;
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4099      	lsls	r1, r3
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8004f92:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8004f94:	f361 441f 	bfi	r4, r1, #16, #16
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8004f98:	6901      	ldr	r1, [r0, #16]
  depctl.b.usbactep = 0;
 8004f9a:	f36f 32cf 	bfc	r2, #15, #1
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 8004f9e:	602a      	str	r2, [r5, #0]
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8004fa0:	69cb      	ldr	r3, [r1, #28]
 8004fa2:	ea23 0304 	bic.w	r3, r3, r4
  return status;
}
 8004fa6:	2000      	movs	r0, #0
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8004fa8:	61cb      	str	r3, [r1, #28]
}
 8004faa:	bc30      	pop	{r4, r5}
 8004fac:	4770      	bx	lr
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8004fae:	7809      	ldrb	r1, [r1, #0]
 8004fb0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    daintmsk.ep.in = 1 << ep->num;
 8004fb4:	408b      	lsls	r3, r1
 8004fb6:	f363 040f 	bfi	r4, r3, #0, #16
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8004fba:	69ad      	ldr	r5, [r5, #24]
 8004fbc:	e7ec      	b.n	8004f98 <USB_OTG_EPDeactivate+0x1c>
 8004fbe:	bf00      	nop

08004fc0 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8004fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8004fc4:	784b      	ldrb	r3, [r1, #1]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d02b      	beq.n	8005022 <USB_OTG_EPStartXfer+0x62>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8004fca:	780a      	ldrb	r2, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8004fcc:	694b      	ldr	r3, [r1, #20]
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8004fce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004fd2:	6d56      	ldr	r6, [r2, #84]	; 0x54
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8004fd4:	688a      	ldr	r2, [r1, #8]
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8004fd6:	6834      	ldr	r4, [r6, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8004fd8:	6935      	ldr	r5, [r6, #16]
    if (ep->xfer_len == 0)
 8004fda:	b1f3      	cbz	r3, 800501a <USB_OTG_EPStartXfer+0x5a>
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8004fdc:	4413      	add	r3, r2
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8004fe8:	fb02 f203 	mul.w	r2, r2, r3
 8004fec:	f3c2 0212 	ubfx	r2, r2, #0, #19
      ep->xfer_len = deptsiz.b.xfersize ;
 8004ff0:	614a      	str	r2, [r1, #20]
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f363 45dc 	bfi	r5, r3, #19, #10
 8004ff8:	f362 0512 	bfi	r5, r2, #0, #19
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8004ffc:	6135      	str	r5, [r6, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8004ffe:	78c3      	ldrb	r3, [r0, #3]
 8005000:	2b01      	cmp	r3, #1
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8005002:	bf04      	itt	eq
 8005004:	690b      	ldreq	r3, [r1, #16]
 8005006:	6173      	streq	r3, [r6, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8005008:	78cb      	ldrb	r3, [r1, #3]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d032      	beq.n	8005074 <USB_OTG_EPStartXfer+0xb4>
        depctl.b.setd0pid = 1;
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 800500e:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8005012:	6034      	str	r4, [r6, #0]
  }
  return status;
}
 8005014:	2000      	movs	r0, #0
 8005016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      deptsiz.b.pktcnt = 1;
 800501a:	2301      	movs	r3, #1
      deptsiz.b.xfersize = ep->maxpacket;
 800501c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8005020:	e7e8      	b.n	8004ff4 <USB_OTG_EPStartXfer+0x34>
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8005022:	780f      	ldrb	r7, [r1, #0]
    if (ep->xfer_len == 0)
 8005024:	694e      	ldr	r6, [r1, #20]
 8005026:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 800502a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800502e:	6814      	ldr	r4, [r2, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8005030:	6915      	ldr	r5, [r2, #16]
    if (ep->xfer_len == 0)
 8005032:	b326      	cbz	r6, 800507e <USB_OTG_EPStartXfer+0xbe>
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8005034:	f8d1 8008 	ldr.w	r8, [r1, #8]
      if (ep->type == EP_TYPE_ISOC)
 8005038:	f891 9003 	ldrb.w	r9, [r1, #3]
      deptsiz.b.xfersize = ep->xfer_len;
 800503c:	f366 0512 	bfi	r5, r6, #0, #19
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8005040:	eb06 0e08 	add.w	lr, r6, r8
      if (ep->type == EP_TYPE_ISOC)
 8005044:	f1b9 0f01 	cmp.w	r9, #1
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8005048:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800504c:	fbbe fef8 	udiv	lr, lr, r8
 8005050:	f36e 45dc 	bfi	r5, lr, #19, #10
      if (ep->type == EP_TYPE_ISOC)
 8005054:	d041      	beq.n	80050da <USB_OTG_EPStartXfer+0x11a>
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8005056:	6115      	str	r5, [r2, #16]
    if (pdev->cfg.dma_enable == 1)
 8005058:	78c5      	ldrb	r5, [r0, #3]
 800505a:	2d01      	cmp	r5, #1
 800505c:	d046      	beq.n	80050ec <USB_OTG_EPStartXfer+0x12c>
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800505e:	6901      	ldr	r1, [r0, #16]
 8005060:	6b48      	ldr	r0, [r1, #52]	; 0x34
          fifoemptymsk = 1 << ep->num;
 8005062:	40bb      	lsls	r3, r7
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8005064:	4303      	orrs	r3, r0
 8005066:	634b      	str	r3, [r1, #52]	; 0x34
    depctl.b.epena = 1;
 8005068:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 800506c:	6014      	str	r4, [r2, #0]
}
 800506e:	2000      	movs	r0, #0
 8005070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ep->even_odd_frame)
 8005074:	794b      	ldrb	r3, [r1, #5]
 8005076:	b343      	cbz	r3, 80050ca <USB_OTG_EPStartXfer+0x10a>
        depctl.b.setd1pid = 1;
 8005078:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800507c:	e7c7      	b.n	800500e <USB_OTG_EPStartXfer+0x4e>
      deptsiz.b.xfersize = 0;
 800507e:	f366 0512 	bfi	r5, r6, #0, #19
      deptsiz.b.pktcnt = 1;
 8005082:	f363 45dc 	bfi	r5, r3, #19, #10
 8005086:	78cf      	ldrb	r7, [r1, #3]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8005088:	6115      	str	r5, [r2, #16]
    if (pdev->cfg.dma_enable == 1)
 800508a:	78c3      	ldrb	r3, [r0, #3]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d01f      	beq.n	80050d0 <USB_OTG_EPStartXfer+0x110>
      if (ep->type != EP_TYPE_ISOC)
 8005090:	2f01      	cmp	r7, #1
 8005092:	d1e9      	bne.n	8005068 <USB_OTG_EPStartXfer+0xa8>
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8005094:	6900      	ldr	r0, [r0, #16]
 8005096:	6880      	ldr	r0, [r0, #8]
      if (((dsts.b.soffn)&0x1) == 0)
 8005098:	05c0      	lsls	r0, r0, #23
        depctl.b.setd1pid = 1;
 800509a:	bf54      	ite	pl
 800509c:	f044 5400 	orrpl.w	r4, r4, #536870912	; 0x20000000
        depctl.b.setd0pid = 1;
 80050a0:	f044 5480 	orrmi.w	r4, r4, #268435456	; 0x10000000
    depctl.b.epena = 1;
 80050a4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 80050a8:	6014      	str	r4, [r2, #0]
  if (pdev->cfg.dma_enable == 0)
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1b2      	bne.n	8005014 <USB_OTG_EPStartXfer+0x54>
    count32b =  (len + 3) / 4;
 80050ae:	b2b0      	uxth	r0, r6
 80050b0:	3003      	adds	r0, #3
    for (i = 0; i < count32b; i++)
 80050b2:	1080      	asrs	r0, r0, #2
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80050b4:	f8dc 40d0 	ldr.w	r4, [ip, #208]	; 0xd0
    for (i = 0; i < count32b; i++)
 80050b8:	d0ac      	beq.n	8005014 <USB_OTG_EPStartXfer+0x54>
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 80050ba:	68ca      	ldr	r2, [r1, #12]
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80050bc:	f852 1b04 	ldr.w	r1, [r2], #4
 80050c0:	6021      	str	r1, [r4, #0]
    for (i = 0; i < count32b; i++)
 80050c2:	3301      	adds	r3, #1
 80050c4:	4298      	cmp	r0, r3
 80050c6:	d1f9      	bne.n	80050bc <USB_OTG_EPStartXfer+0xfc>
 80050c8:	e7a4      	b.n	8005014 <USB_OTG_EPStartXfer+0x54>
        depctl.b.setd0pid = 1;
 80050ca:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80050ce:	e79e      	b.n	800500e <USB_OTG_EPStartXfer+0x4e>
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80050d0:	690d      	ldr	r5, [r1, #16]
 80050d2:	6155      	str	r5, [r2, #20]
    if (ep->type == EP_TYPE_ISOC)
 80050d4:	2f01      	cmp	r7, #1
 80050d6:	d1c7      	bne.n	8005068 <USB_OTG_EPStartXfer+0xa8>
 80050d8:	e7dc      	b.n	8005094 <USB_OTG_EPStartXfer+0xd4>
        deptsiz.b.mc = 1;
 80050da:	f369 755e 	bfi	r5, r9, #29, #2
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 80050de:	6115      	str	r5, [r2, #16]
    if (pdev->cfg.dma_enable == 1)
 80050e0:	78c3      	ldrb	r3, [r0, #3]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d1d6      	bne.n	8005094 <USB_OTG_EPStartXfer+0xd4>
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80050e6:	690d      	ldr	r5, [r1, #16]
 80050e8:	6155      	str	r5, [r2, #20]
 80050ea:	e7d3      	b.n	8005094 <USB_OTG_EPStartXfer+0xd4>
 80050ec:	690b      	ldr	r3, [r1, #16]
 80050ee:	6153      	str	r3, [r2, #20]
 80050f0:	e7ba      	b.n	8005068 <USB_OTG_EPStartXfer+0xa8>
 80050f2:	bf00      	nop

080050f4 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80050f4:	b470      	push	{r4, r5, r6}
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 80050f6:	784b      	ldrb	r3, [r1, #1]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d01f      	beq.n	800513c <USB_OTG_EP0StartXfer+0x48>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80050fc:	780b      	ldrb	r3, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80050fe:	694d      	ldr	r5, [r1, #20]
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8005100:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005104:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8005106:	6822      	ldr	r2, [r4, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8005108:	6923      	ldr	r3, [r4, #16]
    if (ep->xfer_len == 0)
 800510a:	b19d      	cbz	r5, 8005134 <USB_OTG_EP0StartXfer+0x40>
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 800510c:	688d      	ldr	r5, [r1, #8]
 800510e:	614d      	str	r5, [r1, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 8005110:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8005114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005118:	f365 0306 	bfi	r3, r5, #0, #7
      deptsiz.b.pktcnt = 1;
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 800511c:	6123      	str	r3, [r4, #16]
    if (pdev->cfg.dma_enable == 1)
 800511e:	78c3      	ldrb	r3, [r0, #3]
 8005120:	2b01      	cmp	r3, #1
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8005122:	bf04      	itt	eq
 8005124:	690b      	ldreq	r3, [r1, #16]
 8005126:	6163      	streq	r3, [r4, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8005128:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 800512c:	6022      	str	r2, [r4, #0]
    
  }
  return status;
}
 800512e:	2000      	movs	r0, #0
 8005130:	bc70      	pop	{r4, r5, r6}
 8005132:	4770      	bx	lr
      deptsiz.b.xfersize = ep->maxpacket;
 8005134:	688d      	ldr	r5, [r1, #8]
 8005136:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 800513a:	e7eb      	b.n	8005114 <USB_OTG_EP0StartXfer+0x20>
    in_regs = pdev->regs.INEP_REGS[0];
 800513c:	6984      	ldr	r4, [r0, #24]
    if (ep->xfer_len == 0)
 800513e:	694d      	ldr	r5, [r1, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 8005140:	6822      	ldr	r2, [r4, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8005142:	6923      	ldr	r3, [r4, #16]
    if (ep->xfer_len == 0)
 8005144:	b9bd      	cbnz	r5, 8005176 <USB_OTG_EP0StartXfer+0x82>
 8005146:	f365 0306 	bfi	r3, r5, #0, #7
      deptsiz.b.pktcnt = 1;
 800514a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 800514e:	6123      	str	r3, [r4, #16]
    if (pdev->cfg.dma_enable == 1)
 8005150:	78c3      	ldrb	r3, [r0, #3]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d018      	beq.n	8005188 <USB_OTG_EP0StartXfer+0x94>
    depctl.b.epena = 1;
 8005156:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 800515a:	6022      	str	r2, [r4, #0]
    if (pdev->cfg.dma_enable == 0)
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <USB_OTG_EP0StartXfer+0x3a>
      if (ep->xfer_len > 0)
 8005160:	694b      	ldr	r3, [r1, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0e3      	beq.n	800512e <USB_OTG_EP0StartXfer+0x3a>
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8005166:	6902      	ldr	r2, [r0, #16]
          fifoemptymsk |= 1 << ep->num;
 8005168:	7808      	ldrb	r0, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800516a:	6b51      	ldr	r1, [r2, #52]	; 0x34
          fifoemptymsk |= 1 << ep->num;
 800516c:	2301      	movs	r3, #1
 800516e:	4083      	lsls	r3, r0
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8005170:	430b      	orrs	r3, r1
 8005172:	6353      	str	r3, [r2, #52]	; 0x34
 8005174:	e7db      	b.n	800512e <USB_OTG_EP0StartXfer+0x3a>
      if (ep->xfer_len > ep->maxpacket)
 8005176:	688e      	ldr	r6, [r1, #8]
 8005178:	42b5      	cmp	r5, r6
        ep->xfer_len = ep->maxpacket;
 800517a:	bf86      	itte	hi
 800517c:	614e      	strhi	r6, [r1, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 800517e:	f006 057f 	andhi.w	r5, r6, #127	; 0x7f
        deptsiz.b.xfersize = ep->xfer_len;
 8005182:	f005 057f 	andls.w	r5, r5, #127	; 0x7f
 8005186:	e7de      	b.n	8005146 <USB_OTG_EP0StartXfer+0x52>
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8005188:	780b      	ldrb	r3, [r1, #0]
 800518a:	6909      	ldr	r1, [r1, #16]
 800518c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    depctl.b.epena = 1;
 8005190:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8005194:	6983      	ldr	r3, [r0, #24]
 8005196:	6159      	str	r1, [r3, #20]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8005198:	6022      	str	r2, [r4, #0]
 800519a:	e7c8      	b.n	800512e <USB_OTG_EP0StartXfer+0x3a>

0800519c <USB_OTG_EPSetStall>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 800519c:	784b      	ldrb	r3, [r1, #1]
 800519e:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80051a0:	780b      	ldrb	r3, [r1, #0]
 80051a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  if (ep->is_in == 1)
 80051a6:	d006      	beq.n	80051b6 <USB_OTG_EPSetStall+0x1a>
    depctl.b.stall = 1;
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80051a8:	6d42      	ldr	r2, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80051aa:	6813      	ldr	r3, [r2, #0]
    /* set the stall bit */
    depctl.b.stall = 1;
 80051ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80051b0:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 80051b2:	2000      	movs	r0, #0
 80051b4:	4770      	bx	lr
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80051b6:	6982      	ldr	r2, [r0, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80051b8:	6813      	ldr	r3, [r2, #0]
    if (depctl.b.epena)
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	daf6      	bge.n	80051ac <USB_OTG_EPSetStall+0x10>
      depctl.b.epdis = 1;
 80051be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    depctl.b.stall = 1;
 80051c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	2000      	movs	r0, #0
 80051ca:	4770      	bx	lr

080051cc <USB_OTG_EPClearStall>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
 80051cc:	784b      	ldrb	r3, [r1, #1]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80051ce:	78ca      	ldrb	r2, [r1, #3]
  if (ep->is_in == 1)
 80051d0:	2b01      	cmp	r3, #1
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80051d2:	780b      	ldrb	r3, [r1, #0]
 80051d4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80051d8:	f1a2 0202 	sub.w	r2, r2, #2
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80051dc:	bf0c      	ite	eq
 80051de:	6980      	ldreq	r0, [r0, #24]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80051e0:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 80051e2:	6803      	ldr	r3, [r0, #0]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80051e4:	2a01      	cmp	r2, #1
  depctl.b.stall = 0;
 80051e6:	f36f 5355 	bfc	r3, #21, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 80051ea:	bf98      	it	ls
 80051ec:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80051f0:	6003      	str	r3, [r0, #0]
  return status;
}
 80051f2:	2000      	movs	r0, #0
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop

080051f8 <USB_OTG_ReadDevAllOutEp_itr>:
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 80051f8:	6903      	ldr	r3, [r0, #16]
 80051fa:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4018      	ands	r0, r3
  return ((v & 0xffff0000) >> 16);
}
 8005200:	0c00      	lsrs	r0, r0, #16
 8005202:	4770      	bx	lr

08005204 <USB_OTG_ReadDevOutEP_itr>:
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8005204:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8005208:	6903      	ldr	r3, [r0, #16]
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 800520a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800520c:	6890      	ldr	r0, [r2, #8]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 800520e:	695b      	ldr	r3, [r3, #20]
  return v;
}
 8005210:	4018      	ands	r0, r3
 8005212:	4770      	bx	lr

08005214 <USB_OTG_ReadDevAllInEPItr>:
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8005214:	6903      	ldr	r3, [r0, #16]
 8005216:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	4018      	ands	r0, r3
  return (v & 0xffff);
}
 800521c:	b280      	uxth	r0, r0
 800521e:	4770      	bx	lr

08005220 <USB_OTG_EP0_OutStart>:
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 8005220:	4a08      	ldr	r2, [pc, #32]	; (8005244 <USB_OTG_EP0_OutStart+0x24>)
  doeptsize0.b.xfersize = 8 * 3;
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8005222:	6d43      	ldr	r3, [r0, #84]	; 0x54
  doeptsize0.b.xfersize = 8 * 3;
 8005224:	2118      	movs	r1, #24
 8005226:	f361 0206 	bfi	r2, r1, #0, #7
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 800522a:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 800522c:	78c2      	ldrb	r2, [r0, #3]
 800522e:	2a01      	cmp	r2, #1
 8005230:	d106      	bne.n	8005240 <USB_OTG_EP0_OutStart+0x20>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8005232:	f200 50cc 	addw	r0, r0, #1484	; 0x5cc
 8005236:	6158      	str	r0, [r3, #20]
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
    doepctl.b.epena = 1;
    doepctl.d32 = 0x80008000;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8005238:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 800523c:	6819      	ldr	r1, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	60080000 	.word	0x60080000

08005248 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8005248:	b530      	push	{r4, r5, lr}
  USBD_Status ret = USBD_OK;  
  
  switch (req->bRequest) 
 800524a:	784b      	ldrb	r3, [r1, #1]
{
 800524c:	b083      	sub	sp, #12
 800524e:	460d      	mov	r5, r1
 8005250:	4604      	mov	r4, r0
  switch (req->bRequest) 
 8005252:	2b09      	cmp	r3, #9
 8005254:	d80c      	bhi.n	8005270 <USBD_StdDevReq+0x28>
 8005256:	e8df f003 	tbb	[pc, r3]
 800525a:	4d39      	.short	0x4d39
 800525c:	050b600b 	.word	0x050b600b
 8005260:	198f0b76 	.word	0x198f0b76
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005264:	888b      	ldrh	r3, [r1, #4]
 8005266:	b91b      	cbnz	r3, 8005270 <USBD_StdDevReq+0x28>
 8005268:	88cb      	ldrh	r3, [r1, #6]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8094 	beq.w	8005398 <USBD_StdDevReq+0x150>

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  
  DCD_EP_Stall(pdev , 0x80);
 8005270:	2180      	movs	r1, #128	; 0x80
 8005272:	4620      	mov	r0, r4
 8005274:	f001 f84e 	bl	8006314 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 8005278:	2100      	movs	r1, #0
 800527a:	4620      	mov	r0, r4
 800527c:	f001 f84a 	bl	8006314 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff ffcd 	bl	8005220 <USB_OTG_EP0_OutStart>
}
 8005286:	2000      	movs	r0, #0
 8005288:	b003      	add	sp, #12
 800528a:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);                 
 800528c:	7889      	ldrb	r1, [r1, #2]
 800528e:	4da2      	ldr	r5, [pc, #648]	; (8005518 <USBD_StdDevReq+0x2d0>)
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8005290:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8005292:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8005294:	d8ec      	bhi.n	8005270 <USBD_StdDevReq+0x28>
    switch (pdev->dev.device_status) 
 8005296:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 800529a:	2b02      	cmp	r3, #2
 800529c:	f000 8097 	beq.w	80053ce <USBD_StdDevReq+0x186>
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d1e5      	bne.n	8005270 <USBD_StdDevReq+0x28>
      if (cfgidx == 0) 
 80052a4:	2900      	cmp	r1, #0
 80052a6:	f000 812b 	beq.w	8005500 <USBD_StdDevReq+0x2b8>
      else  if (cfgidx != pdev->dev.device_config) 
 80052aa:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
 80052ae:	2901      	cmp	r1, #1
 80052b0:	f000 811e 	beq.w	80054f0 <USBD_StdDevReq+0x2a8>
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80052b4:	f000 fb80 	bl	80059b8 <USBD_ClrCfg>
        pdev->dev.device_config = cfgidx;
 80052b8:	7829      	ldrb	r1, [r5, #0]
 80052ba:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 fb6e 	bl	80059a0 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 fbaf 	bl	8005a28 <USBD_CtlSendStatus>
 80052ca:	e7dc      	b.n	8005286 <USBD_StdDevReq+0x3e>
  switch (pdev->dev.device_status) 
 80052cc:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80052d0:	2201      	movs	r2, #1
 80052d2:	3b02      	subs	r3, #2
 80052d4:	4293      	cmp	r3, r2
 80052d6:	f04f 0103 	mov.w	r1, #3
 80052da:	d8c9      	bhi.n	8005270 <USBD_StdDevReq+0x28>
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 80052dc:	4b8f      	ldr	r3, [pc, #572]	; (800551c <USBD_StdDevReq+0x2d4>)
    if (pdev->dev.DevRemoteWakeup) 
 80052de:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 80052e2:	601a      	str	r2, [r3, #0]
    if (pdev->dev.DevRemoteWakeup) 
 80052e4:	b100      	cbz	r0, 80052e8 <USBD_StdDevReq+0xa0>
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80052e6:	6019      	str	r1, [r3, #0]
    USBD_CtlSendData (pdev, 
 80052e8:	4620      	mov	r0, r4
 80052ea:	2202      	movs	r2, #2
 80052ec:	498b      	ldr	r1, [pc, #556]	; (800551c <USBD_StdDevReq+0x2d4>)
 80052ee:	f000 fb6b 	bl	80059c8 <USBD_CtlSendData>
 80052f2:	e7c8      	b.n	8005286 <USBD_StdDevReq+0x3e>
  switch (pdev->dev.device_status)
 80052f4:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80052f8:	3b02      	subs	r3, #2
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d8b8      	bhi.n	8005270 <USBD_StdDevReq+0x28>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80052fe:	884b      	ldrh	r3, [r1, #2]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d1c0      	bne.n	8005286 <USBD_StdDevReq+0x3e>
      pdev->dev.class_cb->Setup (pdev, req);   
 8005304:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
      pdev->dev.DevRemoteWakeup = 0; 
 8005308:	2200      	movs	r2, #0
      pdev->dev.class_cb->Setup (pdev, req);   
 800530a:	689b      	ldr	r3, [r3, #8]
      pdev->dev.DevRemoteWakeup = 0; 
 800530c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 8005310:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005312:	4620      	mov	r0, r4
 8005314:	f000 fb88 	bl	8005a28 <USBD_CtlSendStatus>
 8005318:	e7b5      	b.n	8005286 <USBD_StdDevReq+0x3e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800531a:	884b      	ldrh	r3, [r1, #2]
 800531c:	2b01      	cmp	r3, #1
 800531e:	f000 80e1 	beq.w	80054e4 <USBD_StdDevReq+0x29c>
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8005322:	2b02      	cmp	r3, #2
 8005324:	d1af      	bne.n	8005286 <USBD_StdDevReq+0x3e>
           ((req->wIndex & 0xFF) == 0))
 8005326:	888b      	ldrh	r3, [r1, #4]
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8005328:	f013 0fff 	tst.w	r3, #255	; 0xff
 800532c:	d1ab      	bne.n	8005286 <USBD_StdDevReq+0x3e>
    switch (test_mode) 
 800532e:	0a1b      	lsrs	r3, r3, #8
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8005330:	6902      	ldr	r2, [r0, #16]
    switch (test_mode) 
 8005332:	3b01      	subs	r3, #1
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8005334:	6852      	ldr	r2, [r2, #4]
    switch (test_mode) 
 8005336:	2b04      	cmp	r3, #4
 8005338:	f200 8088 	bhi.w	800544c <USBD_StdDevReq+0x204>
 800533c:	e8df f003 	tbb	[pc, r3]
 8005340:	9e969a86 	.word	0x9e969a86
 8005344:	92          	.byte	0x92
 8005345:	00          	.byte	0x00
  switch (req->wValue >> 8)
 8005346:	884a      	ldrh	r2, [r1, #2]
  len = req->wLength ;
 8005348:	88cb      	ldrh	r3, [r1, #6]
 800534a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800534e:	0a13      	lsrs	r3, r2, #8
 8005350:	3b01      	subs	r3, #1
 8005352:	2b06      	cmp	r3, #6
 8005354:	d88c      	bhi.n	8005270 <USBD_StdDevReq+0x28>
 8005356:	a101      	add	r1, pc, #4	; (adr r1, 800535c <USBD_StdDevReq+0x114>)
 8005358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800535c:	0800542b 	.word	0x0800542b
 8005360:	080053ed 	.word	0x080053ed
 8005364:	0800543b 	.word	0x0800543b
 8005368:	08005271 	.word	0x08005271
 800536c:	08005271 	.word	0x08005271
 8005370:	08005271 	.word	0x08005271
 8005374:	08005271 	.word	0x08005271
  if (req->wLength != 1) 
 8005378:	88ca      	ldrh	r2, [r1, #6]
 800537a:	2a01      	cmp	r2, #1
 800537c:	f47f af78 	bne.w	8005270 <USBD_StdDevReq+0x28>
    switch (pdev->dev.device_status )  
 8005380:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8005384:	2b02      	cmp	r3, #2
 8005386:	d01e      	beq.n	80053c6 <USBD_StdDevReq+0x17e>
 8005388:	2b03      	cmp	r3, #3
 800538a:	f47f af71 	bne.w	8005270 <USBD_StdDevReq+0x28>
      USBD_CtlSendData (pdev, 
 800538e:	f500 7188 	add.w	r1, r0, #272	; 0x110
 8005392:	f000 fb19 	bl	80059c8 <USBD_CtlSendData>
 8005396:	e776      	b.n	8005286 <USBD_StdDevReq+0x3e>
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8005398:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800539c:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 800539e:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80053a0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80053a4:	f43f af64 	beq.w	8005270 <USBD_StdDevReq+0x28>
      pdev->dev.device_address = dev_addr;
 80053a8:	f880 5114 	strb.w	r5, [r0, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 80053ac:	4629      	mov	r1, r5
 80053ae:	f000 ffe9 	bl	8006384 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 fb38 	bl	8005a28 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	f000 809d 	beq.w	80054f8 <USBD_StdDevReq+0x2b0>
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 80053be:	2302      	movs	r3, #2
 80053c0:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
 80053c4:	e75f      	b.n	8005286 <USBD_StdDevReq+0x3e>
      USBD_CtlSendData (pdev, 
 80053c6:	4956      	ldr	r1, [pc, #344]	; (8005520 <USBD_StdDevReq+0x2d8>)
 80053c8:	f000 fafe 	bl	80059c8 <USBD_CtlSendData>
 80053cc:	e75b      	b.n	8005286 <USBD_StdDevReq+0x3e>
      if (cfgidx) 
 80053ce:	2900      	cmp	r1, #0
 80053d0:	f000 808e 	beq.w	80054f0 <USBD_StdDevReq+0x2a8>
        pdev->dev.device_config = cfgidx;
 80053d4:	2101      	movs	r1, #1
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 80053d6:	2303      	movs	r3, #3
        pdev->dev.device_config = cfgidx;
 80053d8:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 80053dc:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 80053e0:	f000 fade 	bl	80059a0 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 80053e4:	4620      	mov	r0, r4
 80053e6:	f000 fb1f 	bl	8005a28 <USBD_CtlSendStatus>
 80053ea:	e74c      	b.n	8005286 <USBD_StdDevReq+0x3e>
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80053ec:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80053f0:	7880      	ldrb	r0, [r0, #2]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f10d 0106 	add.w	r1, sp, #6
 80053f8:	4798      	blx	r3
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053fa:	2302      	movs	r3, #2
 80053fc:	7043      	strb	r3, [r0, #1]
    pdev->dev.pConfig_descriptor = pbuf;    
 80053fe:	f8c4 05f0 	str.w	r0, [r4, #1520]	; 0x5f0
  if((len != 0)&& (req->wLength != 0))
 8005402:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f43f af3d 	beq.w	8005286 <USBD_StdDevReq+0x3e>
 800540c:	88ea      	ldrh	r2, [r5, #6]
 800540e:	2a00      	cmp	r2, #0
 8005410:	f43f af39 	beq.w	8005286 <USBD_StdDevReq+0x3e>
    len = MIN(len , req->wLength);
 8005414:	4293      	cmp	r3, r2
 8005416:	bf28      	it	cs
 8005418:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, 
 800541a:	4601      	mov	r1, r0
 800541c:	461a      	mov	r2, r3
 800541e:	4620      	mov	r0, r4
    len = MIN(len , req->wLength);
 8005420:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, 
 8005424:	f000 fad0 	bl	80059c8 <USBD_CtlSendData>
 8005428:	e72d      	b.n	8005286 <USBD_StdDevReq+0x3e>
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 800542a:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
 800542e:	7880      	ldrb	r0, [r0, #2]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f10d 0106 	add.w	r1, sp, #6
 8005436:	4798      	blx	r3
 8005438:	e7e3      	b.n	8005402 <USBD_StdDevReq+0x1ba>
    switch ((uint8_t)(req->wValue))
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	2a05      	cmp	r2, #5
 800543e:	f63f af17 	bhi.w	8005270 <USBD_StdDevReq+0x28>
 8005442:	e8df f002 	tbb	[pc, r2]
 8005446:	3f47      	.short	0x3f47
 8005448:	1f272f37 	.word	0x1f272f37
      dctl.b.tstctl = 1;
 800544c:	2301      	movs	r3, #1
 800544e:	f363 1206 	bfi	r2, r3, #4, #3
    SET_TEST_MODE = dctl;
 8005452:	4b34      	ldr	r3, [pc, #208]	; (8005524 <USBD_StdDevReq+0x2dc>)
    pdev->dev.test_mode = 1;
 8005454:	2101      	movs	r1, #1
 8005456:	f884 1116 	strb.w	r1, [r4, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 800545a:	4620      	mov	r0, r4
    SET_TEST_MODE = dctl;
 800545c:	601a      	str	r2, [r3, #0]
    USBD_CtlSendStatus(pdev);
 800545e:	f000 fae3 	bl	8005a28 <USBD_CtlSendStatus>
 8005462:	e710      	b.n	8005286 <USBD_StdDevReq+0x3e>
      dctl.b.tstctl = 5;
 8005464:	2305      	movs	r3, #5
 8005466:	f363 1206 	bfi	r2, r3, #4, #3
 800546a:	e7f2      	b.n	8005452 <USBD_StdDevReq+0x20a>
      dctl.b.tstctl = 3;
 800546c:	2303      	movs	r3, #3
 800546e:	f363 1206 	bfi	r2, r3, #4, #3
 8005472:	e7ee      	b.n	8005452 <USBD_StdDevReq+0x20a>
      dctl.b.tstctl = 2;
 8005474:	2302      	movs	r3, #2
 8005476:	f363 1206 	bfi	r2, r3, #4, #3
 800547a:	e7ea      	b.n	8005452 <USBD_StdDevReq+0x20a>
      dctl.b.tstctl = 4;
 800547c:	2304      	movs	r3, #4
 800547e:	f363 1206 	bfi	r2, r3, #4, #3
 8005482:	e7e6      	b.n	8005452 <USBD_StdDevReq+0x20a>
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8005484:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
 8005488:	7880      	ldrb	r0, [r0, #2]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f10d 0106 	add.w	r1, sp, #6
 8005490:	4798      	blx	r3
 8005492:	e7b6      	b.n	8005402 <USBD_StdDevReq+0x1ba>
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 8005494:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
 8005498:	7880      	ldrb	r0, [r0, #2]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f10d 0106 	add.w	r1, sp, #6
 80054a0:	4798      	blx	r3
 80054a2:	e7ae      	b.n	8005402 <USBD_StdDevReq+0x1ba>
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 80054a4:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
 80054a8:	7880      	ldrb	r0, [r0, #2]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f10d 0106 	add.w	r1, sp, #6
 80054b0:	4798      	blx	r3
 80054b2:	e7a6      	b.n	8005402 <USBD_StdDevReq+0x1ba>
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 80054b4:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
 80054b8:	7880      	ldrb	r0, [r0, #2]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f10d 0106 	add.w	r1, sp, #6
 80054c0:	4798      	blx	r3
 80054c2:	e79e      	b.n	8005402 <USBD_StdDevReq+0x1ba>
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 80054c4:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
 80054c8:	7880      	ldrb	r0, [r0, #2]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f10d 0106 	add.w	r1, sp, #6
 80054d0:	4798      	blx	r3
 80054d2:	e796      	b.n	8005402 <USBD_StdDevReq+0x1ba>
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 80054d4:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
 80054d8:	7880      	ldrb	r0, [r0, #2]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f10d 0106 	add.w	r1, sp, #6
 80054e0:	4798      	blx	r3
 80054e2:	e78e      	b.n	8005402 <USBD_StdDevReq+0x1ba>
    pdev->dev.class_cb->Setup (pdev, req);   
 80054e4:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
    pdev->dev.DevRemoteWakeup = 1;  
 80054e8:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    pdev->dev.class_cb->Setup (pdev, req);   
 80054ec:	6893      	ldr	r3, [r2, #8]
 80054ee:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 fa99 	bl	8005a28 <USBD_CtlSendStatus>
 80054f6:	e6c6      	b.n	8005286 <USBD_StdDevReq+0x3e>
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 80054f8:	2301      	movs	r3, #1
 80054fa:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
 80054fe:	e6c2      	b.n	8005286 <USBD_StdDevReq+0x3e>
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8005500:	2302      	movs	r3, #2
        pdev->dev.device_config = cfgidx;          
 8005502:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8005506:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
        USBD_ClrCfg(pdev , cfgidx);
 800550a:	f000 fa55 	bl	80059b8 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 800550e:	4620      	mov	r0, r4
 8005510:	f000 fa8a 	bl	8005a28 <USBD_CtlSendStatus>
 8005514:	e6b7      	b.n	8005286 <USBD_StdDevReq+0x3e>
 8005516:	bf00      	nop
 8005518:	20000bb4 	.word	0x20000bb4
 800551c:	20000ba8 	.word	0x20000ba8
 8005520:	20000bac 	.word	0x20000bac
 8005524:	20001c24 	.word	0x20001c24

08005528 <USBD_StdItfReq>:
{
 8005528:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev.device_status) 
 800552a:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 800552e:	2b03      	cmp	r3, #3
{
 8005530:	4604      	mov	r4, r0
  switch (pdev->dev.device_status) 
 8005532:	d103      	bne.n	800553c <USBD_StdItfReq+0x14>
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 8005534:	790b      	ldrb	r3, [r1, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	460d      	mov	r5, r1
 800553a:	d90b      	bls.n	8005554 <USBD_StdItfReq+0x2c>
  DCD_EP_Stall(pdev , 0x80);
 800553c:	2180      	movs	r1, #128	; 0x80
 800553e:	f000 fee9 	bl	8006314 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 8005542:	2100      	movs	r1, #0
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fee5 	bl	8006314 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff fe68 	bl	8005220 <USB_OTG_EP0_OutStart>
}
 8005550:	2000      	movs	r0, #0
 8005552:	bd38      	pop	{r3, r4, r5, pc}
      pdev->dev.class_cb->Setup (pdev, req); 
 8005554:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800555c:	88eb      	ldrh	r3, [r5, #6]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f6      	bne.n	8005550 <USBD_StdItfReq+0x28>
         USBD_CtlSendStatus(pdev);
 8005562:	4620      	mov	r0, r4
 8005564:	f000 fa60 	bl	8005a28 <USBD_CtlSendStatus>
 8005568:	e7f2      	b.n	8005550 <USBD_StdItfReq+0x28>
 800556a:	bf00      	nop

0800556c <USBD_StdEPReq>:
{
 800556c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & USB_REQ_TYPE_MASK) == USB_REQ_TYPE_CLASS)
 800556e:	780b      	ldrb	r3, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8005570:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & USB_REQ_TYPE_MASK) == USB_REQ_TYPE_CLASS)
 8005572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005576:	2b20      	cmp	r3, #32
{
 8005578:	4605      	mov	r5, r0
  if ((req->bmRequest & USB_REQ_TYPE_MASK) == USB_REQ_TYPE_CLASS)
 800557a:	d059      	beq.n	8005630 <USBD_StdEPReq+0xc4>
  switch (req->bRequest) 
 800557c:	784b      	ldrb	r3, [r1, #1]
 800557e:	2b01      	cmp	r3, #1
 8005580:	460c      	mov	r4, r1
 8005582:	b2d6      	uxtb	r6, r2
 8005584:	d033      	beq.n	80055ee <USBD_StdEPReq+0x82>
 8005586:	d319      	bcc.n	80055bc <USBD_StdEPReq+0x50>
 8005588:	2b03      	cmp	r3, #3
 800558a:	d115      	bne.n	80055b8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev.device_status) 
 800558c:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8005590:	2b02      	cmp	r3, #2
 8005592:	d030      	beq.n	80055f6 <USBD_StdEPReq+0x8a>
 8005594:	2b03      	cmp	r3, #3
 8005596:	d13f      	bne.n	8005618 <USBD_StdEPReq+0xac>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005598:	884b      	ldrh	r3, [r1, #2]
 800559a:	b923      	cbnz	r3, 80055a6 <USBD_StdEPReq+0x3a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800559c:	0673      	lsls	r3, r6, #25
 800559e:	d002      	beq.n	80055a6 <USBD_StdEPReq+0x3a>
          DCD_EP_Stall(pdev , ep_addr);
 80055a0:	4631      	mov	r1, r6
 80055a2:	f000 feb7 	bl	8006314 <DCD_EP_Stall>
          pdev->dev.class_cb->Setup (pdev, req);
 80055a6:	f8d5 35e4 	ldr.w	r3, [r5, #1508]	; 0x5e4
 80055aa:	4621      	mov	r1, r4
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	4628      	mov	r0, r5
 80055b0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 fa38 	bl	8005a28 <USBD_CtlSendStatus>
}
 80055b8:	2000      	movs	r0, #0
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev.device_status) 
 80055bc:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d018      	beq.n	80055f6 <USBD_StdEPReq+0x8a>
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d127      	bne.n	8005618 <USBD_StdEPReq+0xac>
      if ((ep_addr & 0x80)== 0x80)
 80055c8:	0613      	lsls	r3, r2, #24
 80055ca:	d436      	bmi.n	800563a <USBD_StdEPReq+0xce>
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80055cc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80055d0:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80055d4:	f896 3376 	ldrb.w	r3, [r6, #886]	; 0x376
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d138      	bne.n	800564e <USBD_StdEPReq+0xe2>
          USBD_ep_status = 0x0000;  
 80055dc:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <USBD_StdEPReq+0xec>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
      USBD_CtlSendData (pdev,
 80055e2:	4628      	mov	r0, r5
 80055e4:	2202      	movs	r2, #2
 80055e6:	491c      	ldr	r1, [pc, #112]	; (8005658 <USBD_StdEPReq+0xec>)
 80055e8:	f000 f9ee 	bl	80059c8 <USBD_CtlSendData>
      break;
 80055ec:	e7e4      	b.n	80055b8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev.device_status) 
 80055ee:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d105      	bne.n	8005602 <USBD_StdEPReq+0x96>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80055f6:	0672      	lsls	r2, r6, #25
 80055f8:	d0de      	beq.n	80055b8 <USBD_StdEPReq+0x4c>
        DCD_EP_Stall(pdev , ep_addr);
 80055fa:	4631      	mov	r1, r6
 80055fc:	f000 fe8a 	bl	8006314 <DCD_EP_Stall>
 8005600:	e7da      	b.n	80055b8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev.device_status) 
 8005602:	2b03      	cmp	r3, #3
 8005604:	d108      	bne.n	8005618 <USBD_StdEPReq+0xac>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005606:	884b      	ldrh	r3, [r1, #2]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1d5      	bne.n	80055b8 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800560c:	0671      	lsls	r1, r6, #25
 800560e:	d0d0      	beq.n	80055b2 <USBD_StdEPReq+0x46>
          DCD_EP_ClrStall(pdev , ep_addr);
 8005610:	4631      	mov	r1, r6
 8005612:	f000 fe9b 	bl	800634c <DCD_EP_ClrStall>
 8005616:	e7c6      	b.n	80055a6 <USBD_StdEPReq+0x3a>
  DCD_EP_Stall(pdev , 0x80);
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	f000 fe7b 	bl	8006314 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 800561e:	2100      	movs	r1, #0
 8005620:	4628      	mov	r0, r5
 8005622:	f000 fe77 	bl	8006314 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8005626:	4628      	mov	r0, r5
 8005628:	f7ff fdfa 	bl	8005220 <USB_OTG_EP0_OutStart>
}
 800562c:	2000      	movs	r0, #0
 800562e:	bd70      	pop	{r4, r5, r6, pc}
    pdev->dev.class_cb->Setup (pdev, req);
 8005630:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	4798      	blx	r3
    return ret;
 8005638:	e7be      	b.n	80055b8 <USBD_StdEPReq+0x4c>
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 800563a:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 800563e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005642:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8005646:	f896 311e 	ldrb.w	r3, [r6, #286]	; 0x11e
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0c6      	beq.n	80055dc <USBD_StdEPReq+0x70>
          USBD_ep_status = 0x0001;     
 800564e:	4b02      	ldr	r3, [pc, #8]	; (8005658 <USBD_StdEPReq+0xec>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e7c5      	b.n	80055e2 <USBD_StdEPReq+0x76>
 8005656:	bf00      	nop
 8005658:	20000bb0 	.word	0x20000bb0

0800565c <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 800565c:	f890 35cc 	ldrb.w	r3, [r0, #1484]	; 0x5cc
 8005660:	700b      	strb	r3, [r1, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8005662:	f890 35cd 	ldrb.w	r3, [r0, #1485]	; 0x5cd
 8005666:	704b      	strb	r3, [r1, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8005668:	f890 25cf 	ldrb.w	r2, [r0, #1487]	; 0x5cf
 800566c:	f890 35ce 	ldrb.w	r3, [r0, #1486]	; 0x5ce
 8005670:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005674:	804b      	strh	r3, [r1, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8005676:	f890 25d1 	ldrb.w	r2, [r0, #1489]	; 0x5d1
 800567a:	f890 35d0 	ldrb.w	r3, [r0, #1488]	; 0x5d0
 800567e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005682:	808b      	strh	r3, [r1, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8005684:	f890 25d3 	ldrb.w	r2, [r0, #1491]	; 0x5d3
 8005688:	f890 35d2 	ldrb.w	r3, [r0, #1490]	; 0x5d2
 800568c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005690:	b29b      	uxth	r3, r3
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8005692:	2201      	movs	r2, #1
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8005694:	80cb      	strh	r3, [r1, #6]
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8005696:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 800569a:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111
 800569e:	4770      	bx	lr

080056a0 <USBD_CtlError>:
{
 80056a0:	b510      	push	{r4, lr}
  DCD_EP_Stall(pdev , 0x80);
 80056a2:	2180      	movs	r1, #128	; 0x80
{
 80056a4:	4604      	mov	r4, r0
  DCD_EP_Stall(pdev , 0x80);
 80056a6:	f000 fe35 	bl	8006314 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 80056aa:	4620      	mov	r0, r4
 80056ac:	2100      	movs	r1, #0
 80056ae:	f000 fe31 	bl	8006314 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 80056b2:	4620      	mov	r0, r4
}
 80056b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USB_OTG_EP0_OutStart(pdev);  
 80056b8:	f7ff bdb2 	b.w	8005220 <USB_OTG_EP0_OutStart>

080056bc <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80056bc:	b300      	cbz	r0, 8005700 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != 0)
 80056be:	7803      	ldrb	r3, [r0, #0]
{
 80056c0:	b430      	push	{r4, r5}
    while (*buf != 0)
 80056c2:	b1f3      	cbz	r3, 8005702 <USBD_GetString+0x46>
 80056c4:	4604      	mov	r4, r0
 80056c6:	2300      	movs	r3, #0
 80056c8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 80056cc:	3301      	adds	r3, #1
 80056ce:	b2db      	uxtb	r3, r3
    while (*buf != 0)
 80056d0:	2d00      	cmp	r5, #0
 80056d2:	d1f9      	bne.n	80056c8 <USBD_GetString+0xc>
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	3302      	adds	r3, #2
 80056d8:	b2dc      	uxtb	r4, r3
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80056da:	2503      	movs	r5, #3
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80056dc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80056de:	700c      	strb	r4, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80056e0:	704d      	strb	r5, [r1, #1]
    while (*desc != 0)
 80056e2:	7804      	ldrb	r4, [r0, #0]
 80056e4:	b15c      	cbz	r4, 80056fe <USBD_GetString+0x42>
 80056e6:	2302      	movs	r3, #2
      unicode[idx++] =  0x00;
 80056e8:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 80056f0:	548d      	strb	r5, [r1, r2]
    while (*desc != 0)
 80056f2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0x00;
 80056f6:	3302      	adds	r3, #2
 80056f8:	b2db      	uxtb	r3, r3
    while (*desc != 0)
 80056fa:	2c00      	cmp	r4, #0
 80056fc:	d1f5      	bne.n	80056ea <USBD_GetString+0x2e>
}
 80056fe:	bc30      	pop	{r4, r5}
 8005700:	4770      	bx	lr
    while (*buf != 0)
 8005702:	2402      	movs	r4, #2
 8005704:	4623      	mov	r3, r4
 8005706:	e7e8      	b.n	80056da <USBD_GetString+0x1e>

08005708 <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8005708:	b510      	push	{r4, lr}
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 800570a:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
{
 800570e:	4604      	mov	r4, r0
  pdev->dev.usr_cb->DeviceResumed(); 
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;  
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8005714:	2303      	movs	r3, #3
 8005716:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  return USBD_OK;
}
 800571a:	2000      	movs	r0, #0
 800571c:	bd10      	pop	{r4, pc}
 800571e:	bf00      	nop

08005720 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8005720:	b508      	push	{r3, lr}
  pdev->dev.device_old_status = pdev->dev.device_status;
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8005722:	2204      	movs	r2, #4
  pdev->dev.device_old_status = pdev->dev.device_status;
 8005724:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8005728:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
  pdev->dev.device_old_status = pdev->dev.device_status;
 800572c:	f880 1113 	strb.w	r1, [r0, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8005730:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
  pdev->dev.usr_cb->DeviceSuspended(); 
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	4798      	blx	r3
  return USBD_OK;
}
 8005738:	2000      	movs	r0, #0
 800573a:	bd08      	pop	{r3, pc}

0800573c <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 800573c:	b508      	push	{r3, lr}
  if(pdev->dev.class_cb->SOF)
 800573e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	b103      	cbz	r3, 8005748 <USBD_SOF+0xc>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8005746:	4798      	blx	r3
  }
  return USBD_OK;
}
 8005748:	2000      	movs	r0, #0
 800574a:	bd08      	pop	{r3, pc}

0800574c <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 800574c:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 800574e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	4798      	blx	r3
  return USBD_OK;
}
 8005756:	2000      	movs	r0, #0
 8005758:	bd08      	pop	{r3, pc}
 800575a:	bf00      	nop

0800575c <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 800575c:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 800575e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	4798      	blx	r3
  return USBD_OK;
}
 8005766:	2000      	movs	r0, #0
 8005768:	bd08      	pop	{r3, pc}
 800576a:	bf00      	nop

0800576c <USBD_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_DevConnected(USB_OTG_CORE_HANDLE  *pdev)
{
 800576c:	b510      	push	{r4, lr}
  pdev->dev.usr_cb->DeviceConnected();
 800576e:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
{
 8005772:	4604      	mov	r4, r0
  pdev->dev.usr_cb->DeviceConnected();
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	4798      	blx	r3
  pdev->dev.connection_status = 1;  
 8005778:	2301      	movs	r3, #1
 800577a:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
  return USBD_OK;
}
 800577e:	2000      	movs	r0, #0
 8005780:	bd10      	pop	{r4, pc}
 8005782:	bf00      	nop

08005784 <USBD_DevDisconnected>:
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_DevDisconnected(USB_OTG_CORE_HANDLE  *pdev)
{
  pdev->dev.usr_cb->DeviceDisconnected();
 8005784:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
{
 8005788:	b510      	push	{r4, lr}
 800578a:	4604      	mov	r4, r0
  pdev->dev.usr_cb->DeviceDisconnected();
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	4798      	blx	r3
  pdev->dev.class_cb->DeInit(pdev, 0);
 8005790:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8005794:	4620      	mov	r0, r4
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2100      	movs	r1, #0
 800579a:	4798      	blx	r3
  pdev->dev.connection_status = 0;    
 800579c:	2000      	movs	r0, #0
 800579e:	f884 0115 	strb.w	r0, [r4, #277]	; 0x115
  return USBD_OK;
}
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <USBD_Reset>:
  DCD_EP_Open(pdev,
 80057a4:	2300      	movs	r3, #0
{
 80057a6:	b510      	push	{r4, lr}
  DCD_EP_Open(pdev,
 80057a8:	4619      	mov	r1, r3
{
 80057aa:	4604      	mov	r4, r0
  DCD_EP_Open(pdev,
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	f000 fd17 	bl	80061e0 <DCD_EP_Open>
  DCD_EP_Open(pdev,
 80057b2:	2180      	movs	r1, #128	; 0x80
 80057b4:	4620      	mov	r0, r4
 80057b6:	2300      	movs	r3, #0
 80057b8:	2240      	movs	r2, #64	; 0x40
 80057ba:	f000 fd11 	bl	80061e0 <DCD_EP_Open>
  pdev->dev.device_status = USB_OTG_DEFAULT;
 80057be:	2201      	movs	r2, #1
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 80057c0:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
  pdev->dev.device_status = USB_OTG_DEFAULT;
 80057c4:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 80057c8:	78a0      	ldrb	r0, [r4, #2]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4798      	blx	r3
}
 80057ce:	2000      	movs	r0, #0
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	bf00      	nop

080057d4 <USBD_SetupStage>:
{
 80057d4:	b510      	push	{r4, lr}
 80057d6:	b082      	sub	sp, #8
  USBD_ParseSetupRequest(pdev , &req);
 80057d8:	4669      	mov	r1, sp
{
 80057da:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(pdev , &req);
 80057dc:	f7ff ff3e 	bl	800565c <USBD_ParseSetupRequest>
  switch (req.bmRequest & 0x1F) 
 80057e0:	f89d 1000 	ldrb.w	r1, [sp]
 80057e4:	f001 031f 	and.w	r3, r1, #31
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d018      	beq.n	800581e <USBD_SetupStage+0x4a>
 80057ec:	d310      	bcc.n	8005810 <USBD_SetupStage+0x3c>
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d007      	beq.n	8005802 <USBD_SetupStage+0x2e>
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 80057f2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80057f6:	4620      	mov	r0, r4
 80057f8:	f000 fd8c 	bl	8006314 <DCD_EP_Stall>
}
 80057fc:	2000      	movs	r0, #0
 80057fe:	b002      	add	sp, #8
 8005800:	bd10      	pop	{r4, pc}
    USBD_StdEPReq(pdev, &req);   
 8005802:	4669      	mov	r1, sp
 8005804:	4620      	mov	r0, r4
 8005806:	f7ff feb1 	bl	800556c <USBD_StdEPReq>
}
 800580a:	2000      	movs	r0, #0
 800580c:	b002      	add	sp, #8
 800580e:	bd10      	pop	{r4, pc}
    USBD_StdDevReq (pdev, &req);
 8005810:	4669      	mov	r1, sp
 8005812:	4620      	mov	r0, r4
 8005814:	f7ff fd18 	bl	8005248 <USBD_StdDevReq>
}
 8005818:	2000      	movs	r0, #0
 800581a:	b002      	add	sp, #8
 800581c:	bd10      	pop	{r4, pc}
    USBD_StdItfReq(pdev, &req);
 800581e:	4669      	mov	r1, sp
 8005820:	4620      	mov	r0, r4
 8005822:	f7ff fe81 	bl	8005528 <USBD_StdItfReq>
}
 8005826:	2000      	movs	r0, #0
 8005828:	b002      	add	sp, #8
 800582a:	bd10      	pop	{r4, pc}

0800582c <USBD_DataInStage>:
{
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4604      	mov	r4, r0
  if(epnum == 0) 
 8005830:	b949      	cbnz	r1, 8005846 <USBD_DataInStage+0x1a>
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8005832:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 8005836:	2b02      	cmp	r3, #2
 8005838:	d019      	beq.n	800586e <USBD_DataInStage+0x42>
    if (pdev->dev.test_mode == 1)
 800583a:	f894 3116 	ldrb.w	r3, [r4, #278]	; 0x116
 800583e:	2b01      	cmp	r3, #1
 8005840:	d00c      	beq.n	800585c <USBD_DataInStage+0x30>
}
 8005842:	2000      	movs	r0, #0
 8005844:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8005846:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f8      	beq.n	8005842 <USBD_DataInStage+0x16>
 8005850:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8005854:	2a03      	cmp	r2, #3
 8005856:	d1f4      	bne.n	8005842 <USBD_DataInStage+0x16>
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8005858:	4798      	blx	r3
 800585a:	e7f2      	b.n	8005842 <USBD_DataInStage+0x16>
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 800585c:	4a23      	ldr	r2, [pc, #140]	; (80058ec <USBD_DataInStage+0xc0>)
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	605a      	str	r2, [r3, #4]
      pdev->dev.test_mode = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
 800586a:	2000      	movs	r0, #0
 800586c:	bd70      	pop	{r4, r5, r6, pc}
      if(ep->rem_data_len > ep->maxpacket)
 800586e:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 8005872:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 8005876:	42aa      	cmp	r2, r5
 8005878:	d916      	bls.n	80058a8 <USBD_DataInStage+0x7c>
        if(pdev->cfg.dma_enable == 1)
 800587a:	78c3      	ldrb	r3, [r0, #3]
          ep->xfer_buff += ep->maxpacket;
 800587c:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
        if(pdev->cfg.dma_enable == 1)
 8005880:	2b01      	cmp	r3, #1
        ep->rem_data_len -=  ep->maxpacket;
 8005882:	eba2 0205 	sub.w	r2, r2, r5
          ep->xfer_buff += ep->maxpacket;
 8005886:	bf08      	it	eq
 8005888:	1949      	addeq	r1, r1, r5
        ep->rem_data_len -=  ep->maxpacket;
 800588a:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
          ep->xfer_buff += ep->maxpacket;
 800588e:	bf08      	it	eq
 8005890:	f8c0 1128 	streq.w	r1, [r0, #296]	; 0x128
        USBD_CtlContinueSendData (pdev, 
 8005894:	b292      	uxth	r2, r2
 8005896:	f000 f8a7 	bl	80059e8 <USBD_CtlContinueSendData>
        DCD_EP_PrepareRx (pdev,
 800589a:	2300      	movs	r3, #0
 800589c:	461a      	mov	r2, r3
 800589e:	4619      	mov	r1, r3
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fceb 	bl	800627c <DCD_EP_PrepareRx>
 80058a6:	e7c8      	b.n	800583a <USBD_DataInStage+0xe>
        if((ep->total_data_len % ep->maxpacket == 0) &&
 80058a8:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 80058ac:	fbb3 f6f5 	udiv	r6, r3, r5
 80058b0:	fb05 3616 	mls	r6, r5, r6, r3
 80058b4:	b95e      	cbnz	r6, 80058ce <USBD_DataInStage+0xa2>
 80058b6:	429d      	cmp	r5, r3
 80058b8:	d809      	bhi.n	80058ce <USBD_DataInStage+0xa2>
           (ep->total_data_len >= ep->maxpacket) &&
 80058ba:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 80058be:	4293      	cmp	r3, r2
 80058c0:	d205      	bcs.n	80058ce <USBD_DataInStage+0xa2>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80058c2:	4632      	mov	r2, r6
 80058c4:	f000 f890 	bl	80059e8 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 80058c8:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 80058cc:	e7e5      	b.n	800589a <USBD_DataInStage+0x6e>
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 80058ce:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	b11b      	cbz	r3, 80058de <USBD_DataInStage+0xb2>
 80058d6:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
 80058da:	2a03      	cmp	r2, #3
 80058dc:	d003      	beq.n	80058e6 <USBD_DataInStage+0xba>
          USBD_CtlReceiveStatus(pdev);
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 f8b2 	bl	8005a48 <USBD_CtlReceiveStatus>
 80058e4:	e7a9      	b.n	800583a <USBD_DataInStage+0xe>
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 80058e6:	4620      	mov	r0, r4
 80058e8:	4798      	blx	r3
 80058ea:	e7f8      	b.n	80058de <USBD_DataInStage+0xb2>
 80058ec:	20001c24 	.word	0x20001c24

080058f0 <USBD_DataOutStage>:
{
 80058f0:	b510      	push	{r4, lr}
 80058f2:	4604      	mov	r4, r0
  if(epnum == 0) 
 80058f4:	b929      	cbnz	r1, 8005902 <USBD_DataOutStage+0x12>
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 80058f6:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d00c      	beq.n	8005918 <USBD_DataOutStage+0x28>
}
 80058fe:	2000      	movs	r0, #0
 8005900:	bd10      	pop	{r4, pc}
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8005902:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f8      	beq.n	80058fe <USBD_DataOutStage+0xe>
 800590c:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8005910:	2a03      	cmp	r2, #3
 8005912:	d1f4      	bne.n	80058fe <USBD_DataOutStage+0xe>
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8005914:	4798      	blx	r3
 8005916:	e7f2      	b.n	80058fe <USBD_DataOutStage+0xe>
      if(ep->rem_data_len > ep->maxpacket)
 8005918:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800591c:	f8d0 237c 	ldr.w	r2, [r0, #892]	; 0x37c
 8005920:	4293      	cmp	r3, r2
 8005922:	d912      	bls.n	800594a <USBD_DataOutStage+0x5a>
        if(pdev->cfg.dma_enable == 1)
 8005924:	78c1      	ldrb	r1, [r0, #3]
 8005926:	2901      	cmp	r1, #1
          ep->xfer_buff += ep->maxpacket; 
 8005928:	f8d0 1380 	ldr.w	r1, [r0, #896]	; 0x380
        ep->rem_data_len -=  ep->maxpacket;
 800592c:	eba3 0302 	sub.w	r3, r3, r2
          ep->xfer_buff += ep->maxpacket; 
 8005930:	bf04      	itt	eq
 8005932:	1889      	addeq	r1, r1, r2
 8005934:	f8c0 1380 	streq.w	r1, [r0, #896]	; 0x380
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8005938:	429a      	cmp	r2, r3
 800593a:	bf28      	it	cs
 800593c:	461a      	movcs	r2, r3
        ep->rem_data_len -=  ep->maxpacket;
 800593e:	f8c0 3390 	str.w	r3, [r0, #912]	; 0x390
        USBD_CtlContinueRx (pdev, 
 8005942:	b292      	uxth	r2, r2
 8005944:	f000 f868 	bl	8005a18 <USBD_CtlContinueRx>
 8005948:	e7d9      	b.n	80058fe <USBD_DataOutStage+0xe>
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 800594a:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	b11b      	cbz	r3, 800595a <USBD_DataOutStage+0x6a>
 8005952:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8005956:	2a03      	cmp	r2, #3
 8005958:	d003      	beq.n	8005962 <USBD_DataOutStage+0x72>
        USBD_CtlSendStatus(pdev);
 800595a:	4620      	mov	r0, r4
 800595c:	f000 f864 	bl	8005a28 <USBD_CtlSendStatus>
 8005960:	e7cd      	b.n	80058fe <USBD_DataOutStage+0xe>
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8005962:	4798      	blx	r3
 8005964:	e7f9      	b.n	800595a <USBD_DataOutStage+0x6a>
 8005966:	bf00      	nop

08005968 <USBD_Init>:
{
 8005968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596c:	4604      	mov	r4, r0
 800596e:	4616      	mov	r6, r2
 8005970:	4698      	mov	r8, r3
 8005972:	460d      	mov	r5, r1
 8005974:	9f06      	ldr	r7, [sp, #24]
  USB_OTG_BSP_Init(pdev);  
 8005976:	f7fc fa8f 	bl	8001e98 <USB_OTG_BSP_Init>
  DCD_Init(pdev , coreID);
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
  pdev->dev.class_cb = class_cb;
 800597e:	f8c4 85e4 	str.w	r8, [r4, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8005982:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 8005986:	f8c4 65ec 	str.w	r6, [r4, #1516]	; 0x5ec
  DCD_Init(pdev , coreID);
 800598a:	f000 f9ef 	bl	8005d6c <DCD_Init>
  pdev->dev.usr_cb->Init();
 800598e:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4798      	blx	r3
  USB_OTG_BSP_EnableInterrupt(pdev);
 8005996:	4620      	mov	r0, r4
}
 8005998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USB_OTG_BSP_EnableInterrupt(pdev);
 800599c:	f7fc bac8 	b.w	8001f30 <USB_OTG_BSP_EnableInterrupt>

080059a0 <USBD_SetCfg>:
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 80059a0:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
{
 80059a4:	b510      	push	{r4, lr}
 80059a6:	4604      	mov	r4, r0
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4798      	blx	r3
  pdev->dev.usr_cb->DeviceConfigured();
 80059ac:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4798      	blx	r3
}
 80059b4:	2000      	movs	r0, #0
 80059b6:	bd10      	pop	{r4, pc}

080059b8 <USBD_ClrCfg>:
{
 80059b8:	b508      	push	{r3, lr}
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 80059ba:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4798      	blx	r3
}
 80059c2:	2000      	movs	r0, #0
 80059c4:	bd08      	pop	{r3, pc}
 80059c6:	bf00      	nop

080059c8 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
  pdev->dev.in_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 80059cc:	2502      	movs	r5, #2

  DCD_EP_Tx (pdev, 0, pbuf, len);
 80059ce:	460a      	mov	r2, r1
  pdev->dev.in_ep[0].total_data_len = len;
 80059d0:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 80059d4:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 80059d8:	f880 5111 	strb.w	r5, [r0, #273]	; 0x111
  DCD_EP_Tx (pdev, 0, pbuf, len);
 80059dc:	2100      	movs	r1, #0
 80059de:	f000 fc75 	bl	80062cc <DCD_EP_Tx>
 
  return ret;
}
 80059e2:	2000      	movs	r0, #0
 80059e4:	bd38      	pop	{r3, r4, r5, pc}
 80059e6:	bf00      	nop

080059e8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80059e8:	b508      	push	{r3, lr}
  USBD_Status ret = USBD_OK;
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 80059ea:	4613      	mov	r3, r2
 80059ec:	460a      	mov	r2, r1
 80059ee:	2100      	movs	r1, #0
 80059f0:	f000 fc6c 	bl	80062cc <DCD_EP_Tx>
  
  
  return ret;
}
 80059f4:	2000      	movs	r0, #0
 80059f6:	bd08      	pop	{r3, pc}

080059f8 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.out_ep[0].total_data_len = len;
  pdev->dev.out_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 80059fc:	2503      	movs	r5, #3
  
  DCD_EP_PrepareRx (pdev,
 80059fe:	460a      	mov	r2, r1
  pdev->dev.out_ep[0].total_data_len = len;
 8005a00:	f8c0 3394 	str.w	r3, [r0, #916]	; 0x394
  pdev->dev.out_ep[0].rem_data_len   = len;
 8005a04:	f8c0 3390 	str.w	r3, [r0, #912]	; 0x390
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 8005a08:	f880 5111 	strb.w	r5, [r0, #273]	; 0x111
  DCD_EP_PrepareRx (pdev,
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	f000 fc35 	bl	800627c <DCD_EP_PrepareRx>
                    pbuf,
                    len);
  

  return ret;
}
 8005a12:	2000      	movs	r0, #0
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	bf00      	nop

08005a18 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005a18:	b508      	push	{r3, lr}
  USBD_Status ret = USBD_OK;
  
  DCD_EP_PrepareRx (pdev,
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	460a      	mov	r2, r1
 8005a1e:	2100      	movs	r1, #0
 8005a20:	f000 fc2c 	bl	800627c <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
}
 8005a24:	2000      	movs	r0, #0
 8005a26:	bd08      	pop	{r3, pc}

08005a28 <USBD_CtlSendStatus>:
*         send zero length packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8005a28:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 8005a2a:	2300      	movs	r3, #0
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8005a2c:	2204      	movs	r2, #4
{
 8005a2e:	4604      	mov	r4, r0
  DCD_EP_Tx (pdev,
 8005a30:	4619      	mov	r1, r3
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8005a32:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111
  DCD_EP_Tx (pdev,
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 fc48 	bl	80062cc <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff fbef 	bl	8005220 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 8005a42:	2000      	movs	r0, #0
 8005a44:	bd10      	pop	{r4, pc}
 8005a46:	bf00      	nop

08005a48 <USBD_CtlReceiveStatus>:
*         receive zero length packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8005a48:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 8005a4a:	2300      	movs	r3, #0
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8005a4c:	2205      	movs	r2, #5
{
 8005a4e:	4604      	mov	r4, r0
  DCD_EP_PrepareRx ( pdev,
 8005a50:	4619      	mov	r1, r3
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8005a52:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fc10 	bl	800627c <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff fbdf 	bl	8005220 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 8005a62:	2000      	movs	r0, #0
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	bf00      	nop

08005a68 <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 8005a68:	b510      	push	{r4, lr}
  if (cdcCmd != NO_CMD)
 8005a6a:	4c07      	ldr	r4, [pc, #28]	; (8005a88 <usbd_cdc_EP0_RxReady+0x20>)
 8005a6c:	6820      	ldr	r0, [r4, #0]
 8005a6e:	28ff      	cmp	r0, #255	; 0xff
 8005a70:	d007      	beq.n	8005a82 <usbd_cdc_EP0_RxReady+0x1a>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 8005a72:	4a06      	ldr	r2, [pc, #24]	; (8005a8c <usbd_cdc_EP0_RxReady+0x24>)
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <usbd_cdc_EP0_RxReady+0x28>)
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	4906      	ldr	r1, [pc, #24]	; (8005a94 <usbd_cdc_EP0_RxReady+0x2c>)
 8005a7c:	4798      	blx	r3
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 8005a7e:	23ff      	movs	r3, #255	; 0xff
 8005a80:	6023      	str	r3, [r4, #0]
  }
  
  return USBD_OK;
}
 8005a82:	2000      	movs	r0, #0
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	bf00      	nop
 8005a88:	20000528 	.word	0x20000528
 8005a8c:	20000bd0 	.word	0x20000bd0
 8005a90:	200004a4 	.word	0x200004a4
 8005a94:	20001cac 	.word	0x20001cac

08005a98 <USBD_cdc_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
  *length = sizeof (usbd_cdc_CfgDesc);
 8005a98:	2343      	movs	r3, #67	; 0x43
 8005a9a:	800b      	strh	r3, [r1, #0]
  return usbd_cdc_CfgDesc;
}
 8005a9c:	4800      	ldr	r0, [pc, #0]	; (8005aa0 <USBD_cdc_GetCfgDesc+0x8>)
 8005a9e:	4770      	bx	lr
 8005aa0:	2000052c 	.word	0x2000052c

08005aa4 <usbd_cdc_Init>:
{
 8005aa4:	b538      	push	{r3, r4, r5, lr}
  DCD_EP_Open(pdev,
 8005aa6:	2240      	movs	r2, #64	; 0x40
{
 8005aa8:	4604      	mov	r4, r0
  DCD_EP_Open(pdev,
 8005aaa:	2302      	movs	r3, #2
 8005aac:	2181      	movs	r1, #129	; 0x81
 8005aae:	f000 fb97 	bl	80061e0 <DCD_EP_Open>
  DCD_EP_Open(pdev,
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	2240      	movs	r2, #64	; 0x40
 8005ab8:	2101      	movs	r1, #1
 8005aba:	f000 fb91 	bl	80061e0 <DCD_EP_Open>
  DCD_EP_Open(pdev,
 8005abe:	4620      	mov	r0, r4
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	2208      	movs	r2, #8
 8005ac4:	2182      	movs	r1, #130	; 0x82
 8005ac6:	f000 fb8b 	bl	80061e0 <DCD_EP_Open>
  pbuf[4] = DEVICE_CLASS_CDC;
 8005aca:	4b08      	ldr	r3, [pc, #32]	; (8005aec <usbd_cdc_Init+0x48>)
  APP_FOPS.pIf_Init();
 8005acc:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <usbd_cdc_Init+0x4c>)
  pbuf[4] = DEVICE_CLASS_CDC;
 8005ace:	2102      	movs	r1, #2
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 8005ad0:	2500      	movs	r5, #0
  pbuf[4] = DEVICE_CLASS_CDC;
 8005ad2:	7119      	strb	r1, [r3, #4]
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 8005ad4:	715d      	strb	r5, [r3, #5]
  APP_FOPS.pIf_Init();
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	4798      	blx	r3
  DCD_EP_PrepareRx(pdev,
 8005ada:	4620      	mov	r0, r4
 8005adc:	2340      	movs	r3, #64	; 0x40
 8005ade:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <usbd_cdc_Init+0x50>)
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	f000 fbcb 	bl	800627c <DCD_EP_PrepareRx>
}
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
 8005aea:	bf00      	nop
 8005aec:	20000450 	.word	0x20000450
 8005af0:	200004a4 	.word	0x200004a4
 8005af4:	20001c6c 	.word	0x20001c6c

08005af8 <usbd_cdc_DataOut>:
{      
 8005af8:	b538      	push	{r3, r4, r5, lr}
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8005afa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8005afe:	4d09      	ldr	r5, [pc, #36]	; (8005b24 <usbd_cdc_DataOut+0x2c>)
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <usbd_cdc_DataOut+0x30>)
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8005b02:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
{      
 8005b06:	4604      	mov	r4, r0
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8005b08:	f8b1 138c 	ldrh.w	r1, [r1, #908]	; 0x38c
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	4628      	mov	r0, r5
 8005b10:	4798      	blx	r3
  DCD_EP_PrepareRx(pdev,
 8005b12:	462a      	mov	r2, r5
 8005b14:	4620      	mov	r0, r4
 8005b16:	2340      	movs	r3, #64	; 0x40
 8005b18:	2101      	movs	r1, #1
 8005b1a:	f000 fbaf 	bl	800627c <DCD_EP_PrepareRx>
}
 8005b1e:	2000      	movs	r0, #0
 8005b20:	bd38      	pop	{r3, r4, r5, pc}
 8005b22:	bf00      	nop
 8005b24:	20001c6c 	.word	0x20001c6c
 8005b28:	200004a4 	.word	0x200004a4

08005b2c <usbd_cdc_DeInit>:
{
 8005b2c:	b510      	push	{r4, lr}
  DCD_EP_Close(pdev,
 8005b2e:	2181      	movs	r1, #129	; 0x81
{
 8005b30:	4604      	mov	r4, r0
  DCD_EP_Close(pdev,
 8005b32:	f000 fb89 	bl	8006248 <DCD_EP_Close>
  DCD_EP_Close(pdev,
 8005b36:	4620      	mov	r0, r4
 8005b38:	2101      	movs	r1, #1
 8005b3a:	f000 fb85 	bl	8006248 <DCD_EP_Close>
  DCD_EP_Close(pdev,
 8005b3e:	2182      	movs	r1, #130	; 0x82
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fb81 	bl	8006248 <DCD_EP_Close>
  APP_FOPS.pIf_DeInit();
 8005b46:	4b02      	ldr	r3, [pc, #8]	; (8005b50 <usbd_cdc_DeInit+0x24>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4798      	blx	r3
}
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	bd10      	pop	{r4, pc}
 8005b50:	200004a4 	.word	0x200004a4

08005b54 <usbd_cdc_Setup>:
{
 8005b54:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b56:	780b      	ldrb	r3, [r1, #0]
 8005b58:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8005b5c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b5e:	d011      	beq.n	8005b84 <usbd_cdc_Setup+0x30>
 8005b60:	2c20      	cmp	r4, #32
 8005b62:	d116      	bne.n	8005b92 <usbd_cdc_Setup+0x3e>
      if (req->wLength)
 8005b64:	88cc      	ldrh	r4, [r1, #6]
 8005b66:	2c00      	cmp	r4, #0
 8005b68:	d031      	beq.n	8005bce <usbd_cdc_Setup+0x7a>
        if (req->bmRequest & 0x80)
 8005b6a:	061b      	lsls	r3, r3, #24
 8005b6c:	d41b      	bmi.n	8005ba6 <usbd_cdc_Setup+0x52>
          cdcCmd = req->bRequest;
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <usbd_cdc_Setup+0x94>)
 8005b70:	784d      	ldrb	r5, [r1, #1]
          cdcLen = req->wLength;
 8005b72:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <usbd_cdc_Setup+0x98>)
          cdcCmd = req->bRequest;
 8005b74:	6015      	str	r5, [r2, #0]
          USBD_CtlPrepareRx (pdev,
 8005b76:	491e      	ldr	r1, [pc, #120]	; (8005bf0 <usbd_cdc_Setup+0x9c>)
          cdcLen = req->wLength;
 8005b78:	601c      	str	r4, [r3, #0]
          USBD_CtlPrepareRx (pdev,
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	f7ff ff3c 	bl	80059f8 <USBD_CtlPrepareRx>
      return USBD_OK;
 8005b80:	2000      	movs	r0, #0
 8005b82:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8005b84:	784b      	ldrb	r3, [r1, #1]
 8005b86:	2b0a      	cmp	r3, #10
 8005b88:	d01b      	beq.n	8005bc2 <usbd_cdc_Setup+0x6e>
 8005b8a:	2b0b      	cmp	r3, #11
 8005b8c:	d005      	beq.n	8005b9a <usbd_cdc_Setup+0x46>
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d1f6      	bne.n	8005b80 <usbd_cdc_Setup+0x2c>
      USBD_CtlError (pdev, req);
 8005b92:	f7ff fd85 	bl	80056a0 <USBD_CtlError>
      return USBD_FAIL;
 8005b96:	2002      	movs	r0, #2
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 8005b9a:	788b      	ldrb	r3, [r1, #2]
 8005b9c:	b9fb      	cbnz	r3, 8005bde <usbd_cdc_Setup+0x8a>
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8005b9e:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <usbd_cdc_Setup+0xa0>)
  return USBD_OK;
 8005ba0:	4618      	mov	r0, r3
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	bd70      	pop	{r4, r5, r6, pc}
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <usbd_cdc_Setup+0xa4>)
 8005ba8:	4911      	ldr	r1, [pc, #68]	; (8005bf0 <usbd_cdc_Setup+0x9c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4606      	mov	r6, r0
 8005bae:	4622      	mov	r2, r4
 8005bb0:	7868      	ldrb	r0, [r5, #1]
 8005bb2:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
 8005bb4:	88ea      	ldrh	r2, [r5, #6]
 8005bb6:	490e      	ldr	r1, [pc, #56]	; (8005bf0 <usbd_cdc_Setup+0x9c>)
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7ff ff05 	bl	80059c8 <USBD_CtlSendData>
      return USBD_OK;
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlSendData (pdev,
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	490b      	ldr	r1, [pc, #44]	; (8005bf4 <usbd_cdc_Setup+0xa0>)
 8005bc6:	f7ff feff 	bl	80059c8 <USBD_CtlSendData>
  return USBD_OK;
 8005bca:	4620      	mov	r0, r4
      break;
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <usbd_cdc_Setup+0xa4>)
 8005bd0:	7848      	ldrb	r0, [r1, #1]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4798      	blx	r3
      return USBD_OK;
 8005bda:	4620      	mov	r0, r4
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
        USBD_CtlError (pdev, req);
 8005bde:	f7ff fd5f 	bl	80056a0 <USBD_CtlError>
  return USBD_OK;
 8005be2:	4620      	mov	r0, r4
 8005be4:	bd70      	pop	{r4, r5, r6, pc}
 8005be6:	bf00      	nop
 8005be8:	20000528 	.word	0x20000528
 8005bec:	20000bd0 	.word	0x20000bd0
 8005bf0:	20001cac 	.word	0x20001cac
 8005bf4:	20000bd4 	.word	0x20000bd4
 8005bf8:	200004a4 	.word	0x200004a4

08005bfc <usbd_cdc_SOF>:
{      
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 8005bfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <usbd_cdc_SOF+0xac>)
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	b119      	cbz	r1, 8005c0c <usbd_cdc_SOF+0x10>
 8005c04:	3101      	adds	r1, #1
 8005c06:	6019      	str	r1, [r3, #0]
}
 8005c08:	2000      	movs	r0, #0
 8005c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(USB_Tx_State == USB_CDC_IDLE)
 8005c0c:	4d27      	ldr	r5, [pc, #156]	; (8005cac <usbd_cdc_SOF+0xb0>)
 8005c0e:	782b      	ldrb	r3, [r5, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f9      	bne.n	8005c08 <usbd_cdc_SOF+0xc>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 8005c14:	4f26      	ldr	r7, [pc, #152]	; (8005cb0 <usbd_cdc_SOF+0xb4>)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1c:	d020      	beq.n	8005c60 <usbd_cdc_SOF+0x64>
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 8005c1e:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <usbd_cdc_SOF+0xb8>)
 8005c20:	6816      	ldr	r6, [r2, #0]
 8005c22:	42b3      	cmp	r3, r6
 8005c24:	d036      	beq.n	8005c94 <usbd_cdc_SOF+0x98>
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 8005c26:	d93a      	bls.n	8005c9e <usbd_cdc_SOF+0xa2>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8005c28:	4c23      	ldr	r4, [pc, #140]	; (8005cb8 <usbd_cdc_SOF+0xbc>)
 8005c2a:	4a24      	ldr	r2, [pc, #144]	; (8005cbc <usbd_cdc_SOF+0xc0>)
 8005c2c:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 8005c30:	6021      	str	r1, [r4, #0]
 8005c32:	fa12 f283 	uxtah	r2, r2, r3
 8005c36:	4619      	mov	r1, r3
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d919      	bls.n	8005c72 <usbd_cdc_SOF+0x76>
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8005c3e:	6823      	ldr	r3, [r4, #0]
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8005c40:	3140      	adds	r1, #64	; 0x40
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8005c42:	3b40      	subs	r3, #64	; 0x40
      USB_Tx_State = USB_CDC_BUSY;
 8005c44:	2601      	movs	r6, #1
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8005c46:	6023      	str	r3, [r4, #0]
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8005c48:	6039      	str	r1, [r7, #0]
      USB_Tx_State = USB_CDC_BUSY;
 8005c4a:	702e      	strb	r6, [r5, #0]
 8005c4c:	2340      	movs	r3, #64	; 0x40
    APP_free_buff_len += USB_Tx_length;
 8005c4e:	4d1c      	ldr	r5, [pc, #112]	; (8005cc0 <usbd_cdc_SOF+0xc4>)
 8005c50:	682c      	ldr	r4, [r5, #0]
    DCD_EP_Tx (pdev,
 8005c52:	2181      	movs	r1, #129	; 0x81
    APP_free_buff_len += USB_Tx_length;
 8005c54:	441c      	add	r4, r3
 8005c56:	602c      	str	r4, [r5, #0]
    DCD_EP_Tx (pdev,
 8005c58:	f000 fb38 	bl	80062cc <DCD_EP_Tx>
}
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <usbd_cdc_SOF+0xb8>)
      APP_Rx_ptr_out = 0;
 8005c62:	6039      	str	r1, [r7, #0]
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 8005c64:	681e      	ldr	r6, [r3, #0]
 8005c66:	b1ae      	cbz	r6, 8005c94 <usbd_cdc_SOF+0x98>
 8005c68:	4a14      	ldr	r2, [pc, #80]	; (8005cbc <usbd_cdc_SOF+0xc0>)
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8005c6a:	4c13      	ldr	r4, [pc, #76]	; (8005cb8 <usbd_cdc_SOF+0xbc>)
 8005c6c:	1a76      	subs	r6, r6, r1
 8005c6e:	6026      	str	r6, [r4, #0]
 8005c70:	e7e2      	b.n	8005c38 <usbd_cdc_SOF+0x3c>
      USB_Tx_length = APP_Rx_length;
 8005c72:	6826      	ldr	r6, [r4, #0]
      APP_Rx_ptr_out += APP_Rx_length;
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	4419      	add	r1, r3
      if(USB_Tx_length == CDC_DATA_IN_PACKET_SIZE)
 8005c78:	b2b3      	uxth	r3, r6
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
      APP_Rx_ptr_out += APP_Rx_length;
 8005c7c:	6039      	str	r1, [r7, #0]
      APP_Rx_length = 0;
 8005c7e:	f04f 0e00 	mov.w	lr, #0
        USB_Tx_State = USB_CDC_ZLP;
 8005c82:	bf0c      	ite	eq
 8005c84:	2102      	moveq	r1, #2
        USB_Tx_State = USB_CDC_BUSY;
 8005c86:	2101      	movne	r1, #1
      APP_Rx_length = 0;
 8005c88:	f8c4 e000 	str.w	lr, [r4]
 8005c8c:	bf18      	it	ne
 8005c8e:	b2b3      	uxthne	r3, r6
        USB_Tx_State = USB_CDC_BUSY;
 8005c90:	7029      	strb	r1, [r5, #0]
 8005c92:	e7dc      	b.n	8005c4e <usbd_cdc_SOF+0x52>
      APP_flag=0;
 8005c94:	4a0b      	ldr	r2, [pc, #44]	; (8005cc4 <usbd_cdc_SOF+0xc8>)
      USB_Tx_State = USB_CDC_IDLE; 
 8005c96:	2300      	movs	r3, #0
      APP_flag=0;
 8005c98:	7013      	strb	r3, [r2, #0]
      USB_Tx_State = USB_CDC_IDLE; 
 8005c9a:	702b      	strb	r3, [r5, #0]
 8005c9c:	e7b4      	b.n	8005c08 <usbd_cdc_SOF+0xc>
 8005c9e:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <usbd_cdc_SOF+0xc0>)
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	fa12 f283 	uxtah	r2, r2, r3
 8005ca6:	e7e0      	b.n	8005c6a <usbd_cdc_SOF+0x6e>
 8005ca8:	20000bc8 	.word	0x20000bc8
 8005cac:	20000bcc 	.word	0x20000bcc
 8005cb0:	20000bc0 	.word	0x20000bc0
 8005cb4:	20000bbc 	.word	0x20000bbc
 8005cb8:	20000bb8 	.word	0x20000bb8
 8005cbc:	20001cb4 	.word	0x20001cb4
 8005cc0:	200004f8 	.word	0x200004f8
 8005cc4:	20000bc4 	.word	0x20000bc4

08005cc8 <usbd_cdc_DataIn>:
{
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (USB_Tx_State == USB_CDC_BUSY)
 8005cca:	4c22      	ldr	r4, [pc, #136]	; (8005d54 <usbd_cdc_DataIn+0x8c>)
 8005ccc:	7823      	ldrb	r3, [r4, #0]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d003      	beq.n	8005cda <usbd_cdc_DataIn+0x12>
  if (USB_Tx_State == USB_CDC_ZLP)
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d024      	beq.n	8005d20 <usbd_cdc_DataIn+0x58>
}
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cda:	4601      	mov	r1, r0
    if (APP_Rx_length == 0) 
 8005cdc:	481e      	ldr	r0, [pc, #120]	; (8005d58 <usbd_cdc_DataIn+0x90>)
 8005cde:	6803      	ldr	r3, [r0, #0]
 8005ce0:	b1cb      	cbz	r3, 8005d16 <usbd_cdc_DataIn+0x4e>
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 8005ce2:	6803      	ldr	r3, [r0, #0]
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d924      	bls.n	8005d32 <usbd_cdc_DataIn+0x6a>
        USB_Tx_ptr = APP_Rx_ptr_out;
 8005ce8:	4c1c      	ldr	r4, [pc, #112]	; (8005d5c <usbd_cdc_DataIn+0x94>)
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8005cea:	6803      	ldr	r3, [r0, #0]
        USB_Tx_ptr = APP_Rx_ptr_out;
 8005cec:	6822      	ldr	r2, [r4, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8005cee:	3b40      	subs	r3, #64	; 0x40
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 8005cf0:	f102 0540 	add.w	r5, r2, #64	; 0x40
 8005cf4:	6025      	str	r5, [r4, #0]
        USB_Tx_ptr = APP_Rx_ptr_out;
 8005cf6:	b292      	uxth	r2, r2
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8005cf8:	6003      	str	r3, [r0, #0]
 8005cfa:	2540      	movs	r5, #64	; 0x40
      DCD_EP_Tx (pdev,
 8005cfc:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <usbd_cdc_DataIn+0x98>)
 8005cfe:	4608      	mov	r0, r1
 8005d00:	441a      	add	r2, r3
 8005d02:	2181      	movs	r1, #129	; 0x81
 8005d04:	462b      	mov	r3, r5
 8005d06:	f000 fae1 	bl	80062cc <DCD_EP_Tx>
      APP_free_buff_len += USB_Tx_length;
 8005d0a:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <usbd_cdc_DataIn+0x9c>)
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	441d      	add	r5, r3
 8005d10:	6015      	str	r5, [r2, #0]
}
 8005d12:	2000      	movs	r0, #0
 8005d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      APP_flag=0;
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <usbd_cdc_DataIn+0xa0>)
      USB_Tx_State = USB_CDC_IDLE;
 8005d18:	7023      	strb	r3, [r4, #0]
      APP_flag=0;
 8005d1a:	7013      	strb	r3, [r2, #0]
}
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    DCD_EP_Tx (pdev,
 8005d20:	2300      	movs	r3, #0
 8005d22:	461a      	mov	r2, r3
 8005d24:	2181      	movs	r1, #129	; 0x81
 8005d26:	f000 fad1 	bl	80062cc <DCD_EP_Tx>
    USB_Tx_State = USB_CDC_IDLE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	7023      	strb	r3, [r4, #0]
}
 8005d2e:	2000      	movs	r0, #0
 8005d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        USB_Tx_ptr = APP_Rx_ptr_out;
 8005d32:	4e0a      	ldr	r6, [pc, #40]	; (8005d5c <usbd_cdc_DataIn+0x94>)
        USB_Tx_length = APP_Rx_length;
 8005d34:	6807      	ldr	r7, [r0, #0]
        USB_Tx_ptr = APP_Rx_ptr_out;
 8005d36:	6832      	ldr	r2, [r6, #0]
        APP_Rx_ptr_out += APP_Rx_length;
 8005d38:	6803      	ldr	r3, [r0, #0]
        if(USB_Tx_length == CDC_DATA_IN_PACKET_SIZE)
 8005d3a:	b2bd      	uxth	r5, r7
        APP_Rx_ptr_out += APP_Rx_length;
 8005d3c:	4413      	add	r3, r2
        if(USB_Tx_length == CDC_DATA_IN_PACKET_SIZE)
 8005d3e:	2d40      	cmp	r5, #64	; 0x40
        APP_Rx_ptr_out += APP_Rx_length;
 8005d40:	6033      	str	r3, [r6, #0]
        APP_Rx_length = 0;
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	6003      	str	r3, [r0, #0]
          USB_Tx_State = USB_CDC_ZLP;
 8005d48:	bf08      	it	eq
 8005d4a:	2302      	moveq	r3, #2
        USB_Tx_ptr = APP_Rx_ptr_out;
 8005d4c:	b292      	uxth	r2, r2
          USB_Tx_State = USB_CDC_ZLP;
 8005d4e:	bf08      	it	eq
 8005d50:	7023      	strbeq	r3, [r4, #0]
 8005d52:	e7d3      	b.n	8005cfc <usbd_cdc_DataIn+0x34>
 8005d54:	20000bcc 	.word	0x20000bcc
 8005d58:	20000bb8 	.word	0x20000bb8
 8005d5c:	20000bc0 	.word	0x20000bc0
 8005d60:	20001cb4 	.word	0x20001cb4
 8005d64:	200004f8 	.word	0x200004f8
 8005d68:	20000bc4 	.word	0x20000bc4

08005d6c <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4604      	mov	r4, r0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8005d70:	f7fe fbe8 	bl	8004544 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005d74:	7862      	ldrb	r2, [r4, #1]
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8005d76:	2101      	movs	r1, #1
  pdev->dev.device_address = 0;
 8005d78:	2300      	movs	r3, #0
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8005d7a:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
  pdev->dev.device_address = 0;
 8005d7e:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	f000 820a 	beq.w	800619c <DCD_Init+0x430>
    ep->is_in = 1;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005d88:	2040      	movs	r0, #64	; 0x40
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005d8a:	2a01      	cmp	r2, #1
    ep->is_in = 1;
 8005d8c:	f884 111d 	strb.w	r1, [r4, #285]	; 0x11d
    ep->num = i;
 8005d90:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    ep->tx_fifo_num = i;
 8005d94:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
    ep->type = EP_TYPE_CTRL;
 8005d98:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
    ep->xfer_buff = 0;
 8005d9c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ep->xfer_len = 0;
 8005da0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005da4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005da8:	f000 820a 	beq.w	80061c0 <DCD_Init+0x454>
 8005dac:	2a02      	cmp	r2, #2
    ep->is_in = 1;
 8005dae:	f884 1145 	strb.w	r1, [r4, #325]	; 0x145
    ep->num = i;
 8005db2:	f884 1144 	strb.w	r1, [r4, #324]	; 0x144
    ep->tx_fifo_num = i;
 8005db6:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
    ep->type = EP_TYPE_CTRL;
 8005dba:	f884 3147 	strb.w	r3, [r4, #327]	; 0x147
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005dbe:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    ep->xfer_buff = 0;
 8005dc2:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    ep->xfer_len = 0;
 8005dc6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005dca:	f000 80e3 	beq.w	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005dce:	2502      	movs	r5, #2
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005dd0:	2a03      	cmp	r2, #3
    ep->is_in = 1;
 8005dd2:	f884 116d 	strb.w	r1, [r4, #365]	; 0x16d
    ep->type = EP_TYPE_CTRL;
 8005dd6:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005dda:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
    ep->xfer_buff = 0;
 8005dde:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
    ep->xfer_len = 0;
 8005de2:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
    ep->num = i;
 8005de6:	f884 516c 	strb.w	r5, [r4, #364]	; 0x16c
    ep->tx_fifo_num = i;
 8005dea:	f8a4 5172 	strh.w	r5, [r4, #370]	; 0x172
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005dee:	f000 80d1 	beq.w	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005df2:	2503      	movs	r5, #3
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005df4:	2a04      	cmp	r2, #4
    ep->is_in = 1;
 8005df6:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
    ep->type = EP_TYPE_CTRL;
 8005dfa:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005dfe:	f8c4 019c 	str.w	r0, [r4, #412]	; 0x19c
    ep->xfer_buff = 0;
 8005e02:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    ep->xfer_len = 0;
 8005e06:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    ep->num = i;
 8005e0a:	f884 5194 	strb.w	r5, [r4, #404]	; 0x194
    ep->tx_fifo_num = i;
 8005e0e:	f8a4 519a 	strh.w	r5, [r4, #410]	; 0x19a
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005e12:	f000 80bf 	beq.w	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005e16:	2504      	movs	r5, #4
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005e18:	2a05      	cmp	r2, #5
    ep->is_in = 1;
 8005e1a:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
    ep->type = EP_TYPE_CTRL;
 8005e1e:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005e22:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    ep->xfer_buff = 0;
 8005e26:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    ep->xfer_len = 0;
 8005e2a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
    ep->num = i;
 8005e2e:	f884 51bc 	strb.w	r5, [r4, #444]	; 0x1bc
    ep->tx_fifo_num = i;
 8005e32:	f8a4 51c2 	strh.w	r5, [r4, #450]	; 0x1c2
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005e36:	f000 80ad 	beq.w	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005e3a:	2505      	movs	r5, #5
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005e3c:	2a06      	cmp	r2, #6
    ep->is_in = 1;
 8005e3e:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
    ep->type = EP_TYPE_CTRL;
 8005e42:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005e46:	f8c4 01ec 	str.w	r0, [r4, #492]	; 0x1ec
    ep->xfer_buff = 0;
 8005e4a:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
    ep->xfer_len = 0;
 8005e4e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
    ep->num = i;
 8005e52:	f884 51e4 	strb.w	r5, [r4, #484]	; 0x1e4
    ep->tx_fifo_num = i;
 8005e56:	f8a4 51ea 	strh.w	r5, [r4, #490]	; 0x1ea
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005e5a:	f000 809b 	beq.w	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005e5e:	2506      	movs	r5, #6
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005e60:	2a07      	cmp	r2, #7
    ep->is_in = 1;
 8005e62:	f884 120d 	strb.w	r1, [r4, #525]	; 0x20d
    ep->type = EP_TYPE_CTRL;
 8005e66:	f884 320f 	strb.w	r3, [r4, #527]	; 0x20f
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005e6a:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
    ep->xfer_buff = 0;
 8005e6e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
    ep->xfer_len = 0;
 8005e72:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
    ep->num = i;
 8005e76:	f884 520c 	strb.w	r5, [r4, #524]	; 0x20c
    ep->tx_fifo_num = i;
 8005e7a:	f8a4 5212 	strh.w	r5, [r4, #530]	; 0x212
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005e7e:	f000 8089 	beq.w	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005e82:	2507      	movs	r5, #7
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005e84:	2a08      	cmp	r2, #8
    ep->is_in = 1;
 8005e86:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    ep->type = EP_TYPE_CTRL;
 8005e8a:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005e8e:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
    ep->xfer_buff = 0;
 8005e92:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
    ep->xfer_len = 0;
 8005e96:	f8c4 3248 	str.w	r3, [r4, #584]	; 0x248
    ep->num = i;
 8005e9a:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
    ep->tx_fifo_num = i;
 8005e9e:	f8a4 523a 	strh.w	r5, [r4, #570]	; 0x23a
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005ea2:	d077      	beq.n	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005ea4:	2508      	movs	r5, #8
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005ea6:	2a09      	cmp	r2, #9
    ep->is_in = 1;
 8005ea8:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
    ep->type = EP_TYPE_CTRL;
 8005eac:	f884 325f 	strb.w	r3, [r4, #607]	; 0x25f
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005eb0:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    ep->xfer_buff = 0;
 8005eb4:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    ep->xfer_len = 0;
 8005eb8:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
    ep->num = i;
 8005ebc:	f884 525c 	strb.w	r5, [r4, #604]	; 0x25c
    ep->tx_fifo_num = i;
 8005ec0:	f8a4 5262 	strh.w	r5, [r4, #610]	; 0x262
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005ec4:	d066      	beq.n	8005f94 <DCD_Init+0x228>
    ep->type = EP_TYPE_CTRL;
 8005ec6:	2300      	movs	r3, #0
    ep->num = i;
 8005ec8:	2509      	movs	r5, #9
    ep->is_in = 1;
 8005eca:	2001      	movs	r0, #1
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005ecc:	2140      	movs	r1, #64	; 0x40
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005ece:	2a0a      	cmp	r2, #10
    ep->is_in = 1;
 8005ed0:	f884 0285 	strb.w	r0, [r4, #645]	; 0x285
    ep->num = i;
 8005ed4:	f884 5284 	strb.w	r5, [r4, #644]	; 0x284
    ep->tx_fifo_num = i;
 8005ed8:	f8a4 528a 	strh.w	r5, [r4, #650]	; 0x28a
    ep->type = EP_TYPE_CTRL;
 8005edc:	f884 3287 	strb.w	r3, [r4, #647]	; 0x287
    ep->xfer_buff = 0;
 8005ee0:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    ep->xfer_len = 0;
 8005ee4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005ee8:	f8c4 128c 	str.w	r1, [r4, #652]	; 0x28c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005eec:	d052      	beq.n	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005eee:	250a      	movs	r5, #10
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005ef0:	2a0b      	cmp	r2, #11
    ep->is_in = 1;
 8005ef2:	f884 02ad 	strb.w	r0, [r4, #685]	; 0x2ad
    ep->type = EP_TYPE_CTRL;
 8005ef6:	f884 32af 	strb.w	r3, [r4, #687]	; 0x2af
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005efa:	f8c4 12b4 	str.w	r1, [r4, #692]	; 0x2b4
    ep->xfer_buff = 0;
 8005efe:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
    ep->xfer_len = 0;
 8005f02:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
    ep->num = i;
 8005f06:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
    ep->tx_fifo_num = i;
 8005f0a:	f8a4 52b2 	strh.w	r5, [r4, #690]	; 0x2b2
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005f0e:	d041      	beq.n	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005f10:	250b      	movs	r5, #11
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005f12:	2a0c      	cmp	r2, #12
    ep->is_in = 1;
 8005f14:	f884 02d5 	strb.w	r0, [r4, #725]	; 0x2d5
    ep->type = EP_TYPE_CTRL;
 8005f18:	f884 32d7 	strb.w	r3, [r4, #727]	; 0x2d7
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005f1c:	f8c4 12dc 	str.w	r1, [r4, #732]	; 0x2dc
    ep->xfer_buff = 0;
 8005f20:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
    ep->xfer_len = 0;
 8005f24:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
    ep->num = i;
 8005f28:	f884 52d4 	strb.w	r5, [r4, #724]	; 0x2d4
    ep->tx_fifo_num = i;
 8005f2c:	f8a4 52da 	strh.w	r5, [r4, #730]	; 0x2da
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005f30:	d030      	beq.n	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005f32:	250c      	movs	r5, #12
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005f34:	2a0d      	cmp	r2, #13
    ep->is_in = 1;
 8005f36:	f884 02fd 	strb.w	r0, [r4, #765]	; 0x2fd
    ep->type = EP_TYPE_CTRL;
 8005f3a:	f884 32ff 	strb.w	r3, [r4, #767]	; 0x2ff
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005f3e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    ep->xfer_buff = 0;
 8005f42:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    ep->xfer_len = 0;
 8005f46:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
    ep->num = i;
 8005f4a:	f884 52fc 	strb.w	r5, [r4, #764]	; 0x2fc
    ep->tx_fifo_num = i;
 8005f4e:	f8a4 5302 	strh.w	r5, [r4, #770]	; 0x302
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005f52:	d01f      	beq.n	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005f54:	250d      	movs	r5, #13
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005f56:	2a0e      	cmp	r2, #14
    ep->is_in = 1;
 8005f58:	f884 0325 	strb.w	r0, [r4, #805]	; 0x325
    ep->type = EP_TYPE_CTRL;
 8005f5c:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005f60:	f8c4 132c 	str.w	r1, [r4, #812]	; 0x32c
    ep->xfer_buff = 0;
 8005f64:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
    ep->xfer_len = 0;
 8005f68:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
    ep->num = i;
 8005f6c:	f884 5324 	strb.w	r5, [r4, #804]	; 0x324
    ep->tx_fifo_num = i;
 8005f70:	f8a4 532a 	strh.w	r5, [r4, #810]	; 0x32a
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005f74:	d00e      	beq.n	8005f94 <DCD_Init+0x228>
    ep->num = i;
 8005f76:	250e      	movs	r5, #14
    ep->is_in = 1;
 8005f78:	f884 034d 	strb.w	r0, [r4, #845]	; 0x34d
    ep->type = EP_TYPE_CTRL;
 8005f7c:	f884 334f 	strb.w	r3, [r4, #847]	; 0x34f
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005f80:	f8c4 1354 	str.w	r1, [r4, #852]	; 0x354
    ep->xfer_buff = 0;
 8005f84:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
    ep->xfer_len = 0;
 8005f88:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
    ep->num = i;
 8005f8c:	f884 534c 	strb.w	r5, [r4, #844]	; 0x34c
    ep->tx_fifo_num = i;
 8005f90:	f8a4 5352 	strh.w	r5, [r4, #850]	; 0x352
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
 8005f94:	2300      	movs	r3, #0
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8005f96:	2140      	movs	r1, #64	; 0x40
    ep->num = i;
 8005f98:	2001      	movs	r0, #1
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8005f9a:	2a02      	cmp	r2, #2
    ep->is_in = 0;
 8005f9c:	f884 3375 	strb.w	r3, [r4, #885]	; 0x375
    ep->num = i;
 8005fa0:	f884 3374 	strb.w	r3, [r4, #884]	; 0x374
    ep->tx_fifo_num = i;
 8005fa4:	f8a4 337a 	strh.w	r3, [r4, #890]	; 0x37a
    ep->type = EP_TYPE_CTRL;
 8005fa8:	f884 3377 	strb.w	r3, [r4, #887]	; 0x377
    ep->xfer_buff = 0;
 8005fac:	f8c4 3380 	str.w	r3, [r4, #896]	; 0x380
    ep->xfer_len = 0;
 8005fb0:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
    ep->is_in = 0;
 8005fb4:	f884 339d 	strb.w	r3, [r4, #925]	; 0x39d
    ep->type = EP_TYPE_CTRL;
 8005fb8:	f884 339f 	strb.w	r3, [r4, #927]	; 0x39f
    ep->xfer_buff = 0;
 8005fbc:	f8c4 33a8 	str.w	r3, [r4, #936]	; 0x3a8
    ep->xfer_len = 0;
 8005fc0:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8005fc4:	f8c4 137c 	str.w	r1, [r4, #892]	; 0x37c
 8005fc8:	f8c4 13a4 	str.w	r1, [r4, #932]	; 0x3a4
    ep->num = i;
 8005fcc:	f884 039c 	strb.w	r0, [r4, #924]	; 0x39c
    ep->tx_fifo_num = i;
 8005fd0:	f8a4 03a2 	strh.w	r0, [r4, #930]	; 0x3a2
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8005fd4:	f000 80e2 	beq.w	800619c <DCD_Init+0x430>
    ep->num = i;
 8005fd8:	2002      	movs	r0, #2
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8005fda:	2a03      	cmp	r2, #3
    ep->is_in = 0;
 8005fdc:	f884 33c5 	strb.w	r3, [r4, #965]	; 0x3c5
    ep->type = EP_TYPE_CTRL;
 8005fe0:	f884 33c7 	strb.w	r3, [r4, #967]	; 0x3c7
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8005fe4:	f8c4 13cc 	str.w	r1, [r4, #972]	; 0x3cc
    ep->xfer_buff = 0;
 8005fe8:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
    ep->xfer_len = 0;
 8005fec:	f8c4 33d8 	str.w	r3, [r4, #984]	; 0x3d8
    ep->num = i;
 8005ff0:	f884 03c4 	strb.w	r0, [r4, #964]	; 0x3c4
    ep->tx_fifo_num = i;
 8005ff4:	f8a4 03ca 	strh.w	r0, [r4, #970]	; 0x3ca
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8005ff8:	f000 80d0 	beq.w	800619c <DCD_Init+0x430>
    ep->num = i;
 8005ffc:	2003      	movs	r0, #3
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8005ffe:	2a04      	cmp	r2, #4
    ep->is_in = 0;
 8006000:	f884 33ed 	strb.w	r3, [r4, #1005]	; 0x3ed
    ep->type = EP_TYPE_CTRL;
 8006004:	f884 33ef 	strb.w	r3, [r4, #1007]	; 0x3ef
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006008:	f8c4 13f4 	str.w	r1, [r4, #1012]	; 0x3f4
    ep->xfer_buff = 0;
 800600c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
    ep->xfer_len = 0;
 8006010:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    ep->num = i;
 8006014:	f884 03ec 	strb.w	r0, [r4, #1004]	; 0x3ec
    ep->tx_fifo_num = i;
 8006018:	f8a4 03f2 	strh.w	r0, [r4, #1010]	; 0x3f2
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800601c:	f000 80be 	beq.w	800619c <DCD_Init+0x430>
    ep->num = i;
 8006020:	2004      	movs	r0, #4
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8006022:	2a05      	cmp	r2, #5
    ep->is_in = 0;
 8006024:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
    ep->type = EP_TYPE_CTRL;
 8006028:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 800602c:	f8c4 141c 	str.w	r1, [r4, #1052]	; 0x41c
    ep->xfer_buff = 0;
 8006030:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    ep->xfer_len = 0;
 8006034:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    ep->num = i;
 8006038:	f884 0414 	strb.w	r0, [r4, #1044]	; 0x414
    ep->tx_fifo_num = i;
 800603c:	f8a4 041a 	strh.w	r0, [r4, #1050]	; 0x41a
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8006040:	f000 80ac 	beq.w	800619c <DCD_Init+0x430>
    ep->num = i;
 8006044:	2005      	movs	r0, #5
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8006046:	2a06      	cmp	r2, #6
    ep->is_in = 0;
 8006048:	f884 343d 	strb.w	r3, [r4, #1085]	; 0x43d
    ep->type = EP_TYPE_CTRL;
 800604c:	f884 343f 	strb.w	r3, [r4, #1087]	; 0x43f
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006050:	f8c4 1444 	str.w	r1, [r4, #1092]	; 0x444
    ep->xfer_buff = 0;
 8006054:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    ep->xfer_len = 0;
 8006058:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    ep->num = i;
 800605c:	f884 043c 	strb.w	r0, [r4, #1084]	; 0x43c
    ep->tx_fifo_num = i;
 8006060:	f8a4 0442 	strh.w	r0, [r4, #1090]	; 0x442
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8006064:	f000 809a 	beq.w	800619c <DCD_Init+0x430>
    ep->num = i;
 8006068:	2006      	movs	r0, #6
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800606a:	2a07      	cmp	r2, #7
    ep->is_in = 0;
 800606c:	f884 3465 	strb.w	r3, [r4, #1125]	; 0x465
    ep->type = EP_TYPE_CTRL;
 8006070:	f884 3467 	strb.w	r3, [r4, #1127]	; 0x467
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006074:	f8c4 146c 	str.w	r1, [r4, #1132]	; 0x46c
    ep->xfer_buff = 0;
 8006078:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
    ep->xfer_len = 0;
 800607c:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
    ep->num = i;
 8006080:	f884 0464 	strb.w	r0, [r4, #1124]	; 0x464
    ep->tx_fifo_num = i;
 8006084:	f8a4 046a 	strh.w	r0, [r4, #1130]	; 0x46a
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8006088:	f000 8088 	beq.w	800619c <DCD_Init+0x430>
    ep->num = i;
 800608c:	2007      	movs	r0, #7
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800608e:	2a08      	cmp	r2, #8
    ep->is_in = 0;
 8006090:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    ep->type = EP_TYPE_CTRL;
 8006094:	f884 348f 	strb.w	r3, [r4, #1167]	; 0x48f
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006098:	f8c4 1494 	str.w	r1, [r4, #1172]	; 0x494
    ep->xfer_buff = 0;
 800609c:	f8c4 3498 	str.w	r3, [r4, #1176]	; 0x498
    ep->xfer_len = 0;
 80060a0:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
    ep->num = i;
 80060a4:	f884 048c 	strb.w	r0, [r4, #1164]	; 0x48c
    ep->tx_fifo_num = i;
 80060a8:	f8a4 0492 	strh.w	r0, [r4, #1170]	; 0x492
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80060ac:	d076      	beq.n	800619c <DCD_Init+0x430>
    ep->num = i;
 80060ae:	2008      	movs	r0, #8
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80060b0:	2a09      	cmp	r2, #9
    ep->is_in = 0;
 80060b2:	f884 34b5 	strb.w	r3, [r4, #1205]	; 0x4b5
    ep->type = EP_TYPE_CTRL;
 80060b6:	f884 34b7 	strb.w	r3, [r4, #1207]	; 0x4b7
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80060ba:	f8c4 14bc 	str.w	r1, [r4, #1212]	; 0x4bc
    ep->xfer_buff = 0;
 80060be:	f8c4 34c0 	str.w	r3, [r4, #1216]	; 0x4c0
    ep->xfer_len = 0;
 80060c2:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
    ep->num = i;
 80060c6:	f884 04b4 	strb.w	r0, [r4, #1204]	; 0x4b4
    ep->tx_fifo_num = i;
 80060ca:	f8a4 04ba 	strh.w	r0, [r4, #1210]	; 0x4ba
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80060ce:	d065      	beq.n	800619c <DCD_Init+0x430>
    ep->num = i;
 80060d0:	2009      	movs	r0, #9
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80060d2:	2a0a      	cmp	r2, #10
    ep->is_in = 0;
 80060d4:	f884 34dd 	strb.w	r3, [r4, #1245]	; 0x4dd
    ep->type = EP_TYPE_CTRL;
 80060d8:	f884 34df 	strb.w	r3, [r4, #1247]	; 0x4df
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80060dc:	f8c4 14e4 	str.w	r1, [r4, #1252]	; 0x4e4
    ep->xfer_buff = 0;
 80060e0:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
    ep->xfer_len = 0;
 80060e4:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
    ep->num = i;
 80060e8:	f884 04dc 	strb.w	r0, [r4, #1244]	; 0x4dc
    ep->tx_fifo_num = i;
 80060ec:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80060f0:	d054      	beq.n	800619c <DCD_Init+0x430>
    ep->num = i;
 80060f2:	200a      	movs	r0, #10
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80060f4:	2a0b      	cmp	r2, #11
    ep->is_in = 0;
 80060f6:	f884 3505 	strb.w	r3, [r4, #1285]	; 0x505
    ep->type = EP_TYPE_CTRL;
 80060fa:	f884 3507 	strb.w	r3, [r4, #1287]	; 0x507
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80060fe:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    ep->xfer_buff = 0;
 8006102:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    ep->xfer_len = 0;
 8006106:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    ep->num = i;
 800610a:	f884 0504 	strb.w	r0, [r4, #1284]	; 0x504
    ep->tx_fifo_num = i;
 800610e:	f8a4 050a 	strh.w	r0, [r4, #1290]	; 0x50a
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8006112:	d043      	beq.n	800619c <DCD_Init+0x430>
    ep->is_in = 0;
 8006114:	2300      	movs	r3, #0
    ep->num = i;
 8006116:	200b      	movs	r0, #11
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006118:	2140      	movs	r1, #64	; 0x40
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800611a:	2a0c      	cmp	r2, #12
    ep->is_in = 0;
 800611c:	f884 352d 	strb.w	r3, [r4, #1325]	; 0x52d
    ep->type = EP_TYPE_CTRL;
 8006120:	f884 352f 	strb.w	r3, [r4, #1327]	; 0x52f
    ep->xfer_buff = 0;
 8006124:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    ep->xfer_len = 0;
 8006128:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    ep->num = i;
 800612c:	f884 052c 	strb.w	r0, [r4, #1324]	; 0x52c
    ep->tx_fifo_num = i;
 8006130:	f8a4 0532 	strh.w	r0, [r4, #1330]	; 0x532
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006134:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8006138:	d030      	beq.n	800619c <DCD_Init+0x430>
    ep->num = i;
 800613a:	200c      	movs	r0, #12
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800613c:	2a0d      	cmp	r2, #13
    ep->is_in = 0;
 800613e:	f884 3555 	strb.w	r3, [r4, #1365]	; 0x555
    ep->type = EP_TYPE_CTRL;
 8006142:	f884 3557 	strb.w	r3, [r4, #1367]	; 0x557
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006146:	f8c4 155c 	str.w	r1, [r4, #1372]	; 0x55c
    ep->xfer_buff = 0;
 800614a:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    ep->xfer_len = 0;
 800614e:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
    ep->num = i;
 8006152:	f884 0554 	strb.w	r0, [r4, #1364]	; 0x554
    ep->tx_fifo_num = i;
 8006156:	f8a4 055a 	strh.w	r0, [r4, #1370]	; 0x55a
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800615a:	d01f      	beq.n	800619c <DCD_Init+0x430>
    ep->num = i;
 800615c:	200d      	movs	r0, #13
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800615e:	2a0e      	cmp	r2, #14
    ep->is_in = 0;
 8006160:	f884 357d 	strb.w	r3, [r4, #1405]	; 0x57d
    ep->type = EP_TYPE_CTRL;
 8006164:	f884 357f 	strb.w	r3, [r4, #1407]	; 0x57f
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006168:	f8c4 1584 	str.w	r1, [r4, #1412]	; 0x584
    ep->xfer_buff = 0;
 800616c:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    ep->xfer_len = 0;
 8006170:	f8c4 3590 	str.w	r3, [r4, #1424]	; 0x590
    ep->num = i;
 8006174:	f884 057c 	strb.w	r0, [r4, #1404]	; 0x57c
    ep->tx_fifo_num = i;
 8006178:	f8a4 0582 	strh.w	r0, [r4, #1410]	; 0x582
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800617c:	d00e      	beq.n	800619c <DCD_Init+0x430>
    ep->num = i;
 800617e:	220e      	movs	r2, #14
    ep->is_in = 0;
 8006180:	f884 35a5 	strb.w	r3, [r4, #1445]	; 0x5a5
    ep->type = EP_TYPE_CTRL;
 8006184:	f884 35a7 	strb.w	r3, [r4, #1447]	; 0x5a7
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8006188:	f8c4 15ac 	str.w	r1, [r4, #1452]	; 0x5ac
    ep->xfer_buff = 0;
 800618c:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
    ep->xfer_len = 0;
 8006190:	f8c4 35b8 	str.w	r3, [r4, #1464]	; 0x5b8
    ep->num = i;
 8006194:	f884 25a4 	strb.w	r2, [r4, #1444]	; 0x5a4
    ep->tx_fifo_num = i;
 8006198:	f8a4 25aa 	strh.w	r2, [r4, #1450]	; 0x5aa
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 800619c:	4620      	mov	r0, r4
 800619e:	f7fe fc21 	bl	80049e4 <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);

#else
  
    /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 80061a2:	4620      	mov	r0, r4
 80061a4:	f7fe fb78 	bl	8004898 <USB_OTG_CoreInit>

  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 80061a8:	2100      	movs	r1, #0
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7fe fc46 	bl	8004a3c <USB_OTG_SetCurrentMode>

#endif
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7fe fc65 	bl	8004a80 <USB_OTG_CoreInitDev>
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 80061b6:	4620      	mov	r0, r4
}
 80061b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  USB_OTG_EnableGlobalInt(pdev);
 80061bc:	f7fe bc0a 	b.w	80049d4 <USB_OTG_EnableGlobalInt>
    ep->is_in = 0;
 80061c0:	f884 3375 	strb.w	r3, [r4, #885]	; 0x375
    ep->num = i;
 80061c4:	f884 3374 	strb.w	r3, [r4, #884]	; 0x374
    ep->tx_fifo_num = i;
 80061c8:	f8a4 337a 	strh.w	r3, [r4, #890]	; 0x37a
    ep->type = EP_TYPE_CTRL;
 80061cc:	f884 3377 	strb.w	r3, [r4, #887]	; 0x377
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80061d0:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
    ep->xfer_buff = 0;
 80061d4:	f8c4 3380 	str.w	r3, [r4, #896]	; 0x380
    ep->xfer_len = 0;
 80061d8:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
 80061dc:	e7de      	b.n	800619c <DCD_Init+0x430>
 80061de:	bf00      	nop

080061e0 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 80061e0:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80061e2:	060c      	lsls	r4, r1, #24
 80061e4:	d419      	bmi.n	800621a <DCD_EP_Open+0x3a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80061e6:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80061ea:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80061ee:	2428      	movs	r4, #40	; 0x28
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80061f0:	2600      	movs	r6, #0
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80061f2:	fb04 0401 	mla	r4, r4, r1, r0
  ep->num   = ep_addr & 0x7F;
 80061f6:	f885 1374 	strb.w	r1, [r5, #884]	; 0x374
  ep->maxpacket = ep_mps;
 80061fa:	f8c5 237c 	str.w	r2, [r5, #892]	; 0x37c
  ep->type = ep_type;
 80061fe:	f885 3377 	strb.w	r3, [r5, #887]	; 0x377
  ep->is_in = (0x80 & ep_addr) != 0;
 8006202:	f885 6375 	strb.w	r6, [r5, #885]	; 0x375
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8006206:	f504 715d 	add.w	r1, r4, #884	; 0x374
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 800620a:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0;
 800620c:	bf04      	itt	eq
 800620e:	2300      	moveq	r3, #0
 8006210:	710b      	strbeq	r3, [r1, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8006212:	f7fe fe85 	bl	8004f20 <USB_OTG_EPActivate>
  return 0;
}
 8006216:	2000      	movs	r0, #0
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->num   = ep_addr & 0x7F;
 800621e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8006222:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8006226:	2428      	movs	r4, #40	; 0x28
  ep->is_in = (0x80 & ep_addr) != 0;
 8006228:	2601      	movs	r6, #1
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800622a:	fb04 0401 	mla	r4, r4, r1, r0
  ep->num   = ep_addr & 0x7F;
 800622e:	f885 111c 	strb.w	r1, [r5, #284]	; 0x11c
    ep->tx_fifo_num = ep->num;
 8006232:	f8a5 1122 	strh.w	r1, [r5, #290]	; 0x122
  ep->maxpacket = ep_mps;
 8006236:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
  ep->type = ep_type;
 800623a:	f885 311f 	strb.w	r3, [r5, #287]	; 0x11f
  ep->is_in = (0x80 & ep_addr) != 0;
 800623e:	f885 611d 	strb.w	r6, [r5, #285]	; 0x11d
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8006242:	f504 718e 	add.w	r1, r4, #284	; 0x11c
 8006246:	e7e0      	b.n	800620a <DCD_EP_Open+0x2a>

08006248 <DCD_EP_Close>:
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8006248:	b24a      	sxtb	r2, r1
 800624a:	2a00      	cmp	r2, #0
{
 800624c:	b508      	push	{r3, lr}
  if ((ep_addr&0x80) == 0x80)
 800624e:	db0c      	blt.n	800626a <DCD_EP_Close+0x22>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8006250:	2328      	movs	r3, #40	; 0x28
 8006252:	fb03 0301 	mla	r3, r3, r1, r0
 8006256:	f503 735d 	add.w	r3, r3, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
  ep->is_in = (0x80 & ep_addr) != 0;
 800625a:	0fd2      	lsrs	r2, r2, #31
  ep->num   = ep_addr & 0x7F;
 800625c:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800625e:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8006260:	4619      	mov	r1, r3
 8006262:	f7fe fe8b 	bl	8004f7c <USB_OTG_EPDeactivate>
  return 0;
}
 8006266:	2000      	movs	r0, #0
 8006268:	bd08      	pop	{r3, pc}
 800626a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800626e:	2328      	movs	r3, #40	; 0x28
 8006270:	fb03 0301 	mla	r3, r3, r1, r0
 8006274:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006278:	e7ef      	b.n	800625a <DCD_EP_Close+0x12>
 800627a:	bf00      	nop

0800627c <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8006282:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8006286:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
 800628a:	2100      	movs	r1, #0
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 800628c:	f884 5374 	strb.w	r5, [r4, #884]	; 0x374
  ep->xfer_count = 0;
 8006290:	f8c4 138c 	str.w	r1, [r4, #908]	; 0x38c
  ep->is_in = 0;
 8006294:	f884 1375 	strb.w	r1, [r4, #885]	; 0x375
  ep->xfer_buff = pbuf;  
 8006298:	f8c4 2380 	str.w	r2, [r4, #896]	; 0x380
  ep->xfer_len = buf_len;
 800629c:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
  
  if (pdev->cfg.dma_enable == 1)
 80062a0:	78c3      	ldrb	r3, [r0, #3]
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80062a2:	2128      	movs	r1, #40	; 0x28
  if (pdev->cfg.dma_enable == 1)
 80062a4:	2b01      	cmp	r3, #1
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80062a6:	fb01 0105 	mla	r1, r1, r5, r0
 80062aa:	bf08      	it	eq
 80062ac:	b2ed      	uxtbeq	r5, r5
 80062ae:	f501 715d 	add.w	r1, r1, #884	; 0x374
  {
    ep->dma_addr = (uint32_t)pbuf;  
 80062b2:	bf08      	it	eq
 80062b4:	f8c4 2384 	streq.w	r2, [r4, #900]	; 0x384
  }
  
  if ( ep->num == 0 )
 80062b8:	b11d      	cbz	r5, 80062c2 <DCD_EP_PrepareRx+0x46>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 80062ba:	f7fe fe81 	bl	8004fc0 <USB_OTG_EPStartXfer>
  }
  return 0;
}
 80062be:	2000      	movs	r0, #0
 80062c0:	bd38      	pop	{r3, r4, r5, pc}
    USB_OTG_EP0StartXfer(pdev , ep);
 80062c2:	f7fe ff17 	bl	80050f4 <USB_OTG_EP0StartXfer>
}
 80062c6:	2000      	movs	r0, #0
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
 80062ca:	bf00      	nop

080062cc <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 80062d2:	eb06 0486 	add.w	r4, r6, r6, lsl #2
 80062d6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80062da:	2528      	movs	r5, #40	; 0x28
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
  ep->xfer_count = 0;
 80062dc:	2100      	movs	r1, #0
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80062de:	fb05 0506 	mla	r5, r5, r6, r0
  ep->is_in = 1;
 80062e2:	2701      	movs	r7, #1
  ep->xfer_count = 0;
 80062e4:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
  ep->num = ep_addr & 0x7F;  
 80062e8:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
  ep->xfer_buff = pbuf;
 80062ec:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
  ep->dma_addr = (uint32_t)pbuf;  
 80062f0:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
  ep->xfer_len  = buf_len;
 80062f4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  ep->is_in = 1;
 80062f8:	f884 711d 	strb.w	r7, [r4, #285]	; 0x11d
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80062fc:	f505 718e 	add.w	r1, r5, #284	; 0x11c
  
  if ( ep->num == 0 )
 8006300:	b11e      	cbz	r6, 800630a <DCD_EP_Tx+0x3e>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8006302:	f7fe fe5d 	bl	8004fc0 <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8006306:	2000      	movs	r0, #0
 8006308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USB_OTG_EP0StartXfer(pdev , ep);
 800630a:	f7fe fef3 	bl	80050f4 <USB_OTG_EP0StartXfer>
}
 800630e:	2000      	movs	r0, #0
 8006310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006312:	bf00      	nop

08006314 <DCD_EP_Stall>:
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8006314:	b24a      	sxtb	r2, r1
 8006316:	2a00      	cmp	r2, #0
{
 8006318:	b510      	push	{r4, lr}
  if ((0x80 & epnum) == 0x80)
 800631a:	db0e      	blt.n	800633a <DCD_EP_Stall+0x26>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800631c:	2328      	movs	r3, #40	; 0x28
 800631e:	fb03 0301 	mla	r3, r3, r1, r0
 8006322:	f503 735d 	add.w	r3, r3, #884	; 0x374
  }

  ep->is_stall = 1;
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8006326:	0fd2      	lsrs	r2, r2, #31
  ep->is_stall = 1;
 8006328:	2401      	movs	r4, #1
  ep->num   = epnum & 0x7F;
 800632a:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 800632c:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 1;
 800632e:	709c      	strb	r4, [r3, #2]
  
  USB_OTG_EPSetStall(pdev , ep);
 8006330:	4619      	mov	r1, r3
 8006332:	f7fe ff33 	bl	800519c <USB_OTG_EPSetStall>
  return (0);
}
 8006336:	2000      	movs	r0, #0
 8006338:	bd10      	pop	{r4, pc}
 800633a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 800633e:	2328      	movs	r3, #40	; 0x28
 8006340:	fb03 0301 	mla	r3, r3, r1, r0
 8006344:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006348:	e7ed      	b.n	8006326 <DCD_EP_Stall+0x12>
 800634a:	bf00      	nop

0800634c <DCD_EP_ClrStall>:
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800634c:	b24a      	sxtb	r2, r1
 800634e:	2a00      	cmp	r2, #0
{
 8006350:	b510      	push	{r4, lr}
  if ((0x80 & epnum) == 0x80)
 8006352:	db0e      	blt.n	8006372 <DCD_EP_ClrStall+0x26>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8006354:	2328      	movs	r3, #40	; 0x28
 8006356:	fb03 0301 	mla	r3, r3, r1, r0
 800635a:	f503 735d 	add.w	r3, r3, #884	; 0x374
  }
  
  ep->is_stall = 0;  
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 800635e:	0fd2      	lsrs	r2, r2, #31
  ep->is_stall = 0;  
 8006360:	2400      	movs	r4, #0
  ep->num   = epnum & 0x7F;
 8006362:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8006364:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 0;  
 8006366:	709c      	strb	r4, [r3, #2]
  
  USB_OTG_EPClearStall(pdev , ep);
 8006368:	4619      	mov	r1, r3
 800636a:	f7fe ff2f 	bl	80051cc <USB_OTG_EPClearStall>
  return (0);
}
 800636e:	4620      	mov	r0, r4
 8006370:	bd10      	pop	{r4, pc}
 8006372:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8006376:	2328      	movs	r3, #40	; 0x28
 8006378:	fb03 0301 	mla	r3, r3, r1, r0
 800637c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006380:	e7ed      	b.n	800635e <DCD_EP_ClrStall+0x12>
 8006382:	bf00      	nop

08006384 <DCD_EP_SetAddress>:
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8006384:	6902      	ldr	r2, [r0, #16]
  dcfg.d32 = 0;
 8006386:	2300      	movs	r3, #0
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8006388:	6810      	ldr	r0, [r2, #0]
  dcfg.b.devaddr = address;
 800638a:	f361 130a 	bfi	r3, r1, #4, #7
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 800638e:	4303      	orrs	r3, r0
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	4770      	bx	lr

08006394 <cosf>:
 8006394:	b500      	push	{lr}
 8006396:	ee10 3a10 	vmov	r3, s0
 800639a:	4a20      	ldr	r2, [pc, #128]	; (800641c <cosf+0x88>)
 800639c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	4293      	cmp	r3, r2
 80063a2:	b083      	sub	sp, #12
 80063a4:	dd19      	ble.n	80063da <cosf+0x46>
 80063a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80063aa:	db04      	blt.n	80063b6 <cosf+0x22>
 80063ac:	ee30 0a40 	vsub.f32	s0, s0, s0
 80063b0:	b003      	add	sp, #12
 80063b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80063b6:	4668      	mov	r0, sp
 80063b8:	f000 fc74 	bl	8006ca4 <__ieee754_rem_pio2f>
 80063bc:	f000 0003 	and.w	r0, r0, #3
 80063c0:	2801      	cmp	r0, #1
 80063c2:	d01a      	beq.n	80063fa <cosf+0x66>
 80063c4:	2802      	cmp	r0, #2
 80063c6:	d00f      	beq.n	80063e8 <cosf+0x54>
 80063c8:	b300      	cbz	r0, 800640c <cosf+0x78>
 80063ca:	2001      	movs	r0, #1
 80063cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80063d0:	ed9d 0a00 	vldr	s0, [sp]
 80063d4:	f001 f9c8 	bl	8007768 <__kernel_sinf>
 80063d8:	e7ea      	b.n	80063b0 <cosf+0x1c>
 80063da:	eddf 0a11 	vldr	s1, [pc, #68]	; 8006420 <cosf+0x8c>
 80063de:	f000 fdf9 	bl	8006fd4 <__kernel_cosf>
 80063e2:	b003      	add	sp, #12
 80063e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80063e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80063ec:	ed9d 0a00 	vldr	s0, [sp]
 80063f0:	f000 fdf0 	bl	8006fd4 <__kernel_cosf>
 80063f4:	eeb1 0a40 	vneg.f32	s0, s0
 80063f8:	e7da      	b.n	80063b0 <cosf+0x1c>
 80063fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80063fe:	ed9d 0a00 	vldr	s0, [sp]
 8006402:	f001 f9b1 	bl	8007768 <__kernel_sinf>
 8006406:	eeb1 0a40 	vneg.f32	s0, s0
 800640a:	e7d1      	b.n	80063b0 <cosf+0x1c>
 800640c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006410:	ed9d 0a00 	vldr	s0, [sp]
 8006414:	f000 fdde 	bl	8006fd4 <__kernel_cosf>
 8006418:	e7ca      	b.n	80063b0 <cosf+0x1c>
 800641a:	bf00      	nop
 800641c:	3f490fd8 	.word	0x3f490fd8
 8006420:	00000000 	.word	0x00000000

08006424 <fabsf>:
 8006424:	ee10 3a10 	vmov	r3, s0
 8006428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800642c:	ee00 3a10 	vmov	s0, r3
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop

08006434 <sinf>:
 8006434:	b500      	push	{lr}
 8006436:	ee10 3a10 	vmov	r3, s0
 800643a:	4a21      	ldr	r2, [pc, #132]	; (80064c0 <sinf+0x8c>)
 800643c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006440:	4293      	cmp	r3, r2
 8006442:	b083      	sub	sp, #12
 8006444:	dd1a      	ble.n	800647c <sinf+0x48>
 8006446:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800644a:	db04      	blt.n	8006456 <sinf+0x22>
 800644c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006450:	b003      	add	sp, #12
 8006452:	f85d fb04 	ldr.w	pc, [sp], #4
 8006456:	4668      	mov	r0, sp
 8006458:	f000 fc24 	bl	8006ca4 <__ieee754_rem_pio2f>
 800645c:	f000 0003 	and.w	r0, r0, #3
 8006460:	2801      	cmp	r0, #1
 8006462:	d01d      	beq.n	80064a0 <sinf+0x6c>
 8006464:	2802      	cmp	r0, #2
 8006466:	d011      	beq.n	800648c <sinf+0x58>
 8006468:	b308      	cbz	r0, 80064ae <sinf+0x7a>
 800646a:	eddd 0a01 	vldr	s1, [sp, #4]
 800646e:	ed9d 0a00 	vldr	s0, [sp]
 8006472:	f000 fdaf 	bl	8006fd4 <__kernel_cosf>
 8006476:	eeb1 0a40 	vneg.f32	s0, s0
 800647a:	e7e9      	b.n	8006450 <sinf+0x1c>
 800647c:	2000      	movs	r0, #0
 800647e:	eddf 0a11 	vldr	s1, [pc, #68]	; 80064c4 <sinf+0x90>
 8006482:	f001 f971 	bl	8007768 <__kernel_sinf>
 8006486:	b003      	add	sp, #12
 8006488:	f85d fb04 	ldr.w	pc, [sp], #4
 800648c:	2001      	movs	r0, #1
 800648e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006492:	ed9d 0a00 	vldr	s0, [sp]
 8006496:	f001 f967 	bl	8007768 <__kernel_sinf>
 800649a:	eeb1 0a40 	vneg.f32	s0, s0
 800649e:	e7d7      	b.n	8006450 <sinf+0x1c>
 80064a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80064a4:	ed9d 0a00 	vldr	s0, [sp]
 80064a8:	f000 fd94 	bl	8006fd4 <__kernel_cosf>
 80064ac:	e7d0      	b.n	8006450 <sinf+0x1c>
 80064ae:	2001      	movs	r0, #1
 80064b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80064b4:	ed9d 0a00 	vldr	s0, [sp]
 80064b8:	f001 f956 	bl	8007768 <__kernel_sinf>
 80064bc:	e7c8      	b.n	8006450 <sinf+0x1c>
 80064be:	bf00      	nop
 80064c0:	3f490fd8 	.word	0x3f490fd8
 80064c4:	00000000 	.word	0x00000000

080064c8 <acosf>:
 80064c8:	b510      	push	{r4, lr}
 80064ca:	ed2d 8b02 	vpush	{d8}
 80064ce:	4c29      	ldr	r4, [pc, #164]	; (8006574 <acosf+0xac>)
 80064d0:	b08a      	sub	sp, #40	; 0x28
 80064d2:	eeb0 8a40 	vmov.f32	s16, s0
 80064d6:	f000 f907 	bl	80066e8 <__ieee754_acosf>
 80064da:	f994 3000 	ldrsb.w	r3, [r4]
 80064de:	3301      	adds	r3, #1
 80064e0:	eef0 8a40 	vmov.f32	s17, s0
 80064e4:	d034      	beq.n	8006550 <acosf+0x88>
 80064e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80064ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ee:	d62f      	bvs.n	8006550 <acosf+0x88>
 80064f0:	eeb0 0a48 	vmov.f32	s0, s16
 80064f4:	f7ff ff96 	bl	8006424 <fabsf>
 80064f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80064fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006504:	dd24      	ble.n	8006550 <acosf+0x88>
 8006506:	2301      	movs	r3, #1
 8006508:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <acosf+0xb0>)
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	ee18 0a10 	vmov	r0, s16
 8006510:	2300      	movs	r3, #0
 8006512:	9201      	str	r2, [sp, #4]
 8006514:	9308      	str	r3, [sp, #32]
 8006516:	f7fa f965 	bl	80007e4 <__aeabi_f2d>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4817      	ldr	r0, [pc, #92]	; (800657c <acosf+0xb4>)
 8006520:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006528:	f001 f96a 	bl	8007800 <nan>
 800652c:	f994 3000 	ldrsb.w	r3, [r4]
 8006530:	2b02      	cmp	r3, #2
 8006532:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006536:	d011      	beq.n	800655c <acosf+0x94>
 8006538:	4668      	mov	r0, sp
 800653a:	f001 f95d 	bl	80077f8 <matherr>
 800653e:	b168      	cbz	r0, 800655c <acosf+0x94>
 8006540:	9b08      	ldr	r3, [sp, #32]
 8006542:	b993      	cbnz	r3, 800656a <acosf+0xa2>
 8006544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006548:	f7fa fc78 	bl	8000e3c <__aeabi_d2f>
 800654c:	ee08 0a90 	vmov	s17, r0
 8006550:	eeb0 0a68 	vmov.f32	s0, s17
 8006554:	b00a      	add	sp, #40	; 0x28
 8006556:	ecbd 8b02 	vpop	{d8}
 800655a:	bd10      	pop	{r4, pc}
 800655c:	f001 faec 	bl	8007b38 <__errno>
 8006560:	2321      	movs	r3, #33	; 0x21
 8006562:	6003      	str	r3, [r0, #0]
 8006564:	9b08      	ldr	r3, [sp, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0ec      	beq.n	8006544 <acosf+0x7c>
 800656a:	f001 fae5 	bl	8007b38 <__errno>
 800656e:	9b08      	ldr	r3, [sp, #32]
 8006570:	6003      	str	r3, [r0, #0]
 8006572:	e7e7      	b.n	8006544 <acosf+0x7c>
 8006574:	2000056f 	.word	0x2000056f
 8006578:	0800b428 	.word	0x0800b428
 800657c:	0800b850 	.word	0x0800b850

08006580 <asinf>:
 8006580:	b510      	push	{r4, lr}
 8006582:	ed2d 8b02 	vpush	{d8}
 8006586:	4c29      	ldr	r4, [pc, #164]	; (800662c <asinf+0xac>)
 8006588:	b08a      	sub	sp, #40	; 0x28
 800658a:	eeb0 8a40 	vmov.f32	s16, s0
 800658e:	f000 f9cd 	bl	800692c <__ieee754_asinf>
 8006592:	f994 3000 	ldrsb.w	r3, [r4]
 8006596:	3301      	adds	r3, #1
 8006598:	eef0 8a40 	vmov.f32	s17, s0
 800659c:	d034      	beq.n	8006608 <asinf+0x88>
 800659e:	eeb4 8a48 	vcmp.f32	s16, s16
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	d62f      	bvs.n	8006608 <asinf+0x88>
 80065a8:	eeb0 0a48 	vmov.f32	s0, s16
 80065ac:	f7ff ff3a 	bl	8006424 <fabsf>
 80065b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80065b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80065b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065bc:	dd24      	ble.n	8006608 <asinf+0x88>
 80065be:	2301      	movs	r3, #1
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <asinf+0xb0>)
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	ee18 0a10 	vmov	r0, s16
 80065c8:	2300      	movs	r3, #0
 80065ca:	9201      	str	r2, [sp, #4]
 80065cc:	9308      	str	r3, [sp, #32]
 80065ce:	f7fa f909 	bl	80007e4 <__aeabi_f2d>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4817      	ldr	r0, [pc, #92]	; (8006634 <asinf+0xb4>)
 80065d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065e0:	f001 f90e 	bl	8007800 <nan>
 80065e4:	f994 3000 	ldrsb.w	r3, [r4]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	ed8d 0b06 	vstr	d0, [sp, #24]
 80065ee:	d011      	beq.n	8006614 <asinf+0x94>
 80065f0:	4668      	mov	r0, sp
 80065f2:	f001 f901 	bl	80077f8 <matherr>
 80065f6:	b168      	cbz	r0, 8006614 <asinf+0x94>
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	b993      	cbnz	r3, 8006622 <asinf+0xa2>
 80065fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006600:	f7fa fc1c 	bl	8000e3c <__aeabi_d2f>
 8006604:	ee08 0a90 	vmov	s17, r0
 8006608:	eeb0 0a68 	vmov.f32	s0, s17
 800660c:	b00a      	add	sp, #40	; 0x28
 800660e:	ecbd 8b02 	vpop	{d8}
 8006612:	bd10      	pop	{r4, pc}
 8006614:	f001 fa90 	bl	8007b38 <__errno>
 8006618:	2321      	movs	r3, #33	; 0x21
 800661a:	6003      	str	r3, [r0, #0]
 800661c:	9b08      	ldr	r3, [sp, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0ec      	beq.n	80065fc <asinf+0x7c>
 8006622:	f001 fa89 	bl	8007b38 <__errno>
 8006626:	9b08      	ldr	r3, [sp, #32]
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	e7e7      	b.n	80065fc <asinf+0x7c>
 800662c:	2000056f 	.word	0x2000056f
 8006630:	0800b430 	.word	0x0800b430
 8006634:	0800b850 	.word	0x0800b850

08006638 <atan2f>:
 8006638:	f000 ba74 	b.w	8006b24 <__ieee754_atan2f>

0800663c <sqrtf>:
 800663c:	b510      	push	{r4, lr}
 800663e:	ed2d 8b02 	vpush	{d8}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	eeb0 8a40 	vmov.f32	s16, s0
 8006648:	f000 fc74 	bl	8006f34 <__ieee754_sqrtf>
 800664c:	4b24      	ldr	r3, [pc, #144]	; (80066e0 <sqrtf+0xa4>)
 800664e:	f993 4000 	ldrsb.w	r4, [r3]
 8006652:	1c63      	adds	r3, r4, #1
 8006654:	d009      	beq.n	800666a <sqrtf+0x2e>
 8006656:	eeb4 8a48 	vcmp.f32	s16, s16
 800665a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665e:	d604      	bvs.n	800666a <sqrtf+0x2e>
 8006660:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006668:	d403      	bmi.n	8006672 <sqrtf+0x36>
 800666a:	b00a      	add	sp, #40	; 0x28
 800666c:	ecbd 8b02 	vpop	{d8}
 8006670:	bd10      	pop	{r4, pc}
 8006672:	2301      	movs	r3, #1
 8006674:	4a1b      	ldr	r2, [pc, #108]	; (80066e4 <sqrtf+0xa8>)
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	ee18 0a10 	vmov	r0, s16
 800667c:	2300      	movs	r3, #0
 800667e:	9201      	str	r2, [sp, #4]
 8006680:	9308      	str	r3, [sp, #32]
 8006682:	f7fa f8af 	bl	80007e4 <__aeabi_f2d>
 8006686:	2200      	movs	r2, #0
 8006688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800668c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006690:	2300      	movs	r3, #0
 8006692:	b1bc      	cbz	r4, 80066c4 <sqrtf+0x88>
 8006694:	4610      	mov	r0, r2
 8006696:	4619      	mov	r1, r3
 8006698:	f7fa fa22 	bl	8000ae0 <__aeabi_ddiv>
 800669c:	2c02      	cmp	r4, #2
 800669e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066a2:	d111      	bne.n	80066c8 <sqrtf+0x8c>
 80066a4:	f001 fa48 	bl	8007b38 <__errno>
 80066a8:	2321      	movs	r3, #33	; 0x21
 80066aa:	6003      	str	r3, [r0, #0]
 80066ac:	9b08      	ldr	r3, [sp, #32]
 80066ae:	b98b      	cbnz	r3, 80066d4 <sqrtf+0x98>
 80066b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066b4:	f7fa fbc2 	bl	8000e3c <__aeabi_d2f>
 80066b8:	ee00 0a10 	vmov	s0, r0
 80066bc:	b00a      	add	sp, #40	; 0x28
 80066be:	ecbd 8b02 	vpop	{d8}
 80066c2:	bd10      	pop	{r4, pc}
 80066c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066c8:	4668      	mov	r0, sp
 80066ca:	f001 f895 	bl	80077f8 <matherr>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d1ec      	bne.n	80066ac <sqrtf+0x70>
 80066d2:	e7e7      	b.n	80066a4 <sqrtf+0x68>
 80066d4:	f001 fa30 	bl	8007b38 <__errno>
 80066d8:	9b08      	ldr	r3, [sp, #32]
 80066da:	6003      	str	r3, [r0, #0]
 80066dc:	e7e8      	b.n	80066b0 <sqrtf+0x74>
 80066de:	bf00      	nop
 80066e0:	2000056f 	.word	0x2000056f
 80066e4:	0800b438 	.word	0x0800b438

080066e8 <__ieee754_acosf>:
 80066e8:	b508      	push	{r3, lr}
 80066ea:	ee10 2a10 	vmov	r2, s0
 80066ee:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80066f2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80066f6:	ed2d 8b02 	vpush	{d8}
 80066fa:	d012      	beq.n	8006722 <__ieee754_acosf+0x3a>
 80066fc:	dc0a      	bgt.n	8006714 <__ieee754_acosf+0x2c>
 80066fe:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006702:	da19      	bge.n	8006738 <__ieee754_acosf+0x50>
 8006704:	f1b3 5f0c 	cmp.w	r3, #587202560	; 0x23000000
 8006708:	dc6a      	bgt.n	80067e0 <__ieee754_acosf+0xf8>
 800670a:	ecbd 8b02 	vpop	{d8}
 800670e:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80068e8 <__ieee754_acosf+0x200>
 8006712:	bd08      	pop	{r3, pc}
 8006714:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006718:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800671c:	ecbd 8b02 	vpop	{d8}
 8006720:	bd08      	pop	{r3, pc}
 8006722:	ecbd 8b02 	vpop	{d8}
 8006726:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80068ec <__ieee754_acosf+0x204>
 800672a:	eddf 7a71 	vldr	s15, [pc, #452]	; 80068f0 <__ieee754_acosf+0x208>
 800672e:	2a00      	cmp	r2, #0
 8006730:	bfd8      	it	le
 8006732:	eeb0 0a67 	vmovle.f32	s0, s15
 8006736:	bd08      	pop	{r3, pc}
 8006738:	2a00      	cmp	r2, #0
 800673a:	f2c0 808e 	blt.w	800685a <__ieee754_acosf+0x172>
 800673e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006742:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8006746:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800674a:	ee20 8a08 	vmul.f32	s16, s0, s16
 800674e:	eeb0 0a48 	vmov.f32	s0, s16
 8006752:	f000 fbef 	bl	8006f34 <__ieee754_sqrtf>
 8006756:	eddf 7a67 	vldr	s15, [pc, #412]	; 80068f4 <__ieee754_acosf+0x20c>
 800675a:	ed9f 3a67 	vldr	s6, [pc, #412]	; 80068f8 <__ieee754_acosf+0x210>
 800675e:	ed9f 4a67 	vldr	s8, [pc, #412]	; 80068fc <__ieee754_acosf+0x214>
 8006762:	eddf 2a67 	vldr	s5, [pc, #412]	; 8006900 <__ieee754_acosf+0x218>
 8006766:	eddf 3a67 	vldr	s7, [pc, #412]	; 8006904 <__ieee754_acosf+0x21c>
 800676a:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8006908 <__ieee754_acosf+0x220>
 800676e:	eddf 4a67 	vldr	s9, [pc, #412]	; 800690c <__ieee754_acosf+0x224>
 8006772:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8006910 <__ieee754_acosf+0x228>
 8006776:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006914 <__ieee754_acosf+0x22c>
 800677a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006918 <__ieee754_acosf+0x230>
 800677e:	eea8 3a27 	vfma.f32	s6, s16, s15
 8006782:	eee8 3a22 	vfma.f32	s7, s16, s5
 8006786:	eea8 4a03 	vfma.f32	s8, s16, s6
 800678a:	eee8 4a23 	vfma.f32	s9, s16, s7
 800678e:	eea8 5a04 	vfma.f32	s10, s16, s8
 8006792:	ee10 3a10 	vmov	r3, s0
 8006796:	eea8 6a05 	vfma.f32	s12, s16, s10
 800679a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800679e:	f023 030f 	bic.w	r3, r3, #15
 80067a2:	eee8 5a24 	vfma.f32	s11, s16, s9
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eea8 7a06 	vfma.f32	s14, s16, s12
 80067ae:	eee8 8a25 	vfma.f32	s17, s16, s11
 80067b2:	eef0 5a48 	vmov.f32	s11, s16
 80067b6:	eee7 5ae7 	vfms.f32	s11, s15, s15
 80067ba:	ee27 8a08 	vmul.f32	s16, s14, s16
 80067be:	ee37 6a80 	vadd.f32	s12, s15, s0
 80067c2:	eef0 6a40 	vmov.f32	s13, s0
 80067c6:	ee88 7a28 	vdiv.f32	s14, s16, s17
 80067ca:	ecbd 8b02 	vpop	{d8}
 80067ce:	ee85 0a86 	vdiv.f32	s0, s11, s12
 80067d2:	eea6 0a87 	vfma.f32	s0, s13, s14
 80067d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80067da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80067de:	bd08      	pop	{r3, pc}
 80067e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80067e4:	eddf 1a43 	vldr	s3, [pc, #268]	; 80068f4 <__ieee754_acosf+0x20c>
 80067e8:	eddf 2a43 	vldr	s5, [pc, #268]	; 80068f8 <__ieee754_acosf+0x210>
 80067ec:	eddf 3a43 	vldr	s7, [pc, #268]	; 80068fc <__ieee754_acosf+0x214>
 80067f0:	ed9f 2a43 	vldr	s4, [pc, #268]	; 8006900 <__ieee754_acosf+0x218>
 80067f4:	ed9f 3a43 	vldr	s6, [pc, #268]	; 8006904 <__ieee754_acosf+0x21c>
 80067f8:	eddf 5a43 	vldr	s11, [pc, #268]	; 8006908 <__ieee754_acosf+0x220>
 80067fc:	ed9f 4a43 	vldr	s8, [pc, #268]	; 800690c <__ieee754_acosf+0x224>
 8006800:	eddf 4a43 	vldr	s9, [pc, #268]	; 8006910 <__ieee754_acosf+0x228>
 8006804:	ed9f 5a43 	vldr	s10, [pc, #268]	; 8006914 <__ieee754_acosf+0x22c>
 8006808:	eddf 6a43 	vldr	s13, [pc, #268]	; 8006918 <__ieee754_acosf+0x230>
 800680c:	ed9f 6a43 	vldr	s12, [pc, #268]	; 800691c <__ieee754_acosf+0x234>
 8006810:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006920 <__ieee754_acosf+0x238>
 8006814:	eee7 2a21 	vfma.f32	s5, s14, s3
 8006818:	ecbd 8b02 	vpop	{d8}
 800681c:	eee7 3a22 	vfma.f32	s7, s14, s5
 8006820:	eea7 3a02 	vfma.f32	s6, s14, s4
 8006824:	eee7 5a23 	vfma.f32	s11, s14, s7
 8006828:	eea7 4a03 	vfma.f32	s8, s14, s6
 800682c:	eee7 4a25 	vfma.f32	s9, s14, s11
 8006830:	eea7 5a04 	vfma.f32	s10, s14, s8
 8006834:	eee7 6a24 	vfma.f32	s13, s14, s9
 8006838:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800683c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8006840:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006844:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8006848:	eeb0 7a46 	vmov.f32	s14, s12
 800684c:	eea0 7a66 	vfms.f32	s14, s0, s13
 8006850:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006854:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006858:	bd08      	pop	{r3, pc}
 800685a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800685e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006862:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006866:	ee60 7a27 	vmul.f32	s15, s0, s15
 800686a:	eddf 2a22 	vldr	s5, [pc, #136]	; 80068f4 <__ieee754_acosf+0x20c>
 800686e:	eddf 3a22 	vldr	s7, [pc, #136]	; 80068f8 <__ieee754_acosf+0x210>
 8006872:	eddf 4a22 	vldr	s9, [pc, #136]	; 80068fc <__ieee754_acosf+0x214>
 8006876:	ed9f 3a22 	vldr	s6, [pc, #136]	; 8006900 <__ieee754_acosf+0x218>
 800687a:	ed9f 4a22 	vldr	s8, [pc, #136]	; 8006904 <__ieee754_acosf+0x21c>
 800687e:	eddf 5a22 	vldr	s11, [pc, #136]	; 8006908 <__ieee754_acosf+0x220>
 8006882:	ed9f 5a22 	vldr	s10, [pc, #136]	; 800690c <__ieee754_acosf+0x224>
 8006886:	eddf 6a22 	vldr	s13, [pc, #136]	; 8006910 <__ieee754_acosf+0x228>
 800688a:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8006914 <__ieee754_acosf+0x22c>
 800688e:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8006918 <__ieee754_acosf+0x230>
 8006892:	eee7 3aa2 	vfma.f32	s7, s15, s5
 8006896:	eea7 4a83 	vfma.f32	s8, s15, s6
 800689a:	eee7 4aa3 	vfma.f32	s9, s15, s7
 800689e:	eea7 5a84 	vfma.f32	s10, s15, s8
 80068a2:	eee7 5aa4 	vfma.f32	s11, s15, s9
 80068a6:	eea7 6a85 	vfma.f32	s12, s15, s10
 80068aa:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80068ae:	eea7 7a86 	vfma.f32	s14, s15, s12
 80068b2:	eea7 8aa6 	vfma.f32	s16, s15, s13
 80068b6:	eef0 8a47 	vmov.f32	s17, s14
 80068ba:	ee28 8a27 	vmul.f32	s16, s16, s15
 80068be:	eeb0 0a67 	vmov.f32	s0, s15
 80068c2:	f000 fb37 	bl	8006f34 <__ieee754_sqrtf>
 80068c6:	eec8 6a28 	vdiv.f32	s13, s16, s17
 80068ca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006924 <__ieee754_acosf+0x23c>
 80068ce:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006928 <__ieee754_acosf+0x240>
 80068d2:	eea0 7a26 	vfma.f32	s14, s0, s13
 80068d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80068da:	ee37 0a00 	vadd.f32	s0, s14, s0
 80068de:	eee0 7a66 	vfms.f32	s15, s0, s13
 80068e2:	eeb0 0a67 	vmov.f32	s0, s15
 80068e6:	e719      	b.n	800671c <__ieee754_acosf+0x34>
 80068e8:	3fc90fdb 	.word	0x3fc90fdb
 80068ec:	00000000 	.word	0x00000000
 80068f0:	40490fdb 	.word	0x40490fdb
 80068f4:	3811ef08 	.word	0x3811ef08
 80068f8:	3a4f7f04 	.word	0x3a4f7f04
 80068fc:	bd241146 	.word	0xbd241146
 8006900:	3d9dc62e 	.word	0x3d9dc62e
 8006904:	bf303361 	.word	0xbf303361
 8006908:	3e4e0aa8 	.word	0x3e4e0aa8
 800690c:	4001572d 	.word	0x4001572d
 8006910:	bea6b090 	.word	0xbea6b090
 8006914:	c019d139 	.word	0xc019d139
 8006918:	3e2aaaab 	.word	0x3e2aaaab
 800691c:	33a22168 	.word	0x33a22168
 8006920:	3fc90fda 	.word	0x3fc90fda
 8006924:	b3a22168 	.word	0xb3a22168
 8006928:	40490fda 	.word	0x40490fda

0800692c <__ieee754_asinf>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	ee10 5a10 	vmov	r5, s0
 8006932:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006936:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800693a:	ed2d 8b04 	vpush	{d8-d9}
 800693e:	f000 8091 	beq.w	8006a64 <__ieee754_asinf+0x138>
 8006942:	dc79      	bgt.n	8006a38 <__ieee754_asinf+0x10c>
 8006944:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006948:	da0e      	bge.n	8006968 <__ieee754_asinf+0x3c>
 800694a:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800694e:	f280 8096 	bge.w	8006a7e <__ieee754_asinf+0x152>
 8006952:	eddf 7a64 	vldr	s15, [pc, #400]	; 8006ae4 <__ieee754_asinf+0x1b8>
 8006956:	ee70 7a27 	vadd.f32	s15, s0, s15
 800695a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800695e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006966:	dc6b      	bgt.n	8006a40 <__ieee754_asinf+0x114>
 8006968:	f7ff fd5c 	bl	8006424 <fabsf>
 800696c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006970:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006974:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8006978:	ee20 8a08 	vmul.f32	s16, s0, s16
 800697c:	eddf 2a5a 	vldr	s5, [pc, #360]	; 8006ae8 <__ieee754_asinf+0x1bc>
 8006980:	eddf 3a5a 	vldr	s7, [pc, #360]	; 8006aec <__ieee754_asinf+0x1c0>
 8006984:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 8006af0 <__ieee754_asinf+0x1c4>
 8006988:	eddf 4a5a 	vldr	s9, [pc, #360]	; 8006af4 <__ieee754_asinf+0x1c8>
 800698c:	ed9f 4a5a 	vldr	s8, [pc, #360]	; 8006af8 <__ieee754_asinf+0x1cc>
 8006990:	eddf 5a5a 	vldr	s11, [pc, #360]	; 8006afc <__ieee754_asinf+0x1d0>
 8006994:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 8006b00 <__ieee754_asinf+0x1d4>
 8006998:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8006b04 <__ieee754_asinf+0x1d8>
 800699c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8006b08 <__ieee754_asinf+0x1dc>
 80069a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8006b0c <__ieee754_asinf+0x1e0>
 80069a4:	eee8 3a22 	vfma.f32	s7, s16, s5
 80069a8:	eea8 4a03 	vfma.f32	s8, s16, s6
 80069ac:	eee8 4a23 	vfma.f32	s9, s16, s7
 80069b0:	eea8 5a04 	vfma.f32	s10, s16, s8
 80069b4:	eee8 5a24 	vfma.f32	s11, s16, s9
 80069b8:	eee8 6a05 	vfma.f32	s13, s16, s10
 80069bc:	eea8 6a25 	vfma.f32	s12, s16, s11
 80069c0:	eea8 7a26 	vfma.f32	s14, s16, s13
 80069c4:	eee8 7a06 	vfma.f32	s15, s16, s12
 80069c8:	eeb0 0a48 	vmov.f32	s0, s16
 80069cc:	eeb0 9a47 	vmov.f32	s18, s14
 80069d0:	ee67 8a88 	vmul.f32	s17, s15, s16
 80069d4:	f000 faae 	bl	8006f34 <__ieee754_sqrtf>
 80069d8:	4b4d      	ldr	r3, [pc, #308]	; (8006b10 <__ieee754_asinf+0x1e4>)
 80069da:	429c      	cmp	r4, r3
 80069dc:	dc33      	bgt.n	8006a46 <__ieee754_asinf+0x11a>
 80069de:	ee10 3a10 	vmov	r3, s0
 80069e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80069e6:	f023 030f 	bic.w	r3, r3, #15
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eeb1 6a67 	vneg.f32	s12, s15
 80069f2:	eea6 8a27 	vfma.f32	s16, s12, s15
 80069f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80069fa:	eec8 5a89 	vdiv.f32	s11, s17, s18
 80069fe:	ee88 5a27 	vdiv.f32	s10, s16, s15
 8006a02:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006b14 <__ieee754_asinf+0x1e8>
 8006a06:	eddf 7a44 	vldr	s15, [pc, #272]	; 8006b18 <__ieee754_asinf+0x1ec>
 8006a0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006a0e:	eea5 7a66 	vfms.f32	s14, s10, s13
 8006a12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006a16:	eeb0 5a67 	vmov.f32	s10, s15
 8006a1a:	eea6 5a26 	vfma.f32	s10, s12, s13
 8006a1e:	ee95 7a80 	vfnms.f32	s14, s11, s0
 8006a22:	ee37 0a45 	vsub.f32	s0, s14, s10
 8006a26:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006a2a:	ecbd 8b04 	vpop	{d8-d9}
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	bfd8      	it	le
 8006a32:	eeb1 0a40 	vnegle.f32	s0, s0
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006a3c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006a40:	ecbd 8b04 	vpop	{d8-d9}
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8006a4a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006b1c <__ieee754_asinf+0x1f0>
 8006a4e:	eddf 7a34 	vldr	s15, [pc, #208]	; 8006b20 <__ieee754_asinf+0x1f4>
 8006a52:	eea0 0a26 	vfma.f32	s0, s0, s13
 8006a56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006a5a:	eea0 7a26 	vfma.f32	s14, s0, s13
 8006a5e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8006a62:	e7e2      	b.n	8006a2a <__ieee754_asinf+0xfe>
 8006a64:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006b14 <__ieee754_asinf+0x1e8>
 8006a68:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006b20 <__ieee754_asinf+0x1f4>
 8006a6c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006a70:	ecbd 8b04 	vpop	{d8-d9}
 8006a74:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006a78:	eeb0 0a67 	vmov.f32	s0, s15
 8006a7c:	bd38      	pop	{r3, r4, r5, pc}
 8006a7e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006a82:	eddf 2a19 	vldr	s5, [pc, #100]	; 8006ae8 <__ieee754_asinf+0x1bc>
 8006a86:	eddf 3a19 	vldr	s7, [pc, #100]	; 8006aec <__ieee754_asinf+0x1c0>
 8006a8a:	eddf 4a1a 	vldr	s9, [pc, #104]	; 8006af4 <__ieee754_asinf+0x1c8>
 8006a8e:	ed9f 3a18 	vldr	s6, [pc, #96]	; 8006af0 <__ieee754_asinf+0x1c4>
 8006a92:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8006af8 <__ieee754_asinf+0x1cc>
 8006a96:	eddf 6a19 	vldr	s13, [pc, #100]	; 8006afc <__ieee754_asinf+0x1d0>
 8006a9a:	ed9f 5a19 	vldr	s10, [pc, #100]	; 8006b00 <__ieee754_asinf+0x1d4>
 8006a9e:	eddf 5a19 	vldr	s11, [pc, #100]	; 8006b04 <__ieee754_asinf+0x1d8>
 8006aa2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8006b08 <__ieee754_asinf+0x1dc>
 8006aa6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006b0c <__ieee754_asinf+0x1e0>
 8006aaa:	eee7 3aa2 	vfma.f32	s7, s15, s5
 8006aae:	ecbd 8b04 	vpop	{d8-d9}
 8006ab2:	eee7 4aa3 	vfma.f32	s9, s15, s7
 8006ab6:	eea7 4a83 	vfma.f32	s8, s15, s6
 8006aba:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8006abe:	eea7 5a84 	vfma.f32	s10, s15, s8
 8006ac2:	eee7 5aa6 	vfma.f32	s11, s15, s13
 8006ac6:	eea7 6a85 	vfma.f32	s12, s15, s10
 8006aca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad2:	eee7 6a86 	vfma.f32	s13, s15, s12
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006ade:	eea0 0a07 	vfma.f32	s0, s0, s14
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	7149f2ca 	.word	0x7149f2ca
 8006ae8:	3811ef08 	.word	0x3811ef08
 8006aec:	3a4f7f04 	.word	0x3a4f7f04
 8006af0:	3d9dc62e 	.word	0x3d9dc62e
 8006af4:	bd241146 	.word	0xbd241146
 8006af8:	bf303361 	.word	0xbf303361
 8006afc:	3e4e0aa8 	.word	0x3e4e0aa8
 8006b00:	4001572d 	.word	0x4001572d
 8006b04:	bea6b090 	.word	0xbea6b090
 8006b08:	c019d139 	.word	0xc019d139
 8006b0c:	3e2aaaab 	.word	0x3e2aaaab
 8006b10:	3f799999 	.word	0x3f799999
 8006b14:	b33bbd2e 	.word	0xb33bbd2e
 8006b18:	3f490fdb 	.word	0x3f490fdb
 8006b1c:	333bbd2e 	.word	0x333bbd2e
 8006b20:	3fc90fdb 	.word	0x3fc90fdb

08006b24 <__ieee754_atan2f>:
 8006b24:	b510      	push	{r4, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	edcd 0a01 	vstr	s1, [sp, #4]
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b32:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006b36:	eef0 7a40 	vmov.f32	s15, s0
 8006b3a:	dc19      	bgt.n	8006b70 <__ieee754_atan2f+0x4c>
 8006b3c:	ee10 0a10 	vmov	r0, s0
 8006b40:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8006b44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006b48:	dc12      	bgt.n	8006b70 <__ieee754_atan2f+0x4c>
 8006b4a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006b4e:	d049      	beq.n	8006be4 <__ieee754_atan2f+0xc0>
 8006b50:	179c      	asrs	r4, r3, #30
 8006b52:	f004 0402 	and.w	r4, r4, #2
 8006b56:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006b5a:	b979      	cbnz	r1, 8006b7c <__ieee754_atan2f+0x58>
 8006b5c:	2c02      	cmp	r4, #2
 8006b5e:	d03e      	beq.n	8006bde <__ieee754_atan2f+0xba>
 8006b60:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8006c78 <__ieee754_atan2f+0x154>
 8006b64:	2c03      	cmp	r4, #3
 8006b66:	bf18      	it	ne
 8006b68:	eeb0 0a67 	vmovne.f32	s0, s15
 8006b6c:	b002      	add	sp, #8
 8006b6e:	bd10      	pop	{r4, pc}
 8006b70:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006b74:	ee37 0a27 	vadd.f32	s0, s14, s15
 8006b78:	b002      	add	sp, #8
 8006b7a:	bd10      	pop	{r4, pc}
 8006b7c:	b312      	cbz	r2, 8006bc4 <__ieee754_atan2f+0xa0>
 8006b7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006b82:	d034      	beq.n	8006bee <__ieee754_atan2f+0xca>
 8006b84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006b88:	d041      	beq.n	8006c0e <__ieee754_atan2f+0xea>
 8006b8a:	1a8a      	subs	r2, r1, r2
 8006b8c:	15d2      	asrs	r2, r2, #23
 8006b8e:	2a3c      	cmp	r2, #60	; 0x3c
 8006b90:	dc22      	bgt.n	8006bd8 <__ieee754_atan2f+0xb4>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	db54      	blt.n	8006c40 <__ieee754_atan2f+0x11c>
 8006b96:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006b9a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006b9e:	f7ff fc41 	bl	8006424 <fabsf>
 8006ba2:	f000 fe35 	bl	8007810 <atanf>
 8006ba6:	2c01      	cmp	r4, #1
 8006ba8:	d043      	beq.n	8006c32 <__ieee754_atan2f+0x10e>
 8006baa:	2c02      	cmp	r4, #2
 8006bac:	d038      	beq.n	8006c20 <__ieee754_atan2f+0xfc>
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	d0e2      	beq.n	8006b78 <__ieee754_atan2f+0x54>
 8006bb2:	eddf 7a32 	vldr	s15, [pc, #200]	; 8006c7c <__ieee754_atan2f+0x158>
 8006bb6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006c80 <__ieee754_atan2f+0x15c>
 8006bba:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006bbe:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8006bc2:	e7d9      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006bc4:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8006c84 <__ieee754_atan2f+0x160>
 8006bc8:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8006c88 <__ieee754_atan2f+0x164>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	bfb8      	it	lt
 8006bd0:	eeb0 0a67 	vmovlt.f32	s0, s15
 8006bd4:	b002      	add	sp, #8
 8006bd6:	bd10      	pop	{r4, pc}
 8006bd8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8006c88 <__ieee754_atan2f+0x164>
 8006bdc:	e7e3      	b.n	8006ba6 <__ieee754_atan2f+0x82>
 8006bde:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8006c80 <__ieee754_atan2f+0x15c>
 8006be2:	e7c9      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006be4:	b002      	add	sp, #8
 8006be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bea:	f000 be11 	b.w	8007810 <atanf>
 8006bee:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006bf2:	d02a      	beq.n	8006c4a <__ieee754_atan2f+0x126>
 8006bf4:	2c02      	cmp	r4, #2
 8006bf6:	d0f2      	beq.n	8006bde <__ieee754_atan2f+0xba>
 8006bf8:	2c03      	cmp	r4, #3
 8006bfa:	d033      	beq.n	8006c64 <__ieee754_atan2f+0x140>
 8006bfc:	eddf 7a23 	vldr	s15, [pc, #140]	; 8006c8c <__ieee754_atan2f+0x168>
 8006c00:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8006c90 <__ieee754_atan2f+0x16c>
 8006c04:	2c01      	cmp	r4, #1
 8006c06:	bf08      	it	eq
 8006c08:	eeb0 0a67 	vmoveq.f32	s0, s15
 8006c0c:	e7b4      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006c0e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006c88 <__ieee754_atan2f+0x164>
 8006c12:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8006c84 <__ieee754_atan2f+0x160>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	bfa8      	it	ge
 8006c1a:	eeb0 0a67 	vmovge.f32	s0, s15
 8006c1e:	e7ab      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006c20:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006c7c <__ieee754_atan2f+0x158>
 8006c24:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006c80 <__ieee754_atan2f+0x15c>
 8006c28:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006c2c:	ee37 0a67 	vsub.f32	s0, s14, s15
 8006c30:	e7a2      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006c32:	ee10 3a10 	vmov	r3, s0
 8006c36:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	ee00 3a10 	vmov	s0, r3
 8006c3e:	e79b      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006c40:	323c      	adds	r2, #60	; 0x3c
 8006c42:	daa8      	bge.n	8006b96 <__ieee754_atan2f+0x72>
 8006c44:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8006c90 <__ieee754_atan2f+0x16c>
 8006c48:	e7ad      	b.n	8006ba6 <__ieee754_atan2f+0x82>
 8006c4a:	2c02      	cmp	r4, #2
 8006c4c:	d010      	beq.n	8006c70 <__ieee754_atan2f+0x14c>
 8006c4e:	2c03      	cmp	r4, #3
 8006c50:	d00b      	beq.n	8006c6a <__ieee754_atan2f+0x146>
 8006c52:	eddf 7a10 	vldr	s15, [pc, #64]	; 8006c94 <__ieee754_atan2f+0x170>
 8006c56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006c98 <__ieee754_atan2f+0x174>
 8006c5a:	2c01      	cmp	r4, #1
 8006c5c:	bf08      	it	eq
 8006c5e:	eeb0 0a67 	vmoveq.f32	s0, s15
 8006c62:	e789      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006c64:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8006c78 <__ieee754_atan2f+0x154>
 8006c68:	e786      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006c6a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006c9c <__ieee754_atan2f+0x178>
 8006c6e:	e783      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006c70:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8006ca0 <__ieee754_atan2f+0x17c>
 8006c74:	e780      	b.n	8006b78 <__ieee754_atan2f+0x54>
 8006c76:	bf00      	nop
 8006c78:	c0490fdb 	.word	0xc0490fdb
 8006c7c:	33bbbd2e 	.word	0x33bbbd2e
 8006c80:	40490fdb 	.word	0x40490fdb
 8006c84:	bfc90fdb 	.word	0xbfc90fdb
 8006c88:	3fc90fdb 	.word	0x3fc90fdb
 8006c8c:	80000000 	.word	0x80000000
 8006c90:	00000000 	.word	0x00000000
 8006c94:	bf490fdb 	.word	0xbf490fdb
 8006c98:	3f490fdb 	.word	0x3f490fdb
 8006c9c:	c016cbe4 	.word	0xc016cbe4
 8006ca0:	4016cbe4 	.word	0x4016cbe4

08006ca4 <__ieee754_rem_pio2f>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	ee10 3a10 	vmov	r3, s0
 8006caa:	4a94      	ldr	r2, [pc, #592]	; (8006efc <__ieee754_rem_pio2f+0x258>)
 8006cac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006cb0:	4294      	cmp	r4, r2
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	dd68      	ble.n	8006d8a <__ieee754_rem_pio2f+0xe6>
 8006cb8:	4a91      	ldr	r2, [pc, #580]	; (8006f00 <__ieee754_rem_pio2f+0x25c>)
 8006cba:	4294      	cmp	r4, r2
 8006cbc:	ee10 6a10 	vmov	r6, s0
 8006cc0:	dc1a      	bgt.n	8006cf8 <__ieee754_rem_pio2f+0x54>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8006f04 <__ieee754_rem_pio2f+0x260>
 8006cc8:	4a8f      	ldr	r2, [pc, #572]	; (8006f08 <__ieee754_rem_pio2f+0x264>)
 8006cca:	f024 040f 	bic.w	r4, r4, #15
 8006cce:	f340 80dd 	ble.w	8006e8c <__ieee754_rem_pio2f+0x1e8>
 8006cd2:	4294      	cmp	r4, r2
 8006cd4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006cd8:	d066      	beq.n	8006da8 <__ieee754_rem_pio2f+0x104>
 8006cda:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006f0c <__ieee754_rem_pio2f+0x268>
 8006cde:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ce8:	edc5 6a00 	vstr	s13, [r5]
 8006cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cf0:	edc5 7a01 	vstr	s15, [r5, #4]
 8006cf4:	b006      	add	sp, #24
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	4a85      	ldr	r2, [pc, #532]	; (8006f10 <__ieee754_rem_pio2f+0x26c>)
 8006cfa:	4294      	cmp	r4, r2
 8006cfc:	dd66      	ble.n	8006dcc <__ieee754_rem_pio2f+0x128>
 8006cfe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006d02:	da49      	bge.n	8006d98 <__ieee754_rem_pio2f+0xf4>
 8006d04:	15e2      	asrs	r2, r4, #23
 8006d06:	3a86      	subs	r2, #134	; 0x86
 8006d08:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8006d0c:	ee07 3a90 	vmov	s15, r3
 8006d10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d14:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8006f14 <__ieee754_rem_pio2f+0x270>
 8006d18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d20:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006d24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d28:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006d30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d34:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006d38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d44:	edcd 7a05 	vstr	s15, [sp, #20]
 8006d48:	f040 80b3 	bne.w	8006eb2 <__ieee754_rem_pio2f+0x20e>
 8006d4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d54:	bf0c      	ite	eq
 8006d56:	2301      	moveq	r3, #1
 8006d58:	2302      	movne	r3, #2
 8006d5a:	496f      	ldr	r1, [pc, #444]	; (8006f18 <__ieee754_rem_pio2f+0x274>)
 8006d5c:	9101      	str	r1, [sp, #4]
 8006d5e:	2102      	movs	r1, #2
 8006d60:	9100      	str	r1, [sp, #0]
 8006d62:	a803      	add	r0, sp, #12
 8006d64:	4629      	mov	r1, r5
 8006d66:	f000 f9b7 	bl	80070d8 <__kernel_rem_pio2f>
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	da12      	bge.n	8006d94 <__ieee754_rem_pio2f+0xf0>
 8006d6e:	ed95 7a00 	vldr	s14, [r5]
 8006d72:	edd5 7a01 	vldr	s15, [r5, #4]
 8006d76:	eeb1 7a47 	vneg.f32	s14, s14
 8006d7a:	eef1 7a67 	vneg.f32	s15, s15
 8006d7e:	4240      	negs	r0, r0
 8006d80:	ed85 7a00 	vstr	s14, [r5]
 8006d84:	edc5 7a01 	vstr	s15, [r5, #4]
 8006d88:	e004      	b.n	8006d94 <__ieee754_rem_pio2f+0xf0>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	ed85 0a00 	vstr	s0, [r5]
 8006d90:	6042      	str	r2, [r0, #4]
 8006d92:	2000      	movs	r0, #0
 8006d94:	b006      	add	sp, #24
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	edc5 7a01 	vstr	s15, [r5, #4]
 8006da2:	edc5 7a00 	vstr	s15, [r5]
 8006da6:	e7f5      	b.n	8006d94 <__ieee754_rem_pio2f+0xf0>
 8006da8:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8006f1c <__ieee754_rem_pio2f+0x278>
 8006dac:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006f20 <__ieee754_rem_pio2f+0x27c>
 8006db0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006db4:	2001      	movs	r0, #1
 8006db6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006dba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dbe:	edc5 6a00 	vstr	s13, [r5]
 8006dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006dc6:	edc5 7a01 	vstr	s15, [r5, #4]
 8006dca:	e7e3      	b.n	8006d94 <__ieee754_rem_pio2f+0xf0>
 8006dcc:	f7ff fb2a 	bl	8006424 <fabsf>
 8006dd0:	eddf 6a54 	vldr	s13, [pc, #336]	; 8006f24 <__ieee754_rem_pio2f+0x280>
 8006dd4:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8006f04 <__ieee754_rem_pio2f+0x260>
 8006dd8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8006f0c <__ieee754_rem_pio2f+0x268>
 8006ddc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006de0:	eea0 7a26 	vfma.f32	s14, s0, s13
 8006de4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8006de8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006dec:	ee17 0a10 	vmov	r0, s14
 8006df0:	eeb1 6a66 	vneg.f32	s12, s13
 8006df4:	281f      	cmp	r0, #31
 8006df6:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dfe:	dc1d      	bgt.n	8006e3c <__ieee754_rem_pio2f+0x198>
 8006e00:	4a49      	ldr	r2, [pc, #292]	; (8006f28 <__ieee754_rem_pio2f+0x284>)
 8006e02:	1e41      	subs	r1, r0, #1
 8006e04:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8006e08:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d015      	beq.n	8006e3c <__ieee754_rem_pio2f+0x198>
 8006e10:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006e14:	ed85 7a00 	vstr	s14, [r5]
 8006e18:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006e22:	ed85 0a01 	vstr	s0, [r5, #4]
 8006e26:	dab5      	bge.n	8006d94 <__ieee754_rem_pio2f+0xf0>
 8006e28:	eeb1 7a47 	vneg.f32	s14, s14
 8006e2c:	eeb1 0a40 	vneg.f32	s0, s0
 8006e30:	ed85 7a00 	vstr	s14, [r5]
 8006e34:	ed85 0a01 	vstr	s0, [r5, #4]
 8006e38:	4240      	negs	r0, r0
 8006e3a:	e7ab      	b.n	8006d94 <__ieee754_rem_pio2f+0xf0>
 8006e3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006e40:	15e4      	asrs	r4, r4, #23
 8006e42:	ee17 3a10 	vmov	r3, s14
 8006e46:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006e4a:	1ae3      	subs	r3, r4, r3
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	dde1      	ble.n	8006e14 <__ieee754_rem_pio2f+0x170>
 8006e50:	eddf 7a32 	vldr	s15, [pc, #200]	; 8006f1c <__ieee754_rem_pio2f+0x278>
 8006e54:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006f20 <__ieee754_rem_pio2f+0x27c>
 8006e58:	eef0 5a40 	vmov.f32	s11, s0
 8006e5c:	eee6 5a27 	vfma.f32	s11, s12, s15
 8006e60:	ee30 0a65 	vsub.f32	s0, s0, s11
 8006e64:	eea6 0a27 	vfma.f32	s0, s12, s15
 8006e68:	eef0 7a40 	vmov.f32	s15, s0
 8006e6c:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8006e70:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8006e74:	ee17 3a10 	vmov	r3, s14
 8006e78:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006e7c:	1ae4      	subs	r4, r4, r3
 8006e7e:	2c19      	cmp	r4, #25
 8006e80:	dc2c      	bgt.n	8006edc <__ieee754_rem_pio2f+0x238>
 8006e82:	ed85 7a00 	vstr	s14, [r5]
 8006e86:	eeb0 0a65 	vmov.f32	s0, s11
 8006e8a:	e7c5      	b.n	8006e18 <__ieee754_rem_pio2f+0x174>
 8006e8c:	4294      	cmp	r4, r2
 8006e8e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006e92:	d010      	beq.n	8006eb6 <__ieee754_rem_pio2f+0x212>
 8006e94:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006f0c <__ieee754_rem_pio2f+0x268>
 8006e98:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ea4:	edc5 6a00 	vstr	s13, [r5]
 8006ea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eac:	edc5 7a01 	vstr	s15, [r5, #4]
 8006eb0:	e770      	b.n	8006d94 <__ieee754_rem_pio2f+0xf0>
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e751      	b.n	8006d5a <__ieee754_rem_pio2f+0xb6>
 8006eb6:	eddf 6a19 	vldr	s13, [pc, #100]	; 8006f1c <__ieee754_rem_pio2f+0x278>
 8006eba:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006f20 <__ieee754_rem_pio2f+0x27c>
 8006ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ec6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006eca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ece:	edc5 6a00 	vstr	s13, [r5]
 8006ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ed6:	edc5 7a01 	vstr	s15, [r5, #4]
 8006eda:	e75b      	b.n	8006d94 <__ieee754_rem_pio2f+0xf0>
 8006edc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006f2c <__ieee754_rem_pio2f+0x288>
 8006ee0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8006f30 <__ieee754_rem_pio2f+0x28c>
 8006ee4:	eeb0 0a65 	vmov.f32	s0, s11
 8006ee8:	eea6 0a07 	vfma.f32	s0, s12, s14
 8006eec:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8006ef0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006ef4:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8006ef8:	e78a      	b.n	8006e10 <__ieee754_rem_pio2f+0x16c>
 8006efa:	bf00      	nop
 8006efc:	3f490fd8 	.word	0x3f490fd8
 8006f00:	4016cbe3 	.word	0x4016cbe3
 8006f04:	3fc90f80 	.word	0x3fc90f80
 8006f08:	3fc90fd0 	.word	0x3fc90fd0
 8006f0c:	37354443 	.word	0x37354443
 8006f10:	43490f80 	.word	0x43490f80
 8006f14:	43800000 	.word	0x43800000
 8006f18:	0800b4c0 	.word	0x0800b4c0
 8006f1c:	37354400 	.word	0x37354400
 8006f20:	2e85a308 	.word	0x2e85a308
 8006f24:	3f22f984 	.word	0x3f22f984
 8006f28:	0800b440 	.word	0x0800b440
 8006f2c:	2e85a300 	.word	0x2e85a300
 8006f30:	248d3132 	.word	0x248d3132

08006f34 <__ieee754_sqrtf>:
 8006f34:	ee10 3a10 	vmov	r3, s0
 8006f38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f3c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006f40:	d231      	bcs.n	8006fa6 <__ieee754_sqrtf+0x72>
 8006f42:	b37a      	cbz	r2, 8006fa4 <__ieee754_sqrtf+0x70>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	db3d      	blt.n	8006fc4 <__ieee754_sqrtf+0x90>
 8006f48:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006f4c:	b470      	push	{r4, r5, r6}
 8006f4e:	ea4f 50e3 	mov.w	r0, r3, asr #23
 8006f52:	d32b      	bcc.n	8006fac <__ieee754_sqrtf+0x78>
 8006f54:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
 8006f58:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f5c:	07d1      	lsls	r1, r2, #31
 8006f5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f62:	bf48      	it	mi
 8006f64:	005b      	lslmi	r3, r3, #1
 8006f66:	2400      	movs	r4, #0
 8006f68:	1056      	asrs	r6, r2, #1
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	4625      	mov	r5, r4
 8006f6e:	2119      	movs	r1, #25
 8006f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f74:	18a8      	adds	r0, r5, r2
 8006f76:	4298      	cmp	r0, r3
 8006f78:	dc02      	bgt.n	8006f80 <__ieee754_sqrtf+0x4c>
 8006f7a:	1a1b      	subs	r3, r3, r0
 8006f7c:	1885      	adds	r5, r0, r2
 8006f7e:	4414      	add	r4, r2
 8006f80:	3901      	subs	r1, #1
 8006f82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f86:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006f8a:	d1f3      	bne.n	8006f74 <__ieee754_sqrtf+0x40>
 8006f8c:	b113      	cbz	r3, 8006f94 <__ieee754_sqrtf+0x60>
 8006f8e:	3401      	adds	r4, #1
 8006f90:	f024 0401 	bic.w	r4, r4, #1
 8006f94:	1064      	asrs	r4, r4, #1
 8006f96:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006f9a:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 8006f9e:	bc70      	pop	{r4, r5, r6}
 8006fa0:	ee00 3a10 	vmov	s0, r3
 8006fa4:	4770      	bx	lr
 8006fa6:	eea0 0a00 	vfma.f32	s0, s0, s0
 8006faa:	4770      	bx	lr
 8006fac:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 8006fb0:	d001      	beq.n	8006fb6 <__ieee754_sqrtf+0x82>
 8006fb2:	e00c      	b.n	8006fce <__ieee754_sqrtf+0x9a>
 8006fb4:	460a      	mov	r2, r1
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	021c      	lsls	r4, r3, #8
 8006fba:	f102 0101 	add.w	r1, r2, #1
 8006fbe:	d5f9      	bpl.n	8006fb4 <__ieee754_sqrtf+0x80>
 8006fc0:	1a80      	subs	r0, r0, r2
 8006fc2:	e7c7      	b.n	8006f54 <__ieee754_sqrtf+0x20>
 8006fc4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006fc8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006fcc:	4770      	bx	lr
 8006fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fd2:	e7f5      	b.n	8006fc0 <__ieee754_sqrtf+0x8c>

08006fd4 <__kernel_cosf>:
 8006fd4:	ee10 3a10 	vmov	r3, s0
 8006fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fdc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006fe0:	da2c      	bge.n	800703c <__kernel_cosf+0x68>
 8006fe2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006fe6:	ee17 3a90 	vmov	r3, s15
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d060      	beq.n	80070b0 <__kernel_cosf+0xdc>
 8006fee:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006ff2:	eddf 4a31 	vldr	s9, [pc, #196]	; 80070b8 <__kernel_cosf+0xe4>
 8006ff6:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80070bc <__kernel_cosf+0xe8>
 8006ffa:	eddf 5a31 	vldr	s11, [pc, #196]	; 80070c0 <__kernel_cosf+0xec>
 8006ffe:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80070c4 <__kernel_cosf+0xf0>
 8007002:	eddf 7a31 	vldr	s15, [pc, #196]	; 80070c8 <__kernel_cosf+0xf4>
 8007006:	eddf 6a31 	vldr	s13, [pc, #196]	; 80070cc <__kernel_cosf+0xf8>
 800700a:	eea7 5a24 	vfma.f32	s10, s14, s9
 800700e:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007012:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007016:	eee7 7a06 	vfma.f32	s15, s14, s12
 800701a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800701e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007022:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007026:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800702a:	eee7 0a26 	vfma.f32	s1, s14, s13
 800702e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007032:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8007036:	ee37 0ae0 	vsub.f32	s0, s15, s1
 800703a:	4770      	bx	lr
 800703c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007040:	eddf 4a1d 	vldr	s9, [pc, #116]	; 80070b8 <__kernel_cosf+0xe4>
 8007044:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80070bc <__kernel_cosf+0xe8>
 8007048:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80070c0 <__kernel_cosf+0xec>
 800704c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80070c4 <__kernel_cosf+0xf0>
 8007050:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80070c8 <__kernel_cosf+0xf4>
 8007054:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80070cc <__kernel_cosf+0xf8>
 8007058:	4a1d      	ldr	r2, [pc, #116]	; (80070d0 <__kernel_cosf+0xfc>)
 800705a:	eea7 5a24 	vfma.f32	s10, s14, s9
 800705e:	4293      	cmp	r3, r2
 8007060:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007064:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007068:	eee7 7a06 	vfma.f32	s15, s14, s12
 800706c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007070:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007074:	ddd5      	ble.n	8007022 <__kernel_cosf+0x4e>
 8007076:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <__kernel_cosf+0x100>)
 8007078:	4293      	cmp	r3, r2
 800707a:	dc14      	bgt.n	80070a6 <__kernel_cosf+0xd2>
 800707c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007088:	ee36 6a67 	vsub.f32	s12, s12, s15
 800708c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007090:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8007094:	eee7 0a26 	vfma.f32	s1, s14, s13
 8007098:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800709c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80070a0:	ee36 0a67 	vsub.f32	s0, s12, s15
 80070a4:	4770      	bx	lr
 80070a6:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 80070aa:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 80070ae:	e7ed      	b.n	800708c <__kernel_cosf+0xb8>
 80070b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	ad47d74e 	.word	0xad47d74e
 80070bc:	310f74f6 	.word	0x310f74f6
 80070c0:	b493f27c 	.word	0xb493f27c
 80070c4:	37d00d01 	.word	0x37d00d01
 80070c8:	bab60b61 	.word	0xbab60b61
 80070cc:	3d2aaaab 	.word	0x3d2aaaab
 80070d0:	3e999999 	.word	0x3e999999
 80070d4:	3f480000 	.word	0x3f480000

080070d8 <__kernel_rem_pio2f>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	ed2d 8b04 	vpush	{d8-d9}
 80070e0:	b0d9      	sub	sp, #356	; 0x164
 80070e2:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	1ed3      	subs	r3, r2, #3
 80070ea:	bf48      	it	mi
 80070ec:	1d13      	addmi	r3, r2, #4
 80070ee:	4cd4      	ldr	r4, [pc, #848]	; (8007440 <__kernel_rem_pio2f+0x368>)
 80070f0:	9d66      	ldr	r5, [sp, #408]	; 0x198
 80070f2:	9102      	str	r1, [sp, #8]
 80070f4:	10db      	asrs	r3, r3, #3
 80070f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070fa:	4619      	mov	r1, r3
 80070fc:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8007100:	9306      	str	r3, [sp, #24]
 8007102:	3301      	adds	r3, #1
 8007104:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	eba1 030a 	sub.w	r3, r1, sl
 800710e:	eb16 010a 	adds.w	r1, r6, sl
 8007112:	4681      	mov	r9, r0
 8007114:	d416      	bmi.n	8007144 <__kernel_rem_pio2f+0x6c>
 8007116:	4419      	add	r1, r3
 8007118:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8007444 <__kernel_rem_pio2f+0x36c>
 800711c:	9867      	ldr	r0, [sp, #412]	; 0x19c
 800711e:	3101      	adds	r1, #1
 8007120:	aa1c      	add	r2, sp, #112	; 0x70
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfa4      	itt	ge
 8007126:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 800712a:	ee07 4a90 	vmovge	s15, r4
 800712e:	f103 0301 	add.w	r3, r3, #1
 8007132:	bfac      	ite	ge
 8007134:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8007138:	eef0 7a47 	vmovlt.f32	s15, s14
 800713c:	428b      	cmp	r3, r1
 800713e:	ece2 7a01 	vstmia	r2!, {s15}
 8007142:	d1ee      	bne.n	8007122 <__kernel_rem_pio2f+0x4a>
 8007144:	2e00      	cmp	r6, #0
 8007146:	f2c0 8307 	blt.w	8007758 <__kernel_rem_pio2f+0x680>
 800714a:	9b04      	ldr	r3, [sp, #16]
 800714c:	ad44      	add	r5, sp, #272	; 0x110
 800714e:	009c      	lsls	r4, r3, #2
 8007150:	1c77      	adds	r7, r6, #1
 8007152:	ab1c      	add	r3, sp, #112	; 0x70
 8007154:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8007158:	1918      	adds	r0, r3, r4
 800715a:	eb09 0104 	add.w	r1, r9, r4
 800715e:	f1ba 0f00 	cmp.w	sl, #0
 8007162:	f2c0 8275 	blt.w	8007650 <__kernel_rem_pio2f+0x578>
 8007166:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8007444 <__kernel_rem_pio2f+0x36c>
 800716a:	464b      	mov	r3, r9
 800716c:	4602      	mov	r2, r0
 800716e:	ecf3 6a01 	vldmia	r3!, {s13}
 8007172:	ed32 7a01 	vldmdb	r2!, {s14}
 8007176:	428b      	cmp	r3, r1
 8007178:	eee6 7a87 	vfma.f32	s15, s13, s14
 800717c:	d1f7      	bne.n	800716e <__kernel_rem_pio2f+0x96>
 800717e:	ece5 7a01 	vstmia	r5!, {s15}
 8007182:	42bd      	cmp	r5, r7
 8007184:	f100 0004 	add.w	r0, r0, #4
 8007188:	d1e9      	bne.n	800715e <__kernel_rem_pio2f+0x86>
 800718a:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 800718e:	3b01      	subs	r3, #1
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	ad08      	add	r5, sp, #32
 8007194:	1f1a      	subs	r2, r3, #4
 8007196:	18aa      	adds	r2, r5, r2
 8007198:	46b3      	mov	fp, r6
 800719a:	9603      	str	r6, [sp, #12]
 800719c:	eddf 8aab 	vldr	s17, [pc, #684]	; 800744c <__kernel_rem_pio2f+0x374>
 80071a0:	ed9f 8aa9 	vldr	s16, [pc, #676]	; 8007448 <__kernel_rem_pio2f+0x370>
 80071a4:	9e01      	ldr	r6, [sp, #4]
 80071a6:	9207      	str	r2, [sp, #28]
 80071a8:	444c      	add	r4, r9
 80071aa:	eb05 0803 	add.w	r8, r5, r3
 80071ae:	af44      	add	r7, sp, #272	; 0x110
 80071b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80071b4:	aa58      	add	r2, sp, #352	; 0x160
 80071b6:	441a      	add	r2, r3
 80071b8:	f1bb 0f00 	cmp.w	fp, #0
 80071bc:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 80071c0:	dd18      	ble.n	80071f4 <__kernel_rem_pio2f+0x11c>
 80071c2:	a907      	add	r1, sp, #28
 80071c4:	eb07 028b 	add.w	r2, r7, fp, lsl #2
 80071c8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80071cc:	eeb0 7a40 	vmov.f32	s14, s0
 80071d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071d4:	ed72 6a01 	vldmdb	r2!, {s13}
 80071d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071dc:	42ba      	cmp	r2, r7
 80071de:	eea7 7ac8 	vfms.f32	s14, s15, s16
 80071e2:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80071e6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80071ea:	ee17 0a10 	vmov	r0, s14
 80071ee:	f841 0f04 	str.w	r0, [r1, #4]!
 80071f2:	d1e9      	bne.n	80071c8 <__kernel_rem_pio2f+0xf0>
 80071f4:	4630      	mov	r0, r6
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	f000 fc2a 	bl	8007a50 <scalbnf>
 80071fc:	eeb0 9a40 	vmov.f32	s18, s0
 8007200:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007204:	ee29 0a00 	vmul.f32	s0, s18, s0
 8007208:	f000 fbda 	bl	80079c0 <floorf>
 800720c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007210:	eea0 9a67 	vfms.f32	s18, s0, s15
 8007214:	2e00      	cmp	r6, #0
 8007216:	9b05      	ldr	r3, [sp, #20]
 8007218:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 800721c:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8007220:	ee39 9a67 	vsub.f32	s18, s18, s15
 8007224:	f340 80c9 	ble.w	80073ba <__kernel_rem_pio2f+0x2e2>
 8007228:	f10b 3eff 	add.w	lr, fp, #4294967295	; 0xffffffff
 800722c:	f1c6 0208 	rsb	r2, r6, #8
 8007230:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
 8007234:	fa41 f002 	asr.w	r0, r1, r2
 8007238:	fa00 f202 	lsl.w	r2, r0, r2
 800723c:	1a89      	subs	r1, r1, r2
 800723e:	f845 102e 	str.w	r1, [r5, lr, lsl #2]
 8007242:	ee19 ea90 	vmov	lr, s19
 8007246:	4486      	add	lr, r0
 8007248:	f1c6 0207 	rsb	r2, r6, #7
 800724c:	ee09 ea90 	vmov	s19, lr
 8007250:	4111      	asrs	r1, r2
 8007252:	2900      	cmp	r1, #0
 8007254:	dd51      	ble.n	80072fa <__kernel_rem_pio2f+0x222>
 8007256:	ee19 2a90 	vmov	r2, s19
 800725a:	f1bb 0f00 	cmp.w	fp, #0
 800725e:	f102 0201 	add.w	r2, r2, #1
 8007262:	ee09 2a90 	vmov	s19, r2
 8007266:	f340 8212 	ble.w	800768e <__kernel_rem_pio2f+0x5b6>
 800726a:	682a      	ldr	r2, [r5, #0]
 800726c:	2a00      	cmp	r2, #0
 800726e:	f040 8269 	bne.w	8007744 <__kernel_rem_pio2f+0x66c>
 8007272:	f1bb 0f01 	cmp.w	fp, #1
 8007276:	f340 8229 	ble.w	80076cc <__kernel_rem_pio2f+0x5f4>
 800727a:	46ae      	mov	lr, r5
 800727c:	2001      	movs	r0, #1
 800727e:	f85e 2f04 	ldr.w	r2, [lr, #4]!
 8007282:	2a00      	cmp	r2, #0
 8007284:	f000 821e 	beq.w	80076c4 <__kernel_rem_pio2f+0x5ec>
 8007288:	f100 0e01 	add.w	lr, r0, #1
 800728c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007290:	45f3      	cmp	fp, lr
 8007292:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
 8007296:	dd12      	ble.n	80072be <__kernel_rem_pio2f+0x1e6>
 8007298:	f855 202e 	ldr.w	r2, [r5, lr, lsl #2]
 800729c:	3002      	adds	r0, #2
 800729e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80072a2:	4583      	cmp	fp, r0
 80072a4:	f845 202e 	str.w	r2, [r5, lr, lsl #2]
 80072a8:	dd09      	ble.n	80072be <__kernel_rem_pio2f+0x1e6>
 80072aa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80072ae:	18ea      	adds	r2, r5, r3
 80072b0:	6803      	ldr	r3, [r0, #0]
 80072b2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80072b6:	f840 3b04 	str.w	r3, [r0], #4
 80072ba:	4290      	cmp	r0, r2
 80072bc:	d1f8      	bne.n	80072b0 <__kernel_rem_pio2f+0x1d8>
 80072be:	2e00      	cmp	r6, #0
 80072c0:	dd0d      	ble.n	80072de <__kernel_rem_pio2f+0x206>
 80072c2:	2e01      	cmp	r6, #1
 80072c4:	f04f 0201 	mov.w	r2, #1
 80072c8:	f040 81e7 	bne.w	800769a <__kernel_rem_pio2f+0x5c2>
 80072cc:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
 80072d0:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 80072d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d8:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
 80072dc:	e1e7      	b.n	80076ae <__kernel_rem_pio2f+0x5d6>
 80072de:	2902      	cmp	r1, #2
 80072e0:	d10b      	bne.n	80072fa <__kernel_rem_pio2f+0x222>
 80072e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072e6:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80072ea:	4630      	mov	r0, r6
 80072ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072f0:	f000 fbae 	bl	8007a50 <scalbnf>
 80072f4:	ee39 9a40 	vsub.f32	s18, s18, s0
 80072f8:	2102      	movs	r1, #2
 80072fa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80072fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007302:	d170      	bne.n	80073e6 <__kernel_rem_pio2f+0x30e>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	f10b 3eff 	add.w	lr, fp, #4294967295	; 0xffffffff
 800730a:	4573      	cmp	r3, lr
 800730c:	dc0e      	bgt.n	800732c <__kernel_rem_pio2f+0x254>
 800730e:	f10b 4280 	add.w	r2, fp, #1073741824	; 0x40000000
 8007312:	3a01      	subs	r2, #1
 8007314:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8007318:	2000      	movs	r0, #0
 800731a:	f852 3904 	ldr.w	r3, [r2], #-4
 800731e:	4542      	cmp	r2, r8
 8007320:	ea40 0003 	orr.w	r0, r0, r3
 8007324:	d1f9      	bne.n	800731a <__kernel_rem_pio2f+0x242>
 8007326:	2800      	cmp	r0, #0
 8007328:	f040 8094 	bne.w	8007454 <__kernel_rem_pio2f+0x37c>
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	3b01      	subs	r3, #1
 8007330:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 81d3 	bne.w	80076e0 <__kernel_rem_pio2f+0x608>
 800733a:	9b07      	ldr	r3, [sp, #28]
 800733c:	f04f 0c01 	mov.w	ip, #1
 8007340:	f853 2904 	ldr.w	r2, [r3], #-4
 8007344:	f10c 0c01 	add.w	ip, ip, #1
 8007348:	2a00      	cmp	r2, #0
 800734a:	d0f9      	beq.n	8007340 <__kernel_rem_pio2f+0x268>
 800734c:	44dc      	add	ip, fp
 800734e:	f10b 0e01 	add.w	lr, fp, #1
 8007352:	45e6      	cmp	lr, ip
 8007354:	dc2f      	bgt.n	80073b6 <__kernel_rem_pio2f+0x2de>
 8007356:	9a06      	ldr	r2, [sp, #24]
 8007358:	9b04      	ldr	r3, [sp, #16]
 800735a:	eb0e 0102 	add.w	r1, lr, r2
 800735e:	eb03 000b 	add.w	r0, r3, fp
 8007362:	eb0c 0302 	add.w	r3, ip, r2
 8007366:	aa1c      	add	r2, sp, #112	; 0x70
 8007368:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800736c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8007370:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8007372:	3901      	subs	r1, #1
 8007374:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007378:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
 800737c:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
 8007380:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800738c:	f1ba 0f00 	cmp.w	sl, #0
 8007390:	ece0 7a01 	vstmia	r0!, {s15}
 8007394:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007444 <__kernel_rem_pio2f+0x36c>
 8007398:	db09      	blt.n	80073ae <__kernel_rem_pio2f+0x2d6>
 800739a:	464b      	mov	r3, r9
 800739c:	4602      	mov	r2, r0
 800739e:	ecf3 6a01 	vldmia	r3!, {s13}
 80073a2:	ed32 7a01 	vldmdb	r2!, {s14}
 80073a6:	42a3      	cmp	r3, r4
 80073a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80073ac:	d1f7      	bne.n	800739e <__kernel_rem_pio2f+0x2c6>
 80073ae:	4559      	cmp	r1, fp
 80073b0:	ecee 7a01 	vstmia	lr!, {s15}
 80073b4:	d1e4      	bne.n	8007380 <__kernel_rem_pio2f+0x2a8>
 80073b6:	46e3      	mov	fp, ip
 80073b8:	e6fa      	b.n	80071b0 <__kernel_rem_pio2f+0xd8>
 80073ba:	d105      	bne.n	80073c8 <__kernel_rem_pio2f+0x2f0>
 80073bc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80073c0:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80073c4:	1209      	asrs	r1, r1, #8
 80073c6:	e744      	b.n	8007252 <__kernel_rem_pio2f+0x17a>
 80073c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80073cc:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80073d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d4:	f280 8146 	bge.w	8007664 <__kernel_rem_pio2f+0x58c>
 80073d8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80073dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e0:	f04f 0100 	mov.w	r1, #0
 80073e4:	d08e      	beq.n	8007304 <__kernel_rem_pio2f+0x22c>
 80073e6:	9c01      	ldr	r4, [sp, #4]
 80073e8:	9e03      	ldr	r6, [sp, #12]
 80073ea:	eeb0 0a49 	vmov.f32	s0, s18
 80073ee:	4260      	negs	r0, r4
 80073f0:	4688      	mov	r8, r1
 80073f2:	f000 fb2d 	bl	8007a50 <scalbnf>
 80073f6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007448 <__kernel_rem_pio2f+0x370>
 80073fa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80073fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007402:	f2c0 8185 	blt.w	8007710 <__kernel_rem_pio2f+0x638>
 8007406:	eddf 7a11 	vldr	s15, [pc, #68]	; 800744c <__kernel_rem_pio2f+0x374>
 800740a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800740e:	4623      	mov	r3, r4
 8007410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007414:	3308      	adds	r3, #8
 8007416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007420:	f10b 0301 	add.w	r3, fp, #1
 8007424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007428:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800742c:	ee10 2a10 	vmov	r2, s0
 8007430:	f845 202b 	str.w	r2, [r5, fp, lsl #2]
 8007434:	ee17 2a90 	vmov	r2, s15
 8007438:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 800743c:	e01f      	b.n	800747e <__kernel_rem_pio2f+0x3a6>
 800743e:	bf00      	nop
 8007440:	0800b804 	.word	0x0800b804
 8007444:	00000000 	.word	0x00000000
 8007448:	43800000 	.word	0x43800000
 800744c:	3b800000 	.word	0x3b800000
 8007450:	3fc90000 	.word	0x3fc90000
 8007454:	4688      	mov	r8, r1
 8007456:	9901      	ldr	r1, [sp, #4]
 8007458:	f855 202e 	ldr.w	r2, [r5, lr, lsl #2]
 800745c:	9e03      	ldr	r6, [sp, #12]
 800745e:	3908      	subs	r1, #8
 8007460:	4673      	mov	r3, lr
 8007462:	9101      	str	r1, [sp, #4]
 8007464:	b95a      	cbnz	r2, 800747e <__kernel_rem_pio2f+0x3a6>
 8007466:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
 800746a:	3a01      	subs	r2, #1
 800746c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8007470:	f852 0904 	ldr.w	r0, [r2], #-4
 8007474:	3b01      	subs	r3, #1
 8007476:	3908      	subs	r1, #8
 8007478:	2800      	cmp	r0, #0
 800747a:	d0f9      	beq.n	8007470 <__kernel_rem_pio2f+0x398>
 800747c:	9101      	str	r1, [sp, #4]
 800747e:	9801      	ldr	r0, [sp, #4]
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007486:	f000 fae3 	bl	8007a50 <scalbnf>
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f2c0 814a 	blt.w	8007726 <__kernel_rem_pio2f+0x64e>
 8007492:	009f      	lsls	r7, r3, #2
 8007494:	aa44      	add	r2, sp, #272	; 0x110
 8007496:	19d0      	adds	r0, r2, r7
 8007498:	f107 0e04 	add.w	lr, r7, #4
 800749c:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800744c <__kernel_rem_pio2f+0x374>
 80074a0:	eb05 020e 	add.w	r2, r5, lr
 80074a4:	1d01      	adds	r1, r0, #4
 80074a6:	ed72 7a01 	vldmdb	r2!, {s15}
 80074aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ae:	42aa      	cmp	r2, r5
 80074b0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80074b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80074b8:	ed61 7a01 	vstmdb	r1!, {s15}
 80074bc:	d1f3      	bne.n	80074a6 <__kernel_rem_pio2f+0x3ce>
 80074be:	ed1f 6a1c 	vldr	s12, [pc, #-112]	; 8007450 <__kernel_rem_pio2f+0x378>
 80074c2:	4605      	mov	r5, r0
 80074c4:	f50d 7c86 	add.w	ip, sp, #268	; 0x10c
 80074c8:	2400      	movs	r4, #0
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	f2c0 80dc 	blt.w	8007688 <__kernel_rem_pio2f+0x5b0>
 80074d0:	48a3      	ldr	r0, [pc, #652]	; (8007760 <__kernel_rem_pio2f+0x688>)
 80074d2:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8007764 <__kernel_rem_pio2f+0x68c>
 80074d6:	4629      	mov	r1, r5
 80074d8:	eeb0 7a46 	vmov.f32	s14, s12
 80074dc:	2200      	movs	r2, #0
 80074de:	e003      	b.n	80074e8 <__kernel_rem_pio2f+0x410>
 80074e0:	42a2      	cmp	r2, r4
 80074e2:	dc08      	bgt.n	80074f6 <__kernel_rem_pio2f+0x41e>
 80074e4:	ecb0 7a01 	vldmia	r0!, {s14}
 80074e8:	ecf1 6a01 	vldmia	r1!, {s13}
 80074ec:	3201      	adds	r2, #1
 80074ee:	4296      	cmp	r6, r2
 80074f0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80074f4:	daf4      	bge.n	80074e0 <__kernel_rem_pio2f+0x408>
 80074f6:	3d04      	subs	r5, #4
 80074f8:	aa58      	add	r2, sp, #352	; 0x160
 80074fa:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80074fe:	4565      	cmp	r5, ip
 8007500:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8007504:	f104 0401 	add.w	r4, r4, #1
 8007508:	d1df      	bne.n	80074ca <__kernel_rem_pio2f+0x3f2>
 800750a:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800750c:	2a03      	cmp	r2, #3
 800750e:	d85a      	bhi.n	80075c6 <__kernel_rem_pio2f+0x4ee>
 8007510:	e8df f002 	tbb	[pc, r2]
 8007514:	0262628c 	.word	0x0262628c
 8007518:	2b00      	cmp	r3, #0
 800751a:	f340 8101 	ble.w	8007720 <__kernel_rem_pio2f+0x648>
 800751e:	aa58      	add	r2, sp, #352	; 0x160
 8007520:	443a      	add	r2, r7
 8007522:	a930      	add	r1, sp, #192	; 0xc0
 8007524:	ed12 7a28 	vldr	s14, [r2, #-160]	; 0xffffff60
 8007528:	1d3a      	adds	r2, r7, #4
 800752a:	440a      	add	r2, r1
 800752c:	a831      	add	r0, sp, #196	; 0xc4
 800752e:	4439      	add	r1, r7
 8007530:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007534:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007538:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800753c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007540:	eeb0 7a66 	vmov.f32	s14, s13
 8007544:	ed62 7a01 	vstmdb	r2!, {s15}
 8007548:	4282      	cmp	r2, r0
 800754a:	ed61 6a01 	vstmdb	r1!, {s13}
 800754e:	d1ef      	bne.n	8007530 <__kernel_rem_pio2f+0x458>
 8007550:	2b01      	cmp	r3, #1
 8007552:	f340 80e5 	ble.w	8007720 <__kernel_rem_pio2f+0x648>
 8007556:	ab58      	add	r3, sp, #352	; 0x160
 8007558:	443b      	add	r3, r7
 800755a:	aa30      	add	r2, sp, #192	; 0xc0
 800755c:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
 8007560:	1d3b      	adds	r3, r7, #4
 8007562:	a932      	add	r1, sp, #200	; 0xc8
 8007564:	4417      	add	r7, r2
 8007566:	441a      	add	r2, r3
 8007568:	ed57 7a01 	vldr	s15, [r7, #-4]
 800756c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007570:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007574:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007578:	eeb0 7a66 	vmov.f32	s14, s13
 800757c:	ed62 7a01 	vstmdb	r2!, {s15}
 8007580:	4291      	cmp	r1, r2
 8007582:	ed67 6a01 	vstmdb	r7!, {s13}
 8007586:	d1ef      	bne.n	8007568 <__kernel_rem_pio2f+0x490>
 8007588:	a930      	add	r1, sp, #192	; 0xc0
 800758a:	eddf 7a76 	vldr	s15, [pc, #472]	; 8007764 <__kernel_rem_pio2f+0x68c>
 800758e:	440b      	add	r3, r1
 8007590:	ed33 7a01 	vldmdb	r3!, {s14}
 8007594:	429a      	cmp	r2, r3
 8007596:	ee77 7a87 	vadd.f32	s15, s15, s14
 800759a:	d1f9      	bne.n	8007590 <__kernel_rem_pio2f+0x4b8>
 800759c:	4643      	mov	r3, r8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80ae 	beq.w	8007700 <__kernel_rem_pio2f+0x628>
 80075a4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80075a8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80075ac:	9a02      	ldr	r2, [sp, #8]
 80075ae:	eef1 7a67 	vneg.f32	s15, s15
 80075b2:	eef1 6a66 	vneg.f32	s13, s13
 80075b6:	eeb1 7a47 	vneg.f32	s14, s14
 80075ba:	edc2 7a02 	vstr	s15, [r2, #8]
 80075be:	edc2 6a00 	vstr	s13, [r2]
 80075c2:	ed82 7a01 	vstr	s14, [r2, #4]
 80075c6:	ee19 3a90 	vmov	r3, s19
 80075ca:	f003 0007 	and.w	r0, r3, #7
 80075ce:	b059      	add	sp, #356	; 0x164
 80075d0:	ecbd 8b04 	vpop	{d8-d9}
 80075d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d8:	1d3a      	adds	r2, r7, #4
 80075da:	a930      	add	r1, sp, #192	; 0xc0
 80075dc:	eddf 7a61 	vldr	s15, [pc, #388]	; 8007764 <__kernel_rem_pio2f+0x68c>
 80075e0:	440a      	add	r2, r1
 80075e2:	ed32 7a01 	vldmdb	r2!, {s14}
 80075e6:	428a      	cmp	r2, r1
 80075e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075ec:	d1f9      	bne.n	80075e2 <__kernel_rem_pio2f+0x50a>
 80075ee:	4642      	mov	r2, r8
 80075f0:	2a00      	cmp	r2, #0
 80075f2:	d078      	beq.n	80076e6 <__kernel_rem_pio2f+0x60e>
 80075f4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80075f8:	9a02      	ldr	r2, [sp, #8]
 80075fa:	eeb1 7a67 	vneg.f32	s14, s15
 80075fe:	2b00      	cmp	r3, #0
 8007600:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007604:	ed82 7a00 	vstr	s14, [r2]
 8007608:	dd0a      	ble.n	8007620 <__kernel_rem_pio2f+0x548>
 800760a:	a931      	add	r1, sp, #196	; 0xc4
 800760c:	2201      	movs	r2, #1
 800760e:	ecb1 7a01 	vldmia	r1!, {s14}
 8007612:	3201      	adds	r2, #1
 8007614:	4293      	cmp	r3, r2
 8007616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800761a:	daf8      	bge.n	800760e <__kernel_rem_pio2f+0x536>
 800761c:	4643      	mov	r3, r8
 800761e:	b10b      	cbz	r3, 8007624 <__kernel_rem_pio2f+0x54c>
 8007620:	eef1 7a67 	vneg.f32	s15, s15
 8007624:	9b02      	ldr	r3, [sp, #8]
 8007626:	edc3 7a01 	vstr	s15, [r3, #4]
 800762a:	e7cc      	b.n	80075c6 <__kernel_rem_pio2f+0x4ee>
 800762c:	ab30      	add	r3, sp, #192	; 0xc0
 800762e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007764 <__kernel_rem_pio2f+0x68c>
 8007632:	449e      	add	lr, r3
 8007634:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007638:	4573      	cmp	r3, lr
 800763a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800763e:	d1f9      	bne.n	8007634 <__kernel_rem_pio2f+0x55c>
 8007640:	4643      	mov	r3, r8
 8007642:	b10b      	cbz	r3, 8007648 <__kernel_rem_pio2f+0x570>
 8007644:	eef1 7a67 	vneg.f32	s15, s15
 8007648:	9b02      	ldr	r3, [sp, #8]
 800764a:	edc3 7a00 	vstr	s15, [r3]
 800764e:	e7ba      	b.n	80075c6 <__kernel_rem_pio2f+0x4ee>
 8007650:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007764 <__kernel_rem_pio2f+0x68c>
 8007654:	ece5 7a01 	vstmia	r5!, {s15}
 8007658:	42bd      	cmp	r5, r7
 800765a:	f100 0004 	add.w	r0, r0, #4
 800765e:	f47f ad7e 	bne.w	800715e <__kernel_rem_pio2f+0x86>
 8007662:	e592      	b.n	800718a <__kernel_rem_pio2f+0xb2>
 8007664:	ee19 2a90 	vmov	r2, s19
 8007668:	f1bb 0f00 	cmp.w	fp, #0
 800766c:	f102 0201 	add.w	r2, r2, #1
 8007670:	ee09 2a90 	vmov	s19, r2
 8007674:	bfc8      	it	gt
 8007676:	2102      	movgt	r1, #2
 8007678:	f73f adf7 	bgt.w	800726a <__kernel_rem_pio2f+0x192>
 800767c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007680:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8007684:	2102      	movs	r1, #2
 8007686:	e638      	b.n	80072fa <__kernel_rem_pio2f+0x222>
 8007688:	eddf 7a36 	vldr	s15, [pc, #216]	; 8007764 <__kernel_rem_pio2f+0x68c>
 800768c:	e733      	b.n	80074f6 <__kernel_rem_pio2f+0x41e>
 800768e:	2e00      	cmp	r6, #0
 8007690:	dd1e      	ble.n	80076d0 <__kernel_rem_pio2f+0x5f8>
 8007692:	2200      	movs	r2, #0
 8007694:	2e01      	cmp	r6, #1
 8007696:	f43f ae19 	beq.w	80072cc <__kernel_rem_pio2f+0x1f4>
 800769a:	2e02      	cmp	r6, #2
 800769c:	d107      	bne.n	80076ae <__kernel_rem_pio2f+0x5d6>
 800769e:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
 80076a2:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 80076a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076aa:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
 80076ae:	2902      	cmp	r1, #2
 80076b0:	f47f ae23 	bne.w	80072fa <__kernel_rem_pio2f+0x222>
 80076b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076b8:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80076bc:	2a00      	cmp	r2, #0
 80076be:	f43f ae1c 	beq.w	80072fa <__kernel_rem_pio2f+0x222>
 80076c2:	e612      	b.n	80072ea <__kernel_rem_pio2f+0x212>
 80076c4:	3001      	adds	r0, #1
 80076c6:	4583      	cmp	fp, r0
 80076c8:	f47f add9 	bne.w	800727e <__kernel_rem_pio2f+0x1a6>
 80076cc:	2e00      	cmp	r6, #0
 80076ce:	dce1      	bgt.n	8007694 <__kernel_rem_pio2f+0x5bc>
 80076d0:	2902      	cmp	r1, #2
 80076d2:	f47f ae12 	bne.w	80072fa <__kernel_rem_pio2f+0x222>
 80076d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076da:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80076de:	e60c      	b.n	80072fa <__kernel_rem_pio2f+0x222>
 80076e0:	f04f 0c01 	mov.w	ip, #1
 80076e4:	e632      	b.n	800734c <__kernel_rem_pio2f+0x274>
 80076e6:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 80076ea:	9a02      	ldr	r2, [sp, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	edc2 7a00 	vstr	s15, [r2]
 80076f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076f6:	dc88      	bgt.n	800760a <__kernel_rem_pio2f+0x532>
 80076f8:	9b02      	ldr	r3, [sp, #8]
 80076fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80076fe:	e762      	b.n	80075c6 <__kernel_rem_pio2f+0x4ee>
 8007700:	9802      	ldr	r0, [sp, #8]
 8007702:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007704:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007706:	edc0 7a02 	vstr	s15, [r0, #8]
 800770a:	6002      	str	r2, [r0, #0]
 800770c:	6043      	str	r3, [r0, #4]
 800770e:	e75a      	b.n	80075c6 <__kernel_rem_pio2f+0x4ee>
 8007710:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007714:	465b      	mov	r3, fp
 8007716:	ee10 2a10 	vmov	r2, s0
 800771a:	f845 202b 	str.w	r2, [r5, fp, lsl #2]
 800771e:	e6ae      	b.n	800747e <__kernel_rem_pio2f+0x3a6>
 8007720:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007764 <__kernel_rem_pio2f+0x68c>
 8007724:	e73a      	b.n	800759c <__kernel_rem_pio2f+0x4c4>
 8007726:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8007728:	2a03      	cmp	r2, #3
 800772a:	f63f af4c 	bhi.w	80075c6 <__kernel_rem_pio2f+0x4ee>
 800772e:	a101      	add	r1, pc, #4	; (adr r1, 8007734 <__kernel_rem_pio2f+0x65c>)
 8007730:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007734:	08007753 	.word	0x08007753
 8007738:	0800774d 	.word	0x0800774d
 800773c:	0800774d 	.word	0x0800774d
 8007740:	08007721 	.word	0x08007721
 8007744:	f04f 0e01 	mov.w	lr, #1
 8007748:	2000      	movs	r0, #0
 800774a:	e59f      	b.n	800728c <__kernel_rem_pio2f+0x1b4>
 800774c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007764 <__kernel_rem_pio2f+0x68c>
 8007750:	e74d      	b.n	80075ee <__kernel_rem_pio2f+0x516>
 8007752:	eddf 7a04 	vldr	s15, [pc, #16]	; 8007764 <__kernel_rem_pio2f+0x68c>
 8007756:	e773      	b.n	8007640 <__kernel_rem_pio2f+0x568>
 8007758:	9b04      	ldr	r3, [sp, #16]
 800775a:	009c      	lsls	r4, r3, #2
 800775c:	e515      	b.n	800718a <__kernel_rem_pio2f+0xb2>
 800775e:	bf00      	nop
 8007760:	0800b7dc 	.word	0x0800b7dc
 8007764:	00000000 	.word	0x00000000

08007768 <__kernel_sinf>:
 8007768:	ee10 3a10 	vmov	r3, s0
 800776c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007770:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007774:	da04      	bge.n	8007780 <__kernel_sinf+0x18>
 8007776:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800777a:	ee17 3a90 	vmov	r3, s15
 800777e:	b323      	cbz	r3, 80077ca <__kernel_sinf+0x62>
 8007780:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007784:	ed9f 5a15 	vldr	s10, [pc, #84]	; 80077dc <__kernel_sinf+0x74>
 8007788:	eddf 5a15 	vldr	s11, [pc, #84]	; 80077e0 <__kernel_sinf+0x78>
 800778c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80077e4 <__kernel_sinf+0x7c>
 8007790:	eddf 6a15 	vldr	s13, [pc, #84]	; 80077e8 <__kernel_sinf+0x80>
 8007794:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80077ec <__kernel_sinf+0x84>
 8007798:	eee7 5a85 	vfma.f32	s11, s15, s10
 800779c:	ee20 5a27 	vmul.f32	s10, s0, s15
 80077a0:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80077a4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80077a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80077ac:	b170      	cbz	r0, 80077cc <__kernel_sinf+0x64>
 80077ae:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80077b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80077b6:	eea0 7aa6 	vfma.f32	s14, s1, s13
 80077ba:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80077f0 <__kernel_sinf+0x88>
 80077be:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80077c2:	eee5 0a26 	vfma.f32	s1, s10, s13
 80077c6:	ee30 0a60 	vsub.f32	s0, s0, s1
 80077ca:	4770      	bx	lr
 80077cc:	eddf 6a09 	vldr	s13, [pc, #36]	; 80077f4 <__kernel_sinf+0x8c>
 80077d0:	eee7 6a87 	vfma.f32	s13, s15, s14
 80077d4:	eea5 0a26 	vfma.f32	s0, s10, s13
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	2f2ec9d3 	.word	0x2f2ec9d3
 80077e0:	b2d72f34 	.word	0xb2d72f34
 80077e4:	3638ef1b 	.word	0x3638ef1b
 80077e8:	b9500d01 	.word	0xb9500d01
 80077ec:	3c088889 	.word	0x3c088889
 80077f0:	3e2aaaab 	.word	0x3e2aaaab
 80077f4:	be2aaaab 	.word	0xbe2aaaab

080077f8 <matherr>:
 80077f8:	2000      	movs	r0, #0
 80077fa:	4770      	bx	lr
 80077fc:	0000      	movs	r0, r0
	...

08007800 <nan>:
 8007800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007808 <nan+0x8>
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	00000000 	.word	0x00000000
 800780c:	7ff80000 	.word	0x7ff80000

08007810 <atanf>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	ee10 5a10 	vmov	r5, s0
 8007816:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800781a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800781e:	eef0 7a40 	vmov.f32	s15, s0
 8007822:	db0b      	blt.n	800783c <atanf+0x2c>
 8007824:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007828:	dc56      	bgt.n	80078d8 <atanf+0xc8>
 800782a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8007974 <atanf+0x164>
 800782e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8007978 <atanf+0x168>
 8007832:	2d00      	cmp	r5, #0
 8007834:	bfc8      	it	gt
 8007836:	eeb0 0a67 	vmovgt.f32	s0, s15
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	4b4f      	ldr	r3, [pc, #316]	; (800797c <atanf+0x16c>)
 800783e:	429c      	cmp	r4, r3
 8007840:	dc59      	bgt.n	80078f6 <atanf+0xe6>
 8007842:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007846:	db4a      	blt.n	80078de <atanf+0xce>
 8007848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800784c:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8007850:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8007980 <atanf+0x170>
 8007854:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8007984 <atanf+0x174>
 8007858:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8007988 <atanf+0x178>
 800785c:	eddf 1a4b 	vldr	s3, [pc, #300]	; 800798c <atanf+0x17c>
 8007860:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8007990 <atanf+0x180>
 8007864:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 8007994 <atanf+0x184>
 8007868:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8007998 <atanf+0x188>
 800786c:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 800799c <atanf+0x18c>
 8007870:	eddf 4a4b 	vldr	s9, [pc, #300]	; 80079a0 <atanf+0x190>
 8007874:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80079a4 <atanf+0x194>
 8007878:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80079a8 <atanf+0x198>
 800787c:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	eea7 2a01 	vfma.f32	s4, s14, s2
 8007886:	eee7 2a21 	vfma.f32	s5, s14, s3
 800788a:	eea7 3a02 	vfma.f32	s6, s14, s4
 800788e:	eee7 3a22 	vfma.f32	s7, s14, s5
 8007892:	eea7 4a03 	vfma.f32	s8, s14, s6
 8007896:	eee7 4a23 	vfma.f32	s9, s14, s7
 800789a:	eea7 5a04 	vfma.f32	s10, s14, s8
 800789e:	eea7 6a24 	vfma.f32	s12, s14, s9
 80078a2:	eee7 6a05 	vfma.f32	s13, s14, s10
 80078a6:	ee26 7a07 	vmul.f32	s14, s12, s14
 80078aa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80078ae:	d03a      	beq.n	8007926 <atanf+0x116>
 80078b0:	493e      	ldr	r1, [pc, #248]	; (80079ac <atanf+0x19c>)
 80078b2:	4a3f      	ldr	r2, [pc, #252]	; (80079b0 <atanf+0x1a0>)
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4419      	add	r1, r3
 80078b8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80078bc:	ed91 0a00 	vldr	s0, [r1]
 80078c0:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 80078c4:	4413      	add	r3, r2
 80078c6:	2d00      	cmp	r5, #0
 80078c8:	ed93 7a00 	vldr	s14, [r3]
 80078cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80078d0:	ee37 0a67 	vsub.f32	s0, s14, s15
 80078d4:	db24      	blt.n	8007920 <atanf+0x110>
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80078dc:	bd38      	pop	{r3, r4, r5, pc}
 80078de:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80079b4 <atanf+0x1a4>
 80078e2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80078e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ea:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	dda9      	ble.n	8007848 <atanf+0x38>
 80078f4:	bd38      	pop	{r3, r4, r5, pc}
 80078f6:	f7fe fd95 	bl	8006424 <fabsf>
 80078fa:	4b2f      	ldr	r3, [pc, #188]	; (80079b8 <atanf+0x1a8>)
 80078fc:	429c      	cmp	r4, r3
 80078fe:	dc19      	bgt.n	8007934 <atanf+0x124>
 8007900:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007904:	429c      	cmp	r4, r3
 8007906:	dc2a      	bgt.n	800795e <atanf+0x14e>
 8007908:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800790c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007910:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007914:	2300      	movs	r3, #0
 8007916:	ee30 0a27 	vadd.f32	s0, s0, s15
 800791a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800791e:	e795      	b.n	800784c <atanf+0x3c>
 8007920:	eeb1 0a40 	vneg.f32	s0, s0
 8007924:	bd38      	pop	{r3, r4, r5, pc}
 8007926:	ee76 6a87 	vadd.f32	s13, s13, s14
 800792a:	eee7 7ae6 	vfms.f32	s15, s15, s13
 800792e:	eeb0 0a67 	vmov.f32	s0, s15
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	4b21      	ldr	r3, [pc, #132]	; (80079bc <atanf+0x1ac>)
 8007936:	429c      	cmp	r4, r3
 8007938:	dc0b      	bgt.n	8007952 <atanf+0x142>
 800793a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800793e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007942:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007946:	2302      	movs	r3, #2
 8007948:	ee30 0a67 	vsub.f32	s0, s0, s15
 800794c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8007950:	e77c      	b.n	800784c <atanf+0x3c>
 8007952:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007956:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800795a:	2303      	movs	r3, #3
 800795c:	e776      	b.n	800784c <atanf+0x3c>
 800795e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007962:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007966:	ee30 0a27 	vadd.f32	s0, s0, s15
 800796a:	2301      	movs	r3, #1
 800796c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007970:	e76c      	b.n	800784c <atanf+0x3c>
 8007972:	bf00      	nop
 8007974:	3fc90fdb 	.word	0x3fc90fdb
 8007978:	bfc90fdb 	.word	0xbfc90fdb
 800797c:	3edfffff 	.word	0x3edfffff
 8007980:	3c8569d7 	.word	0x3c8569d7
 8007984:	3d4bda59 	.word	0x3d4bda59
 8007988:	3d886b35 	.word	0x3d886b35
 800798c:	bd15a221 	.word	0xbd15a221
 8007990:	bd6ef16b 	.word	0xbd6ef16b
 8007994:	3dba2e6e 	.word	0x3dba2e6e
 8007998:	bd9d8795 	.word	0xbd9d8795
 800799c:	3e124925 	.word	0x3e124925
 80079a0:	bde38e38 	.word	0xbde38e38
 80079a4:	3eaaaaab 	.word	0x3eaaaaab
 80079a8:	be4ccccd 	.word	0xbe4ccccd
 80079ac:	0800b820 	.word	0x0800b820
 80079b0:	0800b810 	.word	0x0800b810
 80079b4:	7149f2ca 	.word	0x7149f2ca
 80079b8:	3f97ffff 	.word	0x3f97ffff
 80079bc:	401bffff 	.word	0x401bffff

080079c0 <floorf>:
 80079c0:	ee10 2a10 	vmov	r2, s0
 80079c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80079c8:	0dcb      	lsrs	r3, r1, #23
 80079ca:	3b7f      	subs	r3, #127	; 0x7f
 80079cc:	2b16      	cmp	r3, #22
 80079ce:	dc17      	bgt.n	8007a00 <floorf+0x40>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	ee10 0a10 	vmov	r0, s0
 80079d6:	db19      	blt.n	8007a0c <floorf+0x4c>
 80079d8:	491a      	ldr	r1, [pc, #104]	; (8007a44 <floorf+0x84>)
 80079da:	4119      	asrs	r1, r3
 80079dc:	420a      	tst	r2, r1
 80079de:	d022      	beq.n	8007a26 <floorf+0x66>
 80079e0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007a48 <floorf+0x88>
 80079e4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80079e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f0:	dd19      	ble.n	8007a26 <floorf+0x66>
 80079f2:	2a00      	cmp	r2, #0
 80079f4:	db18      	blt.n	8007a28 <floorf+0x68>
 80079f6:	ea20 0301 	bic.w	r3, r0, r1
 80079fa:	ee00 3a10 	vmov	s0, r3
 80079fe:	4770      	bx	lr
 8007a00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007a04:	d30f      	bcc.n	8007a26 <floorf+0x66>
 8007a06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007a0a:	4770      	bx	lr
 8007a0c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007a48 <floorf+0x88>
 8007a10:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	dd03      	ble.n	8007a26 <floorf+0x66>
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	db08      	blt.n	8007a34 <floorf+0x74>
 8007a22:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8007a4c <floorf+0x8c>
 8007a26:	4770      	bx	lr
 8007a28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007a2c:	fa42 f303 	asr.w	r3, r2, r3
 8007a30:	4418      	add	r0, r3
 8007a32:	e7e0      	b.n	80079f6 <floorf+0x36>
 8007a34:	2900      	cmp	r1, #0
 8007a36:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007a3a:	bf18      	it	ne
 8007a3c:	eeb0 0a67 	vmovne.f32	s0, s15
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	007fffff 	.word	0x007fffff
 8007a48:	7149f2ca 	.word	0x7149f2ca
 8007a4c:	00000000 	.word	0x00000000

08007a50 <scalbnf>:
 8007a50:	b508      	push	{r3, lr}
 8007a52:	ee10 3a10 	vmov	r3, s0
 8007a56:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007a5a:	ed2d 8b02 	vpush	{d8}
 8007a5e:	d011      	beq.n	8007a84 <scalbnf+0x34>
 8007a60:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007a64:	d211      	bcs.n	8007a8a <scalbnf+0x3a>
 8007a66:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007a6a:	d313      	bcc.n	8007a94 <scalbnf+0x44>
 8007a6c:	0dd2      	lsrs	r2, r2, #23
 8007a6e:	4402      	add	r2, r0
 8007a70:	2afe      	cmp	r2, #254	; 0xfe
 8007a72:	dc2e      	bgt.n	8007ad2 <scalbnf+0x82>
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	dd1a      	ble.n	8007aae <scalbnf+0x5e>
 8007a78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a7c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007a80:	ee00 3a10 	vmov	s0, r3
 8007a84:	ecbd 8b02 	vpop	{d8}
 8007a88:	bd08      	pop	{r3, pc}
 8007a8a:	ecbd 8b02 	vpop	{d8}
 8007a8e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007a92:	bd08      	pop	{r3, pc}
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <scalbnf+0xbc>)
 8007a96:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007b10 <scalbnf+0xc0>
 8007a9a:	4298      	cmp	r0, r3
 8007a9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007aa0:	db22      	blt.n	8007ae8 <scalbnf+0x98>
 8007aa2:	ee10 3a10 	vmov	r3, s0
 8007aa6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007aaa:	3a19      	subs	r2, #25
 8007aac:	e7df      	b.n	8007a6e <scalbnf+0x1e>
 8007aae:	f112 0f16 	cmn.w	r2, #22
 8007ab2:	da1e      	bge.n	8007af2 <scalbnf+0xa2>
 8007ab4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007ab8:	4298      	cmp	r0, r3
 8007aba:	dc0a      	bgt.n	8007ad2 <scalbnf+0x82>
 8007abc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8007b14 <scalbnf+0xc4>
 8007ac0:	eef0 0a40 	vmov.f32	s1, s0
 8007ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ac8:	f000 f82a 	bl	8007b20 <copysignf>
 8007acc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007ad0:	e7d8      	b.n	8007a84 <scalbnf+0x34>
 8007ad2:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8007b18 <scalbnf+0xc8>
 8007ad6:	eef0 0a40 	vmov.f32	s1, s0
 8007ada:	eeb0 0a48 	vmov.f32	s0, s16
 8007ade:	f000 f81f 	bl	8007b20 <copysignf>
 8007ae2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007ae6:	e7cd      	b.n	8007a84 <scalbnf+0x34>
 8007ae8:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8007b14 <scalbnf+0xc4>
 8007aec:	ee20 0a20 	vmul.f32	s0, s0, s1
 8007af0:	e7c8      	b.n	8007a84 <scalbnf+0x34>
 8007af2:	3219      	adds	r2, #25
 8007af4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007af8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007afc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007b1c <scalbnf+0xcc>
 8007b00:	ee00 3a10 	vmov	s0, r3
 8007b04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b08:	e7bc      	b.n	8007a84 <scalbnf+0x34>
 8007b0a:	bf00      	nop
 8007b0c:	ffff3cb0 	.word	0xffff3cb0
 8007b10:	4c000000 	.word	0x4c000000
 8007b14:	0da24260 	.word	0x0da24260
 8007b18:	7149f2ca 	.word	0x7149f2ca
 8007b1c:	33000000 	.word	0x33000000

08007b20 <copysignf>:
 8007b20:	ee10 3a10 	vmov	r3, s0
 8007b24:	ee10 2a90 	vmov	r2, s1
 8007b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007b30:	4313      	orrs	r3, r2
 8007b32:	ee00 3a10 	vmov	s0, r3
 8007b36:	4770      	bx	lr

08007b38 <__errno>:
 8007b38:	4b01      	ldr	r3, [pc, #4]	; (8007b40 <__errno+0x8>)
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000000 	.word	0x20000000

08007b44 <sprintf>:
 8007b44:	b40e      	push	{r1, r2, r3}
 8007b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b48:	b09c      	sub	sp, #112	; 0x70
 8007b4a:	ab21      	add	r3, sp, #132	; 0x84
 8007b4c:	490f      	ldr	r1, [pc, #60]	; (8007b8c <sprintf+0x48>)
 8007b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	4605      	mov	r5, r0
 8007b56:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007b5a:	6808      	ldr	r0, [r1, #0]
 8007b5c:	9502      	str	r5, [sp, #8]
 8007b5e:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007b62:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007b66:	a902      	add	r1, sp, #8
 8007b68:	9506      	str	r5, [sp, #24]
 8007b6a:	f8ad 7014 	strh.w	r7, [sp, #20]
 8007b6e:	9404      	str	r4, [sp, #16]
 8007b70:	9407      	str	r4, [sp, #28]
 8007b72:	f8ad 6016 	strh.w	r6, [sp, #22]
 8007b76:	f000 f80b 	bl	8007b90 <_svfprintf_r>
 8007b7a:	9b02      	ldr	r3, [sp, #8]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
 8007b80:	b01c      	add	sp, #112	; 0x70
 8007b82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007b86:	b003      	add	sp, #12
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000000 	.word	0x20000000

08007b90 <_svfprintf_r>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	b0c1      	sub	sp, #260	; 0x104
 8007b96:	460c      	mov	r4, r1
 8007b98:	9107      	str	r1, [sp, #28]
 8007b9a:	4692      	mov	sl, r2
 8007b9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b9e:	9008      	str	r0, [sp, #32]
 8007ba0:	f002 f9f4 	bl	8009f8c <_localeconv_r>
 8007ba4:	6803      	ldr	r3, [r0, #0]
 8007ba6:	9314      	str	r3, [sp, #80]	; 0x50
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7f8 fc49 	bl	8000440 <strlen>
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	9013      	str	r0, [sp, #76]	; 0x4c
 8007bb2:	0619      	lsls	r1, r3, #24
 8007bb4:	d503      	bpl.n	8007bbe <_svfprintf_r+0x2e>
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f001 801b 	beq.w	8008bf4 <_svfprintf_r+0x1064>
 8007bbe:	ed9f 7b94 	vldr	d7, [pc, #592]	; 8007e10 <_svfprintf_r+0x280>
 8007bc2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8007bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bce:	9325      	str	r3, [sp, #148]	; 0x94
 8007bd0:	9324      	str	r3, [sp, #144]	; 0x90
 8007bd2:	9312      	str	r3, [sp, #72]	; 0x48
 8007bd4:	9315      	str	r3, [sp, #84]	; 0x54
 8007bd6:	9305      	str	r3, [sp, #20]
 8007bd8:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007bdc:	46c8      	mov	r8, r9
 8007bde:	f89a 3000 	ldrb.w	r3, [sl]
 8007be2:	4654      	mov	r4, sl
 8007be4:	b1e3      	cbz	r3, 8007c20 <_svfprintf_r+0x90>
 8007be6:	2b25      	cmp	r3, #37	; 0x25
 8007be8:	d102      	bne.n	8007bf0 <_svfprintf_r+0x60>
 8007bea:	e019      	b.n	8007c20 <_svfprintf_r+0x90>
 8007bec:	2b25      	cmp	r3, #37	; 0x25
 8007bee:	d003      	beq.n	8007bf8 <_svfprintf_r+0x68>
 8007bf0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f9      	bne.n	8007bec <_svfprintf_r+0x5c>
 8007bf8:	eba4 050a 	sub.w	r5, r4, sl
 8007bfc:	b185      	cbz	r5, 8007c20 <_svfprintf_r+0x90>
 8007bfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c00:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007c02:	f8c8 a000 	str.w	sl, [r8]
 8007c06:	3301      	adds	r3, #1
 8007c08:	442a      	add	r2, r5
 8007c0a:	2b07      	cmp	r3, #7
 8007c0c:	f8c8 5004 	str.w	r5, [r8, #4]
 8007c10:	9225      	str	r2, [sp, #148]	; 0x94
 8007c12:	9324      	str	r3, [sp, #144]	; 0x90
 8007c14:	dc7f      	bgt.n	8007d16 <_svfprintf_r+0x186>
 8007c16:	f108 0808 	add.w	r8, r8, #8
 8007c1a:	9b05      	ldr	r3, [sp, #20]
 8007c1c:	442b      	add	r3, r5
 8007c1e:	9305      	str	r3, [sp, #20]
 8007c20:	7823      	ldrb	r3, [r4, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d07f      	beq.n	8007d26 <_svfprintf_r+0x196>
 8007c26:	2300      	movs	r3, #0
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8007c2e:	4619      	mov	r1, r3
 8007c30:	9309      	str	r3, [sp, #36]	; 0x24
 8007c32:	469b      	mov	fp, r3
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c38:	7863      	ldrb	r3, [r4, #1]
 8007c3a:	9006      	str	r0, [sp, #24]
 8007c3c:	f104 0a01 	add.w	sl, r4, #1
 8007c40:	f10a 0a01 	add.w	sl, sl, #1
 8007c44:	f1a3 0020 	sub.w	r0, r3, #32
 8007c48:	2858      	cmp	r0, #88	; 0x58
 8007c4a:	f200 83d3 	bhi.w	80083f4 <_svfprintf_r+0x864>
 8007c4e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007c52:	023f      	.short	0x023f
 8007c54:	03d103d1 	.word	0x03d103d1
 8007c58:	03d10247 	.word	0x03d10247
 8007c5c:	03d103d1 	.word	0x03d103d1
 8007c60:	03d103d1 	.word	0x03d103d1
 8007c64:	024c03d1 	.word	0x024c03d1
 8007c68:	03d1020a 	.word	0x03d1020a
 8007c6c:	0273005d 	.word	0x0273005d
 8007c70:	028e03d1 	.word	0x028e03d1
 8007c74:	03c103c1 	.word	0x03c103c1
 8007c78:	03c103c1 	.word	0x03c103c1
 8007c7c:	03c103c1 	.word	0x03c103c1
 8007c80:	03c103c1 	.word	0x03c103c1
 8007c84:	03d103c1 	.word	0x03d103c1
 8007c88:	03d103d1 	.word	0x03d103d1
 8007c8c:	03d103d1 	.word	0x03d103d1
 8007c90:	03d103d1 	.word	0x03d103d1
 8007c94:	03d103d1 	.word	0x03d103d1
 8007c98:	033f03d1 	.word	0x033f03d1
 8007c9c:	03d1035f 	.word	0x03d1035f
 8007ca0:	03d1035f 	.word	0x03d1035f
 8007ca4:	03d103d1 	.word	0x03d103d1
 8007ca8:	03aa03d1 	.word	0x03aa03d1
 8007cac:	03d103d1 	.word	0x03d103d1
 8007cb0:	03d103af 	.word	0x03d103af
 8007cb4:	03d103d1 	.word	0x03d103d1
 8007cb8:	03d103d1 	.word	0x03d103d1
 8007cbc:	03d10261 	.word	0x03d10261
 8007cc0:	032603d1 	.word	0x032603d1
 8007cc4:	03d103d1 	.word	0x03d103d1
 8007cc8:	03d103d1 	.word	0x03d103d1
 8007ccc:	03d103d1 	.word	0x03d103d1
 8007cd0:	03d103d1 	.word	0x03d103d1
 8007cd4:	03d103d1 	.word	0x03d103d1
 8007cd8:	02e302ce 	.word	0x02e302ce
 8007cdc:	035f035f 	.word	0x035f035f
 8007ce0:	0293035f 	.word	0x0293035f
 8007ce4:	03d102e3 	.word	0x03d102e3
 8007ce8:	029803d1 	.word	0x029803d1
 8007cec:	02a503d1 	.word	0x02a503d1
 8007cf0:	02bc01d3 	.word	0x02bc01d3
 8007cf4:	03d1020f 	.word	0x03d1020f
 8007cf8:	03d101e8 	.word	0x03d101e8
 8007cfc:	03d1007e 	.word	0x03d1007e
 8007d00:	021403d1 	.word	0x021403d1
 8007d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d08:	4240      	negs	r0, r0
 8007d0a:	9009      	str	r0, [sp, #36]	; 0x24
 8007d0c:	f04b 0b04 	orr.w	fp, fp, #4
 8007d10:	f89a 3000 	ldrb.w	r3, [sl]
 8007d14:	e794      	b.n	8007c40 <_svfprintf_r+0xb0>
 8007d16:	aa23      	add	r2, sp, #140	; 0x8c
 8007d18:	9907      	ldr	r1, [sp, #28]
 8007d1a:	9808      	ldr	r0, [sp, #32]
 8007d1c:	f002 ff06 	bl	800ab2c <__ssprint_r>
 8007d20:	b940      	cbnz	r0, 8007d34 <_svfprintf_r+0x1a4>
 8007d22:	46c8      	mov	r8, r9
 8007d24:	e779      	b.n	8007c1a <_svfprintf_r+0x8a>
 8007d26:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007d28:	b123      	cbz	r3, 8007d34 <_svfprintf_r+0x1a4>
 8007d2a:	9808      	ldr	r0, [sp, #32]
 8007d2c:	9907      	ldr	r1, [sp, #28]
 8007d2e:	aa23      	add	r2, sp, #140	; 0x8c
 8007d30:	f002 fefc 	bl	800ab2c <__ssprint_r>
 8007d34:	9b07      	ldr	r3, [sp, #28]
 8007d36:	899b      	ldrh	r3, [r3, #12]
 8007d38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007d3c:	9b05      	ldr	r3, [sp, #20]
 8007d3e:	bf18      	it	ne
 8007d40:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8007d44:	9305      	str	r3, [sp, #20]
 8007d46:	9805      	ldr	r0, [sp, #20]
 8007d48:	b041      	add	sp, #260	; 0x104
 8007d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	f01b 0f20 	tst.w	fp, #32
 8007d52:	930d      	str	r3, [sp, #52]	; 0x34
 8007d54:	f040 81e5 	bne.w	8008122 <_svfprintf_r+0x592>
 8007d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d5a:	f01b 0f10 	tst.w	fp, #16
 8007d5e:	4613      	mov	r3, r2
 8007d60:	f040 8588 	bne.w	8008874 <_svfprintf_r+0xce4>
 8007d64:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007d68:	f000 8584 	beq.w	8008874 <_svfprintf_r+0xce4>
 8007d6c:	8814      	ldrh	r4, [r2, #0]
 8007d6e:	3204      	adds	r2, #4
 8007d70:	2500      	movs	r5, #0
 8007d72:	2301      	movs	r3, #1
 8007d74:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d76:	2700      	movs	r7, #0
 8007d78:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8007d7c:	9906      	ldr	r1, [sp, #24]
 8007d7e:	1c4a      	adds	r2, r1, #1
 8007d80:	f000 826d 	beq.w	800825e <_svfprintf_r+0x6ce>
 8007d84:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8007d88:	9203      	str	r2, [sp, #12]
 8007d8a:	ea54 0205 	orrs.w	r2, r4, r5
 8007d8e:	f040 826c 	bne.w	800826a <_svfprintf_r+0x6da>
 8007d92:	2900      	cmp	r1, #0
 8007d94:	f040 8451 	bne.w	800863a <_svfprintf_r+0xaaa>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 850b 	bne.w	80087b4 <_svfprintf_r+0xc24>
 8007d9e:	f01b 0301 	ands.w	r3, fp, #1
 8007da2:	930a      	str	r3, [sp, #40]	; 0x28
 8007da4:	f000 861a 	beq.w	80089dc <_svfprintf_r+0xe4c>
 8007da8:	ae40      	add	r6, sp, #256	; 0x100
 8007daa:	2330      	movs	r3, #48	; 0x30
 8007dac:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8007db0:	9b06      	ldr	r3, [sp, #24]
 8007db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db4:	4293      	cmp	r3, r2
 8007db6:	bfb8      	it	lt
 8007db8:	4613      	movlt	r3, r2
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	930e      	str	r3, [sp, #56]	; 0x38
 8007dc0:	b117      	cbz	r7, 8007dc8 <_svfprintf_r+0x238>
 8007dc2:	9b04      	ldr	r3, [sp, #16]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	f013 0302 	ands.w	r3, r3, #2
 8007dce:	930c      	str	r3, [sp, #48]	; 0x30
 8007dd0:	d002      	beq.n	8007dd8 <_svfprintf_r+0x248>
 8007dd2:	9b04      	ldr	r3, [sp, #16]
 8007dd4:	3302      	adds	r3, #2
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	f013 0584 	ands.w	r5, r3, #132	; 0x84
 8007dde:	f040 8320 	bne.w	8008422 <_svfprintf_r+0x892>
 8007de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de4:	9a04      	ldr	r2, [sp, #16]
 8007de6:	eba3 0b02 	sub.w	fp, r3, r2
 8007dea:	f1bb 0f00 	cmp.w	fp, #0
 8007dee:	f340 8318 	ble.w	8008422 <_svfprintf_r+0x892>
 8007df2:	f1bb 0f10 	cmp.w	fp, #16
 8007df6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8007df8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007dfa:	dd30      	ble.n	8007e5e <_svfprintf_r+0x2ce>
 8007dfc:	4643      	mov	r3, r8
 8007dfe:	4621      	mov	r1, r4
 8007e00:	46a8      	mov	r8, r5
 8007e02:	2710      	movs	r7, #16
 8007e04:	9c08      	ldr	r4, [sp, #32]
 8007e06:	9d07      	ldr	r5, [sp, #28]
 8007e08:	e00d      	b.n	8007e26 <_svfprintf_r+0x296>
 8007e0a:	bf00      	nop
 8007e0c:	f3af 8000 	nop.w
	...
 8007e18:	f1ab 0b10 	sub.w	fp, fp, #16
 8007e1c:	f1bb 0f10 	cmp.w	fp, #16
 8007e20:	f103 0308 	add.w	r3, r3, #8
 8007e24:	dd18      	ble.n	8007e58 <_svfprintf_r+0x2c8>
 8007e26:	3201      	adds	r2, #1
 8007e28:	48b7      	ldr	r0, [pc, #732]	; (8008108 <_svfprintf_r+0x578>)
 8007e2a:	9224      	str	r2, [sp, #144]	; 0x90
 8007e2c:	3110      	adds	r1, #16
 8007e2e:	2a07      	cmp	r2, #7
 8007e30:	9125      	str	r1, [sp, #148]	; 0x94
 8007e32:	e883 0081 	stmia.w	r3, {r0, r7}
 8007e36:	ddef      	ble.n	8007e18 <_svfprintf_r+0x288>
 8007e38:	aa23      	add	r2, sp, #140	; 0x8c
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f002 fe75 	bl	800ab2c <__ssprint_r>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f47f af76 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8007e48:	f1ab 0b10 	sub.w	fp, fp, #16
 8007e4c:	f1bb 0f10 	cmp.w	fp, #16
 8007e50:	9925      	ldr	r1, [sp, #148]	; 0x94
 8007e52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e54:	464b      	mov	r3, r9
 8007e56:	dce6      	bgt.n	8007e26 <_svfprintf_r+0x296>
 8007e58:	4645      	mov	r5, r8
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	4698      	mov	r8, r3
 8007e5e:	3201      	adds	r2, #1
 8007e60:	4ba9      	ldr	r3, [pc, #676]	; (8008108 <_svfprintf_r+0x578>)
 8007e62:	9224      	str	r2, [sp, #144]	; 0x90
 8007e64:	445c      	add	r4, fp
 8007e66:	2a07      	cmp	r2, #7
 8007e68:	9425      	str	r4, [sp, #148]	; 0x94
 8007e6a:	e888 0808 	stmia.w	r8, {r3, fp}
 8007e6e:	f300 84a6 	bgt.w	80087be <_svfprintf_r+0xc2e>
 8007e72:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8007e76:	f108 0808 	add.w	r8, r8, #8
 8007e7a:	b177      	cbz	r7, 8007e9a <_svfprintf_r+0x30a>
 8007e7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e7e:	3301      	adds	r3, #1
 8007e80:	3401      	adds	r4, #1
 8007e82:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8007e86:	2201      	movs	r2, #1
 8007e88:	2b07      	cmp	r3, #7
 8007e8a:	9425      	str	r4, [sp, #148]	; 0x94
 8007e8c:	9324      	str	r3, [sp, #144]	; 0x90
 8007e8e:	e888 0006 	stmia.w	r8, {r1, r2}
 8007e92:	f300 83f4 	bgt.w	800867e <_svfprintf_r+0xaee>
 8007e96:	f108 0808 	add.w	r8, r8, #8
 8007e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e9c:	b16b      	cbz	r3, 8007eba <_svfprintf_r+0x32a>
 8007e9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	3402      	adds	r4, #2
 8007ea4:	a91c      	add	r1, sp, #112	; 0x70
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	2b07      	cmp	r3, #7
 8007eaa:	9425      	str	r4, [sp, #148]	; 0x94
 8007eac:	9324      	str	r3, [sp, #144]	; 0x90
 8007eae:	e888 0006 	stmia.w	r8, {r1, r2}
 8007eb2:	f300 83d9 	bgt.w	8008668 <_svfprintf_r+0xad8>
 8007eb6:	f108 0808 	add.w	r8, r8, #8
 8007eba:	2d80      	cmp	r5, #128	; 0x80
 8007ebc:	f000 8322 	beq.w	8008504 <_svfprintf_r+0x974>
 8007ec0:	9b06      	ldr	r3, [sp, #24]
 8007ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec4:	1a9f      	subs	r7, r3, r2
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	dd36      	ble.n	8007f38 <_svfprintf_r+0x3a8>
 8007eca:	2f10      	cmp	r7, #16
 8007ecc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ece:	4d8f      	ldr	r5, [pc, #572]	; (800810c <_svfprintf_r+0x57c>)
 8007ed0:	dd27      	ble.n	8007f22 <_svfprintf_r+0x392>
 8007ed2:	4642      	mov	r2, r8
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	46b0      	mov	r8, r6
 8007ed8:	f04f 0b10 	mov.w	fp, #16
 8007edc:	462e      	mov	r6, r5
 8007ede:	9c08      	ldr	r4, [sp, #32]
 8007ee0:	9d07      	ldr	r5, [sp, #28]
 8007ee2:	e004      	b.n	8007eee <_svfprintf_r+0x35e>
 8007ee4:	3f10      	subs	r7, #16
 8007ee6:	2f10      	cmp	r7, #16
 8007ee8:	f102 0208 	add.w	r2, r2, #8
 8007eec:	dd15      	ble.n	8007f1a <_svfprintf_r+0x38a>
 8007eee:	3301      	adds	r3, #1
 8007ef0:	3110      	adds	r1, #16
 8007ef2:	2b07      	cmp	r3, #7
 8007ef4:	9125      	str	r1, [sp, #148]	; 0x94
 8007ef6:	9324      	str	r3, [sp, #144]	; 0x90
 8007ef8:	e882 0840 	stmia.w	r2, {r6, fp}
 8007efc:	ddf2      	ble.n	8007ee4 <_svfprintf_r+0x354>
 8007efe:	aa23      	add	r2, sp, #140	; 0x8c
 8007f00:	4629      	mov	r1, r5
 8007f02:	4620      	mov	r0, r4
 8007f04:	f002 fe12 	bl	800ab2c <__ssprint_r>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f47f af13 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8007f0e:	3f10      	subs	r7, #16
 8007f10:	2f10      	cmp	r7, #16
 8007f12:	9925      	ldr	r1, [sp, #148]	; 0x94
 8007f14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f16:	464a      	mov	r2, r9
 8007f18:	dce9      	bgt.n	8007eee <_svfprintf_r+0x35e>
 8007f1a:	4635      	mov	r5, r6
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	4646      	mov	r6, r8
 8007f20:	4690      	mov	r8, r2
 8007f22:	3301      	adds	r3, #1
 8007f24:	443c      	add	r4, r7
 8007f26:	2b07      	cmp	r3, #7
 8007f28:	9425      	str	r4, [sp, #148]	; 0x94
 8007f2a:	9324      	str	r3, [sp, #144]	; 0x90
 8007f2c:	e888 00a0 	stmia.w	r8, {r5, r7}
 8007f30:	f300 838f 	bgt.w	8008652 <_svfprintf_r+0xac2>
 8007f34:	f108 0808 	add.w	r8, r8, #8
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	05df      	lsls	r7, r3, #23
 8007f3c:	f100 8273 	bmi.w	8008426 <_svfprintf_r+0x896>
 8007f40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f44:	f8c8 6000 	str.w	r6, [r8]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	440c      	add	r4, r1
 8007f4c:	2b07      	cmp	r3, #7
 8007f4e:	9425      	str	r4, [sp, #148]	; 0x94
 8007f50:	f8c8 1004 	str.w	r1, [r8, #4]
 8007f54:	9324      	str	r3, [sp, #144]	; 0x90
 8007f56:	f300 835b 	bgt.w	8008610 <_svfprintf_r+0xa80>
 8007f5a:	f108 0808 	add.w	r8, r8, #8
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	075b      	lsls	r3, r3, #29
 8007f62:	d53a      	bpl.n	8007fda <_svfprintf_r+0x44a>
 8007f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f66:	9a04      	ldr	r2, [sp, #16]
 8007f68:	1a9d      	subs	r5, r3, r2
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	dd35      	ble.n	8007fda <_svfprintf_r+0x44a>
 8007f6e:	2d10      	cmp	r5, #16
 8007f70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f72:	dd20      	ble.n	8007fb6 <_svfprintf_r+0x426>
 8007f74:	2610      	movs	r6, #16
 8007f76:	9f08      	ldr	r7, [sp, #32]
 8007f78:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007f7c:	e004      	b.n	8007f88 <_svfprintf_r+0x3f8>
 8007f7e:	3d10      	subs	r5, #16
 8007f80:	2d10      	cmp	r5, #16
 8007f82:	f108 0808 	add.w	r8, r8, #8
 8007f86:	dd16      	ble.n	8007fb6 <_svfprintf_r+0x426>
 8007f88:	3301      	adds	r3, #1
 8007f8a:	4a5f      	ldr	r2, [pc, #380]	; (8008108 <_svfprintf_r+0x578>)
 8007f8c:	9324      	str	r3, [sp, #144]	; 0x90
 8007f8e:	3410      	adds	r4, #16
 8007f90:	2b07      	cmp	r3, #7
 8007f92:	9425      	str	r4, [sp, #148]	; 0x94
 8007f94:	e888 0044 	stmia.w	r8, {r2, r6}
 8007f98:	ddf1      	ble.n	8007f7e <_svfprintf_r+0x3ee>
 8007f9a:	aa23      	add	r2, sp, #140	; 0x8c
 8007f9c:	4659      	mov	r1, fp
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	f002 fdc4 	bl	800ab2c <__ssprint_r>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f47f aec5 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8007faa:	3d10      	subs	r5, #16
 8007fac:	2d10      	cmp	r5, #16
 8007fae:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8007fb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007fb2:	46c8      	mov	r8, r9
 8007fb4:	dce8      	bgt.n	8007f88 <_svfprintf_r+0x3f8>
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	4a53      	ldr	r2, [pc, #332]	; (8008108 <_svfprintf_r+0x578>)
 8007fba:	9324      	str	r3, [sp, #144]	; 0x90
 8007fbc:	442c      	add	r4, r5
 8007fbe:	2b07      	cmp	r3, #7
 8007fc0:	9425      	str	r4, [sp, #148]	; 0x94
 8007fc2:	e888 0024 	stmia.w	r8, {r2, r5}
 8007fc6:	dd08      	ble.n	8007fda <_svfprintf_r+0x44a>
 8007fc8:	aa23      	add	r2, sp, #140	; 0x8c
 8007fca:	9907      	ldr	r1, [sp, #28]
 8007fcc:	9808      	ldr	r0, [sp, #32]
 8007fce:	f002 fdad 	bl	800ab2c <__ssprint_r>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	f47f aeae 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8007fd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8007fda:	9b05      	ldr	r3, [sp, #20]
 8007fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fde:	9904      	ldr	r1, [sp, #16]
 8007fe0:	428a      	cmp	r2, r1
 8007fe2:	bfac      	ite	ge
 8007fe4:	189b      	addge	r3, r3, r2
 8007fe6:	185b      	addlt	r3, r3, r1
 8007fe8:	9305      	str	r3, [sp, #20]
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	f040 831b 	bne.w	8008626 <_svfprintf_r+0xa96>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9324      	str	r3, [sp, #144]	; 0x90
 8007ff4:	46c8      	mov	r8, r9
 8007ff6:	e5f2      	b.n	8007bde <_svfprintf_r+0x4e>
 8007ff8:	930d      	str	r3, [sp, #52]	; 0x34
 8007ffa:	f01b 0320 	ands.w	r3, fp, #32
 8007ffe:	f040 81de 	bne.w	80083be <_svfprintf_r+0x82e>
 8008002:	f01b 0210 	ands.w	r2, fp, #16
 8008006:	f040 842d 	bne.w	8008864 <_svfprintf_r+0xcd4>
 800800a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800800e:	f000 8429 	beq.w	8008864 <_svfprintf_r+0xcd4>
 8008012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008014:	4613      	mov	r3, r2
 8008016:	460a      	mov	r2, r1
 8008018:	3204      	adds	r2, #4
 800801a:	880c      	ldrh	r4, [r1, #0]
 800801c:	920b      	str	r2, [sp, #44]	; 0x2c
 800801e:	2500      	movs	r5, #0
 8008020:	e6a9      	b.n	8007d76 <_svfprintf_r+0x1e6>
 8008022:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008024:	930d      	str	r3, [sp, #52]	; 0x34
 8008026:	6816      	ldr	r6, [r2, #0]
 8008028:	2400      	movs	r4, #0
 800802a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 800802e:	1d15      	adds	r5, r2, #4
 8008030:	2e00      	cmp	r6, #0
 8008032:	f000 86b5 	beq.w	8008da0 <_svfprintf_r+0x1210>
 8008036:	9a06      	ldr	r2, [sp, #24]
 8008038:	1c53      	adds	r3, r2, #1
 800803a:	f000 8617 	beq.w	8008c6c <_svfprintf_r+0x10dc>
 800803e:	4621      	mov	r1, r4
 8008040:	4630      	mov	r0, r6
 8008042:	f7f8 f8f5 	bl	8000230 <memchr>
 8008046:	2800      	cmp	r0, #0
 8008048:	f000 8708 	beq.w	8008e5c <_svfprintf_r+0x12cc>
 800804c:	1b83      	subs	r3, r0, r6
 800804e:	930a      	str	r3, [sp, #40]	; 0x28
 8008050:	9406      	str	r4, [sp, #24]
 8008052:	950b      	str	r5, [sp, #44]	; 0x2c
 8008054:	f8cd b00c 	str.w	fp, [sp, #12]
 8008058:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	940e      	str	r4, [sp, #56]	; 0x38
 8008060:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008064:	e6ac      	b.n	8007dc0 <_svfprintf_r+0x230>
 8008066:	f89a 3000 	ldrb.w	r3, [sl]
 800806a:	2201      	movs	r2, #1
 800806c:	212b      	movs	r1, #43	; 0x2b
 800806e:	e5e7      	b.n	8007c40 <_svfprintf_r+0xb0>
 8008070:	f04b 0b20 	orr.w	fp, fp, #32
 8008074:	f89a 3000 	ldrb.w	r3, [sl]
 8008078:	e5e2      	b.n	8007c40 <_svfprintf_r+0xb0>
 800807a:	930d      	str	r3, [sp, #52]	; 0x34
 800807c:	2a00      	cmp	r2, #0
 800807e:	f040 87a4 	bne.w	8008fca <_svfprintf_r+0x143a>
 8008082:	4b23      	ldr	r3, [pc, #140]	; (8008110 <_svfprintf_r+0x580>)
 8008084:	9312      	str	r3, [sp, #72]	; 0x48
 8008086:	f01b 0f20 	tst.w	fp, #32
 800808a:	f040 8112 	bne.w	80082b2 <_svfprintf_r+0x722>
 800808e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008090:	f01b 0f10 	tst.w	fp, #16
 8008094:	4613      	mov	r3, r2
 8008096:	f040 83e0 	bne.w	800885a <_svfprintf_r+0xcca>
 800809a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800809e:	f000 83dc 	beq.w	800885a <_svfprintf_r+0xcca>
 80080a2:	3304      	adds	r3, #4
 80080a4:	8814      	ldrh	r4, [r2, #0]
 80080a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a8:	2500      	movs	r5, #0
 80080aa:	f01b 0f01 	tst.w	fp, #1
 80080ae:	f000 810d 	beq.w	80082cc <_svfprintf_r+0x73c>
 80080b2:	ea54 0305 	orrs.w	r3, r4, r5
 80080b6:	f000 8109 	beq.w	80082cc <_svfprintf_r+0x73c>
 80080ba:	2330      	movs	r3, #48	; 0x30
 80080bc:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80080c0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80080c4:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 80080c8:	f04b 0b02 	orr.w	fp, fp, #2
 80080cc:	2302      	movs	r3, #2
 80080ce:	e652      	b.n	8007d76 <_svfprintf_r+0x1e6>
 80080d0:	f89a 3000 	ldrb.w	r3, [sl]
 80080d4:	2900      	cmp	r1, #0
 80080d6:	f47f adb3 	bne.w	8007c40 <_svfprintf_r+0xb0>
 80080da:	2201      	movs	r2, #1
 80080dc:	2120      	movs	r1, #32
 80080de:	e5af      	b.n	8007c40 <_svfprintf_r+0xb0>
 80080e0:	f04b 0b01 	orr.w	fp, fp, #1
 80080e4:	f89a 3000 	ldrb.w	r3, [sl]
 80080e8:	e5aa      	b.n	8007c40 <_svfprintf_r+0xb0>
 80080ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	4618      	mov	r0, r3
 80080f2:	2800      	cmp	r0, #0
 80080f4:	4623      	mov	r3, r4
 80080f6:	f103 0304 	add.w	r3, r3, #4
 80080fa:	f6ff ae03 	blt.w	8007d04 <_svfprintf_r+0x174>
 80080fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008100:	f89a 3000 	ldrb.w	r3, [sl]
 8008104:	e59c      	b.n	8007c40 <_svfprintf_r+0xb0>
 8008106:	bf00      	nop
 8008108:	0800b874 	.word	0x0800b874
 800810c:	0800b884 	.word	0x0800b884
 8008110:	0800b854 	.word	0x0800b854
 8008114:	f04b 0b10 	orr.w	fp, fp, #16
 8008118:	f01b 0f20 	tst.w	fp, #32
 800811c:	930d      	str	r3, [sp, #52]	; 0x34
 800811e:	f43f ae1b 	beq.w	8007d58 <_svfprintf_r+0x1c8>
 8008122:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008124:	3507      	adds	r5, #7
 8008126:	f025 0307 	bic.w	r3, r5, #7
 800812a:	f103 0208 	add.w	r2, r3, #8
 800812e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008132:	920b      	str	r2, [sp, #44]	; 0x2c
 8008134:	2301      	movs	r3, #1
 8008136:	e61e      	b.n	8007d76 <_svfprintf_r+0x1e6>
 8008138:	f89a 3000 	ldrb.w	r3, [sl]
 800813c:	2b2a      	cmp	r3, #42	; 0x2a
 800813e:	f10a 0401 	add.w	r4, sl, #1
 8008142:	f000 8735 	beq.w	8008fb0 <_svfprintf_r+0x1420>
 8008146:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800814a:	2809      	cmp	r0, #9
 800814c:	46a2      	mov	sl, r4
 800814e:	f200 8691 	bhi.w	8008e74 <_svfprintf_r+0x12e4>
 8008152:	2300      	movs	r3, #0
 8008154:	461c      	mov	r4, r3
 8008156:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800815a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800815e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8008162:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008166:	2809      	cmp	r0, #9
 8008168:	d9f5      	bls.n	8008156 <_svfprintf_r+0x5c6>
 800816a:	9406      	str	r4, [sp, #24]
 800816c:	e56a      	b.n	8007c44 <_svfprintf_r+0xb4>
 800816e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008172:	f89a 3000 	ldrb.w	r3, [sl]
 8008176:	e563      	b.n	8007c40 <_svfprintf_r+0xb0>
 8008178:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800817c:	f89a 3000 	ldrb.w	r3, [sl]
 8008180:	e55e      	b.n	8007c40 <_svfprintf_r+0xb0>
 8008182:	f89a 3000 	ldrb.w	r3, [sl]
 8008186:	2b6c      	cmp	r3, #108	; 0x6c
 8008188:	bf03      	ittte	eq
 800818a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 800818e:	f04b 0b20 	orreq.w	fp, fp, #32
 8008192:	f10a 0a01 	addeq.w	sl, sl, #1
 8008196:	f04b 0b10 	orrne.w	fp, fp, #16
 800819a:	e551      	b.n	8007c40 <_svfprintf_r+0xb0>
 800819c:	2a00      	cmp	r2, #0
 800819e:	f040 8718 	bne.w	8008fd2 <_svfprintf_r+0x1442>
 80081a2:	f01b 0f20 	tst.w	fp, #32
 80081a6:	f040 8509 	bne.w	8008bbc <_svfprintf_r+0x102c>
 80081aa:	f01b 0f10 	tst.w	fp, #16
 80081ae:	f040 84bc 	bne.w	8008b2a <_svfprintf_r+0xf9a>
 80081b2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80081b6:	f000 84b8 	beq.w	8008b2a <_svfprintf_r+0xf9a>
 80081ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081bc:	6813      	ldr	r3, [r2, #0]
 80081be:	3204      	adds	r2, #4
 80081c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80081c2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80081c6:	801a      	strh	r2, [r3, #0]
 80081c8:	e509      	b.n	8007bde <_svfprintf_r+0x4e>
 80081ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081cc:	4bb9      	ldr	r3, [pc, #740]	; (80084b4 <_svfprintf_r+0x924>)
 80081ce:	680c      	ldr	r4, [r1, #0]
 80081d0:	9312      	str	r3, [sp, #72]	; 0x48
 80081d2:	2230      	movs	r2, #48	; 0x30
 80081d4:	2378      	movs	r3, #120	; 0x78
 80081d6:	3104      	adds	r1, #4
 80081d8:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 80081dc:	930d      	str	r3, [sp, #52]	; 0x34
 80081de:	f04b 0b02 	orr.w	fp, fp, #2
 80081e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80081e4:	2500      	movs	r5, #0
 80081e6:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
 80081ea:	2302      	movs	r3, #2
 80081ec:	e5c3      	b.n	8007d76 <_svfprintf_r+0x1e6>
 80081ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081f0:	930d      	str	r3, [sp, #52]	; 0x34
 80081f2:	680a      	ldr	r2, [r1, #0]
 80081f4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 80081f8:	2300      	movs	r3, #0
 80081fa:	460a      	mov	r2, r1
 80081fc:	461f      	mov	r7, r3
 80081fe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008202:	3204      	adds	r2, #4
 8008204:	2301      	movs	r3, #1
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	f8cd b00c 	str.w	fp, [sp, #12]
 800820c:	9706      	str	r7, [sp, #24]
 800820e:	970e      	str	r7, [sp, #56]	; 0x38
 8008210:	920b      	str	r2, [sp, #44]	; 0x2c
 8008212:	930a      	str	r3, [sp, #40]	; 0x28
 8008214:	ae26      	add	r6, sp, #152	; 0x98
 8008216:	e5d7      	b.n	8007dc8 <_svfprintf_r+0x238>
 8008218:	930d      	str	r3, [sp, #52]	; 0x34
 800821a:	2a00      	cmp	r2, #0
 800821c:	f040 86f8 	bne.w	8009010 <_svfprintf_r+0x1480>
 8008220:	f01b 0f20 	tst.w	fp, #32
 8008224:	d15d      	bne.n	80082e2 <_svfprintf_r+0x752>
 8008226:	f01b 0f10 	tst.w	fp, #16
 800822a:	f040 8335 	bne.w	8008898 <_svfprintf_r+0xd08>
 800822e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008232:	f000 8331 	beq.w	8008898 <_svfprintf_r+0xd08>
 8008236:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008238:	f9b1 4000 	ldrsh.w	r4, [r1]
 800823c:	3104      	adds	r1, #4
 800823e:	17e5      	asrs	r5, r4, #31
 8008240:	4622      	mov	r2, r4
 8008242:	462b      	mov	r3, r5
 8008244:	910b      	str	r1, [sp, #44]	; 0x2c
 8008246:	2a00      	cmp	r2, #0
 8008248:	f173 0300 	sbcs.w	r3, r3, #0
 800824c:	db58      	blt.n	8008300 <_svfprintf_r+0x770>
 800824e:	9906      	ldr	r1, [sp, #24]
 8008250:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008254:	1c4a      	adds	r2, r1, #1
 8008256:	f04f 0301 	mov.w	r3, #1
 800825a:	f47f ad93 	bne.w	8007d84 <_svfprintf_r+0x1f4>
 800825e:	ea54 0205 	orrs.w	r2, r4, r5
 8008262:	f000 81ec 	beq.w	800863e <_svfprintf_r+0xaae>
 8008266:	f8cd b00c 	str.w	fp, [sp, #12]
 800826a:	2b01      	cmp	r3, #1
 800826c:	f000 8283 	beq.w	8008776 <_svfprintf_r+0xbe6>
 8008270:	2b02      	cmp	r3, #2
 8008272:	f040 8213 	bne.w	800869c <_svfprintf_r+0xb0c>
 8008276:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008278:	464e      	mov	r6, r9
 800827a:	0923      	lsrs	r3, r4, #4
 800827c:	f004 010f 	and.w	r1, r4, #15
 8008280:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8008284:	092a      	lsrs	r2, r5, #4
 8008286:	461c      	mov	r4, r3
 8008288:	4615      	mov	r5, r2
 800828a:	5c43      	ldrb	r3, [r0, r1]
 800828c:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8008290:	ea54 0305 	orrs.w	r3, r4, r5
 8008294:	d1f1      	bne.n	800827a <_svfprintf_r+0x6ea>
 8008296:	eba9 0306 	sub.w	r3, r9, r6
 800829a:	930a      	str	r3, [sp, #40]	; 0x28
 800829c:	e588      	b.n	8007db0 <_svfprintf_r+0x220>
 800829e:	930d      	str	r3, [sp, #52]	; 0x34
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	f040 86b1 	bne.w	8009008 <_svfprintf_r+0x1478>
 80082a6:	4b84      	ldr	r3, [pc, #528]	; (80084b8 <_svfprintf_r+0x928>)
 80082a8:	9312      	str	r3, [sp, #72]	; 0x48
 80082aa:	f01b 0f20 	tst.w	fp, #32
 80082ae:	f43f aeee 	beq.w	800808e <_svfprintf_r+0x4fe>
 80082b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80082b4:	3507      	adds	r5, #7
 80082b6:	f025 0307 	bic.w	r3, r5, #7
 80082ba:	f103 0208 	add.w	r2, r3, #8
 80082be:	f01b 0f01 	tst.w	fp, #1
 80082c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80082c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80082c8:	f47f aef3 	bne.w	80080b2 <_svfprintf_r+0x522>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e552      	b.n	8007d76 <_svfprintf_r+0x1e6>
 80082d0:	930d      	str	r3, [sp, #52]	; 0x34
 80082d2:	2a00      	cmp	r2, #0
 80082d4:	f040 8694 	bne.w	8009000 <_svfprintf_r+0x1470>
 80082d8:	f04b 0b10 	orr.w	fp, fp, #16
 80082dc:	f01b 0f20 	tst.w	fp, #32
 80082e0:	d0a1      	beq.n	8008226 <_svfprintf_r+0x696>
 80082e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80082e4:	3507      	adds	r5, #7
 80082e6:	f025 0507 	bic.w	r5, r5, #7
 80082ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082ee:	2a00      	cmp	r2, #0
 80082f0:	f105 0108 	add.w	r1, r5, #8
 80082f4:	461d      	mov	r5, r3
 80082f6:	f173 0300 	sbcs.w	r3, r3, #0
 80082fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80082fc:	4614      	mov	r4, r2
 80082fe:	daa6      	bge.n	800824e <_svfprintf_r+0x6be>
 8008300:	272d      	movs	r7, #45	; 0x2d
 8008302:	4264      	negs	r4, r4
 8008304:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008308:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800830c:	2301      	movs	r3, #1
 800830e:	e535      	b.n	8007d7c <_svfprintf_r+0x1ec>
 8008310:	930d      	str	r3, [sp, #52]	; 0x34
 8008312:	2a00      	cmp	r2, #0
 8008314:	f040 8670 	bne.w	8008ff8 <_svfprintf_r+0x1468>
 8008318:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800831a:	f01b 0f08 	tst.w	fp, #8
 800831e:	f105 0507 	add.w	r5, r5, #7
 8008322:	f000 83e8 	beq.w	8008af6 <_svfprintf_r+0xf66>
 8008326:	f025 0307 	bic.w	r3, r5, #7
 800832a:	ed93 7b00 	vldr	d7, [r3]
 800832e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008332:	f103 0208 	add.w	r2, r3, #8
 8008336:	920b      	str	r2, [sp, #44]	; 0x2c
 8008338:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 800833c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008340:	9116      	str	r1, [sp, #88]	; 0x58
 8008342:	9317      	str	r3, [sp, #92]	; 0x5c
 8008344:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8008348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	4b5a      	ldr	r3, [pc, #360]	; (80084bc <_svfprintf_r+0x92c>)
 8008352:	f7f8 fd35 	bl	8000dc0 <__aeabi_dcmpun>
 8008356:	2800      	cmp	r0, #0
 8008358:	f040 834f 	bne.w	80089fa <_svfprintf_r+0xe6a>
 800835c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008360:	4b56      	ldr	r3, [pc, #344]	; (80084bc <_svfprintf_r+0x92c>)
 8008362:	4620      	mov	r0, r4
 8008364:	4629      	mov	r1, r5
 8008366:	f7f8 fd0d 	bl	8000d84 <__aeabi_dcmple>
 800836a:	2800      	cmp	r0, #0
 800836c:	f040 8345 	bne.w	80089fa <_svfprintf_r+0xe6a>
 8008370:	2200      	movs	r2, #0
 8008372:	2300      	movs	r3, #0
 8008374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008378:	f7f8 fcfa 	bl	8000d70 <__aeabi_dcmplt>
 800837c:	2800      	cmp	r0, #0
 800837e:	f040 8533 	bne.w	8008de8 <_svfprintf_r+0x1258>
 8008382:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008386:	4e4e      	ldr	r6, [pc, #312]	; (80084c0 <_svfprintf_r+0x930>)
 8008388:	4b4e      	ldr	r3, [pc, #312]	; (80084c4 <_svfprintf_r+0x934>)
 800838a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
 800838e:	9003      	str	r0, [sp, #12]
 8008390:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008392:	2203      	movs	r2, #3
 8008394:	2100      	movs	r1, #0
 8008396:	9204      	str	r2, [sp, #16]
 8008398:	9106      	str	r1, [sp, #24]
 800839a:	2847      	cmp	r0, #71	; 0x47
 800839c:	bfd8      	it	le
 800839e:	461e      	movle	r6, r3
 80083a0:	920a      	str	r2, [sp, #40]	; 0x28
 80083a2:	910e      	str	r1, [sp, #56]	; 0x38
 80083a4:	e50c      	b.n	8007dc0 <_svfprintf_r+0x230>
 80083a6:	f04b 0b08 	orr.w	fp, fp, #8
 80083aa:	f89a 3000 	ldrb.w	r3, [sl]
 80083ae:	e447      	b.n	8007c40 <_svfprintf_r+0xb0>
 80083b0:	f04b 0b10 	orr.w	fp, fp, #16
 80083b4:	930d      	str	r3, [sp, #52]	; 0x34
 80083b6:	f01b 0320 	ands.w	r3, fp, #32
 80083ba:	f43f ae22 	beq.w	8008002 <_svfprintf_r+0x472>
 80083be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80083c0:	3507      	adds	r5, #7
 80083c2:	f025 0307 	bic.w	r3, r5, #7
 80083c6:	f103 0208 	add.w	r2, r3, #8
 80083ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80083ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80083d0:	2300      	movs	r3, #0
 80083d2:	e4d0      	b.n	8007d76 <_svfprintf_r+0x1e6>
 80083d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80083d8:	2300      	movs	r3, #0
 80083da:	461c      	mov	r4, r3
 80083dc:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80083e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80083e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80083e8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80083ec:	2809      	cmp	r0, #9
 80083ee:	d9f5      	bls.n	80083dc <_svfprintf_r+0x84c>
 80083f0:	9409      	str	r4, [sp, #36]	; 0x24
 80083f2:	e427      	b.n	8007c44 <_svfprintf_r+0xb4>
 80083f4:	930d      	str	r3, [sp, #52]	; 0x34
 80083f6:	2a00      	cmp	r2, #0
 80083f8:	f040 85ef 	bne.w	8008fda <_svfprintf_r+0x144a>
 80083fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083fe:	2a00      	cmp	r2, #0
 8008400:	f43f ac91 	beq.w	8007d26 <_svfprintf_r+0x196>
 8008404:	2300      	movs	r3, #0
 8008406:	2101      	movs	r1, #1
 8008408:	461f      	mov	r7, r3
 800840a:	9104      	str	r1, [sp, #16]
 800840c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8008410:	f8cd b00c 	str.w	fp, [sp, #12]
 8008414:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008418:	9306      	str	r3, [sp, #24]
 800841a:	930e      	str	r3, [sp, #56]	; 0x38
 800841c:	910a      	str	r1, [sp, #40]	; 0x28
 800841e:	ae26      	add	r6, sp, #152	; 0x98
 8008420:	e4d2      	b.n	8007dc8 <_svfprintf_r+0x238>
 8008422:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008424:	e529      	b.n	8007e7a <_svfprintf_r+0x2ea>
 8008426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008428:	2b65      	cmp	r3, #101	; 0x65
 800842a:	f340 80a9 	ble.w	8008580 <_svfprintf_r+0x9f0>
 800842e:	2200      	movs	r2, #0
 8008430:	2300      	movs	r3, #0
 8008432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008436:	f7f8 fc91 	bl	8000d5c <__aeabi_dcmpeq>
 800843a:	2800      	cmp	r0, #0
 800843c:	f000 8152 	beq.w	80086e4 <_svfprintf_r+0xb54>
 8008440:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008442:	4a21      	ldr	r2, [pc, #132]	; (80084c8 <_svfprintf_r+0x938>)
 8008444:	f8c8 2000 	str.w	r2, [r8]
 8008448:	3301      	adds	r3, #1
 800844a:	3401      	adds	r4, #1
 800844c:	2201      	movs	r2, #1
 800844e:	2b07      	cmp	r3, #7
 8008450:	9425      	str	r4, [sp, #148]	; 0x94
 8008452:	9324      	str	r3, [sp, #144]	; 0x90
 8008454:	f8c8 2004 	str.w	r2, [r8, #4]
 8008458:	f300 836f 	bgt.w	8008b3a <_svfprintf_r+0xfaa>
 800845c:	f108 0808 	add.w	r8, r8, #8
 8008460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008462:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008464:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008466:	4293      	cmp	r3, r2
 8008468:	db03      	blt.n	8008472 <_svfprintf_r+0x8e2>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	07dd      	lsls	r5, r3, #31
 800846e:	f57f ad76 	bpl.w	8007f5e <_svfprintf_r+0x3ce>
 8008472:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008474:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008476:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008478:	f8c8 2000 	str.w	r2, [r8]
 800847c:	3301      	adds	r3, #1
 800847e:	440c      	add	r4, r1
 8008480:	2b07      	cmp	r3, #7
 8008482:	f8c8 1004 	str.w	r1, [r8, #4]
 8008486:	9425      	str	r4, [sp, #148]	; 0x94
 8008488:	9324      	str	r3, [sp, #144]	; 0x90
 800848a:	f300 83a3 	bgt.w	8008bd4 <_svfprintf_r+0x1044>
 800848e:	f108 0808 	add.w	r8, r8, #8
 8008492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008494:	1e5e      	subs	r6, r3, #1
 8008496:	2e00      	cmp	r6, #0
 8008498:	f77f ad61 	ble.w	8007f5e <_svfprintf_r+0x3ce>
 800849c:	2e10      	cmp	r6, #16
 800849e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80084a0:	4d0a      	ldr	r5, [pc, #40]	; (80084cc <_svfprintf_r+0x93c>)
 80084a2:	f340 81ef 	ble.w	8008884 <_svfprintf_r+0xcf4>
 80084a6:	4622      	mov	r2, r4
 80084a8:	2710      	movs	r7, #16
 80084aa:	f8dd b020 	ldr.w	fp, [sp, #32]
 80084ae:	9c07      	ldr	r4, [sp, #28]
 80084b0:	e014      	b.n	80084dc <_svfprintf_r+0x94c>
 80084b2:	bf00      	nop
 80084b4:	0800b854 	.word	0x0800b854
 80084b8:	0800b840 	.word	0x0800b840
 80084bc:	7fefffff 	.word	0x7fefffff
 80084c0:	0800b834 	.word	0x0800b834
 80084c4:	0800b830 	.word	0x0800b830
 80084c8:	0800b870 	.word	0x0800b870
 80084cc:	0800b884 	.word	0x0800b884
 80084d0:	f108 0808 	add.w	r8, r8, #8
 80084d4:	3e10      	subs	r6, #16
 80084d6:	2e10      	cmp	r6, #16
 80084d8:	f340 81d3 	ble.w	8008882 <_svfprintf_r+0xcf2>
 80084dc:	3301      	adds	r3, #1
 80084de:	3210      	adds	r2, #16
 80084e0:	2b07      	cmp	r3, #7
 80084e2:	9225      	str	r2, [sp, #148]	; 0x94
 80084e4:	9324      	str	r3, [sp, #144]	; 0x90
 80084e6:	e888 00a0 	stmia.w	r8, {r5, r7}
 80084ea:	ddf1      	ble.n	80084d0 <_svfprintf_r+0x940>
 80084ec:	aa23      	add	r2, sp, #140	; 0x8c
 80084ee:	4621      	mov	r1, r4
 80084f0:	4658      	mov	r0, fp
 80084f2:	f002 fb1b 	bl	800ab2c <__ssprint_r>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f47f ac1c 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 80084fc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80084fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008500:	46c8      	mov	r8, r9
 8008502:	e7e7      	b.n	80084d4 <_svfprintf_r+0x944>
 8008504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008506:	9a04      	ldr	r2, [sp, #16]
 8008508:	1a9f      	subs	r7, r3, r2
 800850a:	2f00      	cmp	r7, #0
 800850c:	f77f acd8 	ble.w	8007ec0 <_svfprintf_r+0x330>
 8008510:	2f10      	cmp	r7, #16
 8008512:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008514:	4db7      	ldr	r5, [pc, #732]	; (80087f4 <_svfprintf_r+0xc64>)
 8008516:	dd27      	ble.n	8008568 <_svfprintf_r+0x9d8>
 8008518:	4642      	mov	r2, r8
 800851a:	4621      	mov	r1, r4
 800851c:	46b0      	mov	r8, r6
 800851e:	f04f 0b10 	mov.w	fp, #16
 8008522:	462e      	mov	r6, r5
 8008524:	9c08      	ldr	r4, [sp, #32]
 8008526:	9d07      	ldr	r5, [sp, #28]
 8008528:	e004      	b.n	8008534 <_svfprintf_r+0x9a4>
 800852a:	3f10      	subs	r7, #16
 800852c:	2f10      	cmp	r7, #16
 800852e:	f102 0208 	add.w	r2, r2, #8
 8008532:	dd15      	ble.n	8008560 <_svfprintf_r+0x9d0>
 8008534:	3301      	adds	r3, #1
 8008536:	3110      	adds	r1, #16
 8008538:	2b07      	cmp	r3, #7
 800853a:	9125      	str	r1, [sp, #148]	; 0x94
 800853c:	9324      	str	r3, [sp, #144]	; 0x90
 800853e:	e882 0840 	stmia.w	r2, {r6, fp}
 8008542:	ddf2      	ble.n	800852a <_svfprintf_r+0x99a>
 8008544:	aa23      	add	r2, sp, #140	; 0x8c
 8008546:	4629      	mov	r1, r5
 8008548:	4620      	mov	r0, r4
 800854a:	f002 faef 	bl	800ab2c <__ssprint_r>
 800854e:	2800      	cmp	r0, #0
 8008550:	f47f abf0 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008554:	3f10      	subs	r7, #16
 8008556:	2f10      	cmp	r7, #16
 8008558:	9925      	ldr	r1, [sp, #148]	; 0x94
 800855a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800855c:	464a      	mov	r2, r9
 800855e:	dce9      	bgt.n	8008534 <_svfprintf_r+0x9a4>
 8008560:	4635      	mov	r5, r6
 8008562:	460c      	mov	r4, r1
 8008564:	4646      	mov	r6, r8
 8008566:	4690      	mov	r8, r2
 8008568:	3301      	adds	r3, #1
 800856a:	443c      	add	r4, r7
 800856c:	2b07      	cmp	r3, #7
 800856e:	9425      	str	r4, [sp, #148]	; 0x94
 8008570:	9324      	str	r3, [sp, #144]	; 0x90
 8008572:	e888 00a0 	stmia.w	r8, {r5, r7}
 8008576:	f300 8234 	bgt.w	80089e2 <_svfprintf_r+0xe52>
 800857a:	f108 0808 	add.w	r8, r8, #8
 800857e:	e49f      	b.n	8007ec0 <_svfprintf_r+0x330>
 8008580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008582:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8008584:	2b01      	cmp	r3, #1
 8008586:	f340 8200 	ble.w	800898a <_svfprintf_r+0xdfa>
 800858a:	3701      	adds	r7, #1
 800858c:	3401      	adds	r4, #1
 800858e:	2301      	movs	r3, #1
 8008590:	2f07      	cmp	r7, #7
 8008592:	9425      	str	r4, [sp, #148]	; 0x94
 8008594:	9724      	str	r7, [sp, #144]	; 0x90
 8008596:	f8c8 6000 	str.w	r6, [r8]
 800859a:	f8c8 3004 	str.w	r3, [r8, #4]
 800859e:	f300 8205 	bgt.w	80089ac <_svfprintf_r+0xe1c>
 80085a2:	f108 0808 	add.w	r8, r8, #8
 80085a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085aa:	f8c8 3000 	str.w	r3, [r8]
 80085ae:	3701      	adds	r7, #1
 80085b0:	4414      	add	r4, r2
 80085b2:	2f07      	cmp	r7, #7
 80085b4:	9425      	str	r4, [sp, #148]	; 0x94
 80085b6:	9724      	str	r7, [sp, #144]	; 0x90
 80085b8:	f8c8 2004 	str.w	r2, [r8, #4]
 80085bc:	f300 8202 	bgt.w	80089c4 <_svfprintf_r+0xe34>
 80085c0:	f108 0808 	add.w	r8, r8, #8
 80085c4:	2300      	movs	r3, #0
 80085c6:	2200      	movs	r2, #0
 80085c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085cc:	f7f8 fbc6 	bl	8000d5c <__aeabi_dcmpeq>
 80085d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f040 8101 	bne.w	80087da <_svfprintf_r+0xc4a>
 80085d8:	3b01      	subs	r3, #1
 80085da:	3701      	adds	r7, #1
 80085dc:	3601      	adds	r6, #1
 80085de:	441c      	add	r4, r3
 80085e0:	2f07      	cmp	r7, #7
 80085e2:	9724      	str	r7, [sp, #144]	; 0x90
 80085e4:	9425      	str	r4, [sp, #148]	; 0x94
 80085e6:	f8c8 6000 	str.w	r6, [r8]
 80085ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80085ee:	f300 8128 	bgt.w	8008842 <_svfprintf_r+0xcb2>
 80085f2:	f108 0808 	add.w	r8, r8, #8
 80085f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085f8:	f8c8 2004 	str.w	r2, [r8, #4]
 80085fc:	3701      	adds	r7, #1
 80085fe:	4414      	add	r4, r2
 8008600:	ab1f      	add	r3, sp, #124	; 0x7c
 8008602:	2f07      	cmp	r7, #7
 8008604:	9425      	str	r4, [sp, #148]	; 0x94
 8008606:	9724      	str	r7, [sp, #144]	; 0x90
 8008608:	f8c8 3000 	str.w	r3, [r8]
 800860c:	f77f aca5 	ble.w	8007f5a <_svfprintf_r+0x3ca>
 8008610:	aa23      	add	r2, sp, #140	; 0x8c
 8008612:	9907      	ldr	r1, [sp, #28]
 8008614:	9808      	ldr	r0, [sp, #32]
 8008616:	f002 fa89 	bl	800ab2c <__ssprint_r>
 800861a:	2800      	cmp	r0, #0
 800861c:	f47f ab8a 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008620:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008622:	46c8      	mov	r8, r9
 8008624:	e49b      	b.n	8007f5e <_svfprintf_r+0x3ce>
 8008626:	aa23      	add	r2, sp, #140	; 0x8c
 8008628:	9907      	ldr	r1, [sp, #28]
 800862a:	9808      	ldr	r0, [sp, #32]
 800862c:	f002 fa7e 	bl	800ab2c <__ssprint_r>
 8008630:	2800      	cmp	r0, #0
 8008632:	f43f acdd 	beq.w	8007ff0 <_svfprintf_r+0x460>
 8008636:	f7ff bb7d 	b.w	8007d34 <_svfprintf_r+0x1a4>
 800863a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800863e:	2b01      	cmp	r3, #1
 8008640:	f000 8135 	beq.w	80088ae <_svfprintf_r+0xd1e>
 8008644:	2b02      	cmp	r3, #2
 8008646:	d125      	bne.n	8008694 <_svfprintf_r+0xb04>
 8008648:	f8cd b00c 	str.w	fp, [sp, #12]
 800864c:	2400      	movs	r4, #0
 800864e:	2500      	movs	r5, #0
 8008650:	e611      	b.n	8008276 <_svfprintf_r+0x6e6>
 8008652:	aa23      	add	r2, sp, #140	; 0x8c
 8008654:	9907      	ldr	r1, [sp, #28]
 8008656:	9808      	ldr	r0, [sp, #32]
 8008658:	f002 fa68 	bl	800ab2c <__ssprint_r>
 800865c:	2800      	cmp	r0, #0
 800865e:	f47f ab69 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008662:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008664:	46c8      	mov	r8, r9
 8008666:	e467      	b.n	8007f38 <_svfprintf_r+0x3a8>
 8008668:	aa23      	add	r2, sp, #140	; 0x8c
 800866a:	9907      	ldr	r1, [sp, #28]
 800866c:	9808      	ldr	r0, [sp, #32]
 800866e:	f002 fa5d 	bl	800ab2c <__ssprint_r>
 8008672:	2800      	cmp	r0, #0
 8008674:	f47f ab5e 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008678:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800867a:	46c8      	mov	r8, r9
 800867c:	e41d      	b.n	8007eba <_svfprintf_r+0x32a>
 800867e:	aa23      	add	r2, sp, #140	; 0x8c
 8008680:	9907      	ldr	r1, [sp, #28]
 8008682:	9808      	ldr	r0, [sp, #32]
 8008684:	f002 fa52 	bl	800ab2c <__ssprint_r>
 8008688:	2800      	cmp	r0, #0
 800868a:	f47f ab53 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 800868e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008690:	46c8      	mov	r8, r9
 8008692:	e402      	b.n	8007e9a <_svfprintf_r+0x30a>
 8008694:	f8cd b00c 	str.w	fp, [sp, #12]
 8008698:	2400      	movs	r4, #0
 800869a:	2500      	movs	r5, #0
 800869c:	4649      	mov	r1, r9
 800869e:	e000      	b.n	80086a2 <_svfprintf_r+0xb12>
 80086a0:	4631      	mov	r1, r6
 80086a2:	08e2      	lsrs	r2, r4, #3
 80086a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80086a8:	08e8      	lsrs	r0, r5, #3
 80086aa:	f004 0307 	and.w	r3, r4, #7
 80086ae:	4605      	mov	r5, r0
 80086b0:	4614      	mov	r4, r2
 80086b2:	3330      	adds	r3, #48	; 0x30
 80086b4:	ea54 0205 	orrs.w	r2, r4, r5
 80086b8:	f801 3c01 	strb.w	r3, [r1, #-1]
 80086bc:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 80086c0:	d1ee      	bne.n	80086a0 <_svfprintf_r+0xb10>
 80086c2:	9a03      	ldr	r2, [sp, #12]
 80086c4:	07d2      	lsls	r2, r2, #31
 80086c6:	f57f ade6 	bpl.w	8008296 <_svfprintf_r+0x706>
 80086ca:	2b30      	cmp	r3, #48	; 0x30
 80086cc:	f43f ade3 	beq.w	8008296 <_svfprintf_r+0x706>
 80086d0:	3902      	subs	r1, #2
 80086d2:	2330      	movs	r3, #48	; 0x30
 80086d4:	f806 3c01 	strb.w	r3, [r6, #-1]
 80086d8:	eba9 0301 	sub.w	r3, r9, r1
 80086dc:	930a      	str	r3, [sp, #40]	; 0x28
 80086de:	460e      	mov	r6, r1
 80086e0:	f7ff bb66 	b.w	8007db0 <_svfprintf_r+0x220>
 80086e4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80086e6:	2900      	cmp	r1, #0
 80086e8:	f340 8231 	ble.w	8008b4e <_svfprintf_r+0xfbe>
 80086ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086f0:	4293      	cmp	r3, r2
 80086f2:	bfa8      	it	ge
 80086f4:	4613      	movge	r3, r2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	461f      	mov	r7, r3
 80086fa:	dd0d      	ble.n	8008718 <_svfprintf_r+0xb88>
 80086fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086fe:	f8c8 6000 	str.w	r6, [r8]
 8008702:	3301      	adds	r3, #1
 8008704:	443c      	add	r4, r7
 8008706:	2b07      	cmp	r3, #7
 8008708:	9425      	str	r4, [sp, #148]	; 0x94
 800870a:	f8c8 7004 	str.w	r7, [r8, #4]
 800870e:	9324      	str	r3, [sp, #144]	; 0x90
 8008710:	f300 8321 	bgt.w	8008d56 <_svfprintf_r+0x11c6>
 8008714:	f108 0808 	add.w	r8, r8, #8
 8008718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800871a:	2f00      	cmp	r7, #0
 800871c:	bfa8      	it	ge
 800871e:	1bdb      	subge	r3, r3, r7
 8008720:	2b00      	cmp	r3, #0
 8008722:	461f      	mov	r7, r3
 8008724:	f340 80d7 	ble.w	80088d6 <_svfprintf_r+0xd46>
 8008728:	2f10      	cmp	r7, #16
 800872a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800872c:	4d31      	ldr	r5, [pc, #196]	; (80087f4 <_svfprintf_r+0xc64>)
 800872e:	f340 81f0 	ble.w	8008b12 <_svfprintf_r+0xf82>
 8008732:	4642      	mov	r2, r8
 8008734:	4621      	mov	r1, r4
 8008736:	46b0      	mov	r8, r6
 8008738:	f04f 0b10 	mov.w	fp, #16
 800873c:	462e      	mov	r6, r5
 800873e:	9c08      	ldr	r4, [sp, #32]
 8008740:	9d07      	ldr	r5, [sp, #28]
 8008742:	e004      	b.n	800874e <_svfprintf_r+0xbbe>
 8008744:	3208      	adds	r2, #8
 8008746:	3f10      	subs	r7, #16
 8008748:	2f10      	cmp	r7, #16
 800874a:	f340 81de 	ble.w	8008b0a <_svfprintf_r+0xf7a>
 800874e:	3301      	adds	r3, #1
 8008750:	3110      	adds	r1, #16
 8008752:	2b07      	cmp	r3, #7
 8008754:	9125      	str	r1, [sp, #148]	; 0x94
 8008756:	9324      	str	r3, [sp, #144]	; 0x90
 8008758:	e882 0840 	stmia.w	r2, {r6, fp}
 800875c:	ddf2      	ble.n	8008744 <_svfprintf_r+0xbb4>
 800875e:	aa23      	add	r2, sp, #140	; 0x8c
 8008760:	4629      	mov	r1, r5
 8008762:	4620      	mov	r0, r4
 8008764:	f002 f9e2 	bl	800ab2c <__ssprint_r>
 8008768:	2800      	cmp	r0, #0
 800876a:	f47f aae3 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 800876e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008770:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008772:	464a      	mov	r2, r9
 8008774:	e7e7      	b.n	8008746 <_svfprintf_r+0xbb6>
 8008776:	2d00      	cmp	r5, #0
 8008778:	bf08      	it	eq
 800877a:	2c0a      	cmpeq	r4, #10
 800877c:	f0c0 8095 	bcc.w	80088aa <_svfprintf_r+0xd1a>
 8008780:	464e      	mov	r6, r9
 8008782:	4620      	mov	r0, r4
 8008784:	4629      	mov	r1, r5
 8008786:	220a      	movs	r2, #10
 8008788:	2300      	movs	r3, #0
 800878a:	f7f8 fba7 	bl	8000edc <__aeabi_uldivmod>
 800878e:	3230      	adds	r2, #48	; 0x30
 8008790:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8008794:	4620      	mov	r0, r4
 8008796:	4629      	mov	r1, r5
 8008798:	2300      	movs	r3, #0
 800879a:	220a      	movs	r2, #10
 800879c:	f7f8 fb9e 	bl	8000edc <__aeabi_uldivmod>
 80087a0:	4604      	mov	r4, r0
 80087a2:	460d      	mov	r5, r1
 80087a4:	ea54 0305 	orrs.w	r3, r4, r5
 80087a8:	d1eb      	bne.n	8008782 <_svfprintf_r+0xbf2>
 80087aa:	eba9 0306 	sub.w	r3, r9, r6
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	f7ff bafe 	b.w	8007db0 <_svfprintf_r+0x220>
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	930a      	str	r3, [sp, #40]	; 0x28
 80087b8:	464e      	mov	r6, r9
 80087ba:	f7ff baf9 	b.w	8007db0 <_svfprintf_r+0x220>
 80087be:	aa23      	add	r2, sp, #140	; 0x8c
 80087c0:	9907      	ldr	r1, [sp, #28]
 80087c2:	9808      	ldr	r0, [sp, #32]
 80087c4:	f002 f9b2 	bl	800ab2c <__ssprint_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	f47f aab3 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 80087ce:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80087d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80087d4:	46c8      	mov	r8, r9
 80087d6:	f7ff bb50 	b.w	8007e7a <_svfprintf_r+0x2ea>
 80087da:	1e5e      	subs	r6, r3, #1
 80087dc:	2e00      	cmp	r6, #0
 80087de:	f77f af0a 	ble.w	80085f6 <_svfprintf_r+0xa66>
 80087e2:	2e10      	cmp	r6, #16
 80087e4:	4d03      	ldr	r5, [pc, #12]	; (80087f4 <_svfprintf_r+0xc64>)
 80087e6:	dd23      	ble.n	8008830 <_svfprintf_r+0xca0>
 80087e8:	4622      	mov	r2, r4
 80087ea:	f04f 0b10 	mov.w	fp, #16
 80087ee:	9c08      	ldr	r4, [sp, #32]
 80087f0:	e007      	b.n	8008802 <_svfprintf_r+0xc72>
 80087f2:	bf00      	nop
 80087f4:	0800b884 	.word	0x0800b884
 80087f8:	3e10      	subs	r6, #16
 80087fa:	2e10      	cmp	r6, #16
 80087fc:	f108 0808 	add.w	r8, r8, #8
 8008800:	dd15      	ble.n	800882e <_svfprintf_r+0xc9e>
 8008802:	3701      	adds	r7, #1
 8008804:	3210      	adds	r2, #16
 8008806:	2f07      	cmp	r7, #7
 8008808:	9225      	str	r2, [sp, #148]	; 0x94
 800880a:	9724      	str	r7, [sp, #144]	; 0x90
 800880c:	e888 0820 	stmia.w	r8, {r5, fp}
 8008810:	ddf2      	ble.n	80087f8 <_svfprintf_r+0xc68>
 8008812:	aa23      	add	r2, sp, #140	; 0x8c
 8008814:	9907      	ldr	r1, [sp, #28]
 8008816:	4620      	mov	r0, r4
 8008818:	f002 f988 	bl	800ab2c <__ssprint_r>
 800881c:	2800      	cmp	r0, #0
 800881e:	f47f aa89 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008822:	3e10      	subs	r6, #16
 8008824:	2e10      	cmp	r6, #16
 8008826:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008828:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800882a:	46c8      	mov	r8, r9
 800882c:	dce9      	bgt.n	8008802 <_svfprintf_r+0xc72>
 800882e:	4614      	mov	r4, r2
 8008830:	3701      	adds	r7, #1
 8008832:	4434      	add	r4, r6
 8008834:	2f07      	cmp	r7, #7
 8008836:	9425      	str	r4, [sp, #148]	; 0x94
 8008838:	9724      	str	r7, [sp, #144]	; 0x90
 800883a:	e888 0060 	stmia.w	r8, {r5, r6}
 800883e:	f77f aed8 	ble.w	80085f2 <_svfprintf_r+0xa62>
 8008842:	aa23      	add	r2, sp, #140	; 0x8c
 8008844:	9907      	ldr	r1, [sp, #28]
 8008846:	9808      	ldr	r0, [sp, #32]
 8008848:	f002 f970 	bl	800ab2c <__ssprint_r>
 800884c:	2800      	cmp	r0, #0
 800884e:	f47f aa71 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008852:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008854:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8008856:	46c8      	mov	r8, r9
 8008858:	e6cd      	b.n	80085f6 <_svfprintf_r+0xa66>
 800885a:	681c      	ldr	r4, [r3, #0]
 800885c:	3304      	adds	r3, #4
 800885e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008860:	2500      	movs	r5, #0
 8008862:	e422      	b.n	80080aa <_svfprintf_r+0x51a>
 8008864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008866:	460a      	mov	r2, r1
 8008868:	3204      	adds	r2, #4
 800886a:	680c      	ldr	r4, [r1, #0]
 800886c:	920b      	str	r2, [sp, #44]	; 0x2c
 800886e:	2500      	movs	r5, #0
 8008870:	f7ff ba81 	b.w	8007d76 <_svfprintf_r+0x1e6>
 8008874:	3204      	adds	r2, #4
 8008876:	681c      	ldr	r4, [r3, #0]
 8008878:	920b      	str	r2, [sp, #44]	; 0x2c
 800887a:	2301      	movs	r3, #1
 800887c:	2500      	movs	r5, #0
 800887e:	f7ff ba7a 	b.w	8007d76 <_svfprintf_r+0x1e6>
 8008882:	4614      	mov	r4, r2
 8008884:	3301      	adds	r3, #1
 8008886:	4434      	add	r4, r6
 8008888:	2b07      	cmp	r3, #7
 800888a:	9425      	str	r4, [sp, #148]	; 0x94
 800888c:	9324      	str	r3, [sp, #144]	; 0x90
 800888e:	e888 0060 	stmia.w	r8, {r5, r6}
 8008892:	f77f ab62 	ble.w	8007f5a <_svfprintf_r+0x3ca>
 8008896:	e6bb      	b.n	8008610 <_svfprintf_r+0xa80>
 8008898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800889a:	6814      	ldr	r4, [r2, #0]
 800889c:	4613      	mov	r3, r2
 800889e:	3304      	adds	r3, #4
 80088a0:	17e5      	asrs	r5, r4, #31
 80088a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088a4:	4622      	mov	r2, r4
 80088a6:	462b      	mov	r3, r5
 80088a8:	e4cd      	b.n	8008246 <_svfprintf_r+0x6b6>
 80088aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80088ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80088b2:	ae40      	add	r6, sp, #256	; 0x100
 80088b4:	3430      	adds	r4, #48	; 0x30
 80088b6:	2301      	movs	r3, #1
 80088b8:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80088bc:	930a      	str	r3, [sp, #40]	; 0x28
 80088be:	f7ff ba77 	b.w	8007db0 <_svfprintf_r+0x220>
 80088c2:	aa23      	add	r2, sp, #140	; 0x8c
 80088c4:	9907      	ldr	r1, [sp, #28]
 80088c6:	9808      	ldr	r0, [sp, #32]
 80088c8:	f002 f930 	bl	800ab2c <__ssprint_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f47f aa31 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 80088d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80088d4:	46c8      	mov	r8, r9
 80088d6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80088d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088da:	429a      	cmp	r2, r3
 80088dc:	db44      	blt.n	8008968 <_svfprintf_r+0xdd8>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	07d9      	lsls	r1, r3, #31
 80088e2:	d441      	bmi.n	8008968 <_svfprintf_r+0xdd8>
 80088e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80088e8:	1a9a      	subs	r2, r3, r2
 80088ea:	1a1d      	subs	r5, r3, r0
 80088ec:	4295      	cmp	r5, r2
 80088ee:	bfa8      	it	ge
 80088f0:	4615      	movge	r5, r2
 80088f2:	2d00      	cmp	r5, #0
 80088f4:	dd0e      	ble.n	8008914 <_svfprintf_r+0xd84>
 80088f6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80088f8:	f8c8 5004 	str.w	r5, [r8, #4]
 80088fc:	3101      	adds	r1, #1
 80088fe:	4406      	add	r6, r0
 8008900:	442c      	add	r4, r5
 8008902:	2907      	cmp	r1, #7
 8008904:	f8c8 6000 	str.w	r6, [r8]
 8008908:	9425      	str	r4, [sp, #148]	; 0x94
 800890a:	9124      	str	r1, [sp, #144]	; 0x90
 800890c:	f300 823a 	bgt.w	8008d84 <_svfprintf_r+0x11f4>
 8008910:	f108 0808 	add.w	r8, r8, #8
 8008914:	2d00      	cmp	r5, #0
 8008916:	bfac      	ite	ge
 8008918:	1b56      	subge	r6, r2, r5
 800891a:	4616      	movlt	r6, r2
 800891c:	2e00      	cmp	r6, #0
 800891e:	f77f ab1e 	ble.w	8007f5e <_svfprintf_r+0x3ce>
 8008922:	2e10      	cmp	r6, #16
 8008924:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008926:	4db1      	ldr	r5, [pc, #708]	; (8008bec <_svfprintf_r+0x105c>)
 8008928:	ddac      	ble.n	8008884 <_svfprintf_r+0xcf4>
 800892a:	4622      	mov	r2, r4
 800892c:	2710      	movs	r7, #16
 800892e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008932:	9c07      	ldr	r4, [sp, #28]
 8008934:	e004      	b.n	8008940 <_svfprintf_r+0xdb0>
 8008936:	f108 0808 	add.w	r8, r8, #8
 800893a:	3e10      	subs	r6, #16
 800893c:	2e10      	cmp	r6, #16
 800893e:	dda0      	ble.n	8008882 <_svfprintf_r+0xcf2>
 8008940:	3301      	adds	r3, #1
 8008942:	3210      	adds	r2, #16
 8008944:	2b07      	cmp	r3, #7
 8008946:	9225      	str	r2, [sp, #148]	; 0x94
 8008948:	9324      	str	r3, [sp, #144]	; 0x90
 800894a:	e888 00a0 	stmia.w	r8, {r5, r7}
 800894e:	ddf2      	ble.n	8008936 <_svfprintf_r+0xda6>
 8008950:	aa23      	add	r2, sp, #140	; 0x8c
 8008952:	4621      	mov	r1, r4
 8008954:	4658      	mov	r0, fp
 8008956:	f002 f8e9 	bl	800ab2c <__ssprint_r>
 800895a:	2800      	cmp	r0, #0
 800895c:	f47f a9ea 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008960:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008962:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008964:	46c8      	mov	r8, r9
 8008966:	e7e8      	b.n	800893a <_svfprintf_r+0xdaa>
 8008968:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800896a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800896c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800896e:	f8c8 1000 	str.w	r1, [r8]
 8008972:	3301      	adds	r3, #1
 8008974:	4404      	add	r4, r0
 8008976:	2b07      	cmp	r3, #7
 8008978:	9425      	str	r4, [sp, #148]	; 0x94
 800897a:	f8c8 0004 	str.w	r0, [r8, #4]
 800897e:	9324      	str	r3, [sp, #144]	; 0x90
 8008980:	f300 81f4 	bgt.w	8008d6c <_svfprintf_r+0x11dc>
 8008984:	f108 0808 	add.w	r8, r8, #8
 8008988:	e7ac      	b.n	80088e4 <_svfprintf_r+0xd54>
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	07da      	lsls	r2, r3, #31
 800898e:	f53f adfc 	bmi.w	800858a <_svfprintf_r+0x9fa>
 8008992:	3701      	adds	r7, #1
 8008994:	3401      	adds	r4, #1
 8008996:	2301      	movs	r3, #1
 8008998:	2f07      	cmp	r7, #7
 800899a:	9425      	str	r4, [sp, #148]	; 0x94
 800899c:	9724      	str	r7, [sp, #144]	; 0x90
 800899e:	f8c8 6000 	str.w	r6, [r8]
 80089a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80089a6:	f77f ae24 	ble.w	80085f2 <_svfprintf_r+0xa62>
 80089aa:	e74a      	b.n	8008842 <_svfprintf_r+0xcb2>
 80089ac:	aa23      	add	r2, sp, #140	; 0x8c
 80089ae:	9907      	ldr	r1, [sp, #28]
 80089b0:	9808      	ldr	r0, [sp, #32]
 80089b2:	f002 f8bb 	bl	800ab2c <__ssprint_r>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f47f a9bc 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 80089bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80089be:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80089c0:	46c8      	mov	r8, r9
 80089c2:	e5f0      	b.n	80085a6 <_svfprintf_r+0xa16>
 80089c4:	aa23      	add	r2, sp, #140	; 0x8c
 80089c6:	9907      	ldr	r1, [sp, #28]
 80089c8:	9808      	ldr	r0, [sp, #32]
 80089ca:	f002 f8af 	bl	800ab2c <__ssprint_r>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f47f a9b0 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 80089d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80089d6:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80089d8:	46c8      	mov	r8, r9
 80089da:	e5f3      	b.n	80085c4 <_svfprintf_r+0xa34>
 80089dc:	464e      	mov	r6, r9
 80089de:	f7ff b9e7 	b.w	8007db0 <_svfprintf_r+0x220>
 80089e2:	aa23      	add	r2, sp, #140	; 0x8c
 80089e4:	9907      	ldr	r1, [sp, #28]
 80089e6:	9808      	ldr	r0, [sp, #32]
 80089e8:	f002 f8a0 	bl	800ab2c <__ssprint_r>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f47f a9a1 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 80089f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80089f4:	46c8      	mov	r8, r9
 80089f6:	f7ff ba63 	b.w	8007ec0 <_svfprintf_r+0x330>
 80089fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	f7f8 f9dd 	bl	8000dc0 <__aeabi_dcmpun>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f040 8298 	bne.w	8008f3c <_svfprintf_r+0x13ac>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a12:	f023 0720 	bic.w	r7, r3, #32
 8008a16:	f000 81d2 	beq.w	8008dbe <_svfprintf_r+0x122e>
 8008a1a:	2f47      	cmp	r7, #71	; 0x47
 8008a1c:	f000 8120 	beq.w	8008c60 <_svfprintf_r+0x10d0>
 8008a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a22:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	9203      	str	r2, [sp, #12]
 8008a2a:	f2c0 81f0 	blt.w	8008e0e <_svfprintf_r+0x127e>
 8008a2e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008a32:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8008a36:	2300      	movs	r3, #0
 8008a38:	930c      	str	r3, [sp, #48]	; 0x30
 8008a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a3c:	2b66      	cmp	r3, #102	; 0x66
 8008a3e:	f000 81c1 	beq.w	8008dc4 <_svfprintf_r+0x1234>
 8008a42:	2b46      	cmp	r3, #70	; 0x46
 8008a44:	f000 80f1 	beq.w	8008c2a <_svfprintf_r+0x109a>
 8008a48:	2f45      	cmp	r7, #69	; 0x45
 8008a4a:	bf0c      	ite	eq
 8008a4c:	9b06      	ldreq	r3, [sp, #24]
 8008a4e:	9d06      	ldrne	r5, [sp, #24]
 8008a50:	9808      	ldr	r0, [sp, #32]
 8008a52:	bf08      	it	eq
 8008a54:	1c5d      	addeq	r5, r3, #1
 8008a56:	aa21      	add	r2, sp, #132	; 0x84
 8008a58:	ab1e      	add	r3, sp, #120	; 0x78
 8008a5a:	9201      	str	r2, [sp, #4]
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	462a      	mov	r2, r5
 8008a60:	ab1d      	add	r3, sp, #116	; 0x74
 8008a62:	2102      	movs	r1, #2
 8008a64:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 8008a68:	f000 fb6a 	bl	8009140 <_dtoa_r>
 8008a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a6e:	2b67      	cmp	r3, #103	; 0x67
 8008a70:	4606      	mov	r6, r0
 8008a72:	f040 81d5 	bne.w	8008e20 <_svfprintf_r+0x1290>
 8008a76:	f01b 0f01 	tst.w	fp, #1
 8008a7a:	f000 824e 	beq.w	8008f1a <_svfprintf_r+0x138a>
 8008a7e:	1974      	adds	r4, r6, r5
 8008a80:	2200      	movs	r2, #0
 8008a82:	2300      	movs	r3, #0
 8008a84:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8008a88:	f7f8 f968 	bl	8000d5c <__aeabi_dcmpeq>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f040 8160 	bne.w	8008d52 <_svfprintf_r+0x11c2>
 8008a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	d206      	bcs.n	8008aa6 <_svfprintf_r+0xf16>
 8008a98:	2130      	movs	r1, #48	; 0x30
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	9221      	str	r2, [sp, #132]	; 0x84
 8008a9e:	7019      	strb	r1, [r3, #0]
 8008aa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	d8f9      	bhi.n	8008a9a <_svfprintf_r+0xf0a>
 8008aa6:	1b9b      	subs	r3, r3, r6
 8008aa8:	2f47      	cmp	r7, #71	; 0x47
 8008aaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aac:	f000 80f0 	beq.w	8008c90 <_svfprintf_r+0x1100>
 8008ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab2:	2b65      	cmp	r3, #101	; 0x65
 8008ab4:	f340 81c3 	ble.w	8008e3e <_svfprintf_r+0x12ae>
 8008ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aba:	2b66      	cmp	r3, #102	; 0x66
 8008abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008abe:	930e      	str	r3, [sp, #56]	; 0x38
 8008ac0:	f000 81c0 	beq.w	8008e44 <_svfprintf_r+0x12b4>
 8008ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4291      	cmp	r1, r2
 8008acc:	f300 8191 	bgt.w	8008df2 <_svfprintf_r+0x1262>
 8008ad0:	f01b 0f01 	tst.w	fp, #1
 8008ad4:	f040 8223 	bne.w	8008f1e <_svfprintf_r+0x138e>
 8008ad8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	2367      	movs	r3, #103	; 0x67
 8008ae0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f040 80cb 	bne.w	8008c82 <_svfprintf_r+0x10f2>
 8008aec:	9306      	str	r3, [sp, #24]
 8008aee:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008af2:	f7ff b965 	b.w	8007dc0 <_svfprintf_r+0x230>
 8008af6:	f025 0507 	bic.w	r5, r5, #7
 8008afa:	ed95 7b00 	vldr	d7, [r5]
 8008afe:	f105 0308 	add.w	r3, r5, #8
 8008b02:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b08:	e416      	b.n	8008338 <_svfprintf_r+0x7a8>
 8008b0a:	4635      	mov	r5, r6
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	4646      	mov	r6, r8
 8008b10:	4690      	mov	r8, r2
 8008b12:	3301      	adds	r3, #1
 8008b14:	443c      	add	r4, r7
 8008b16:	2b07      	cmp	r3, #7
 8008b18:	9425      	str	r4, [sp, #148]	; 0x94
 8008b1a:	9324      	str	r3, [sp, #144]	; 0x90
 8008b1c:	e888 00a0 	stmia.w	r8, {r5, r7}
 8008b20:	f73f aecf 	bgt.w	80088c2 <_svfprintf_r+0xd32>
 8008b24:	f108 0808 	add.w	r8, r8, #8
 8008b28:	e6d5      	b.n	80088d6 <_svfprintf_r+0xd46>
 8008b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b2c:	6813      	ldr	r3, [r2, #0]
 8008b2e:	3204      	adds	r2, #4
 8008b30:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b32:	9a05      	ldr	r2, [sp, #20]
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	f7ff b852 	b.w	8007bde <_svfprintf_r+0x4e>
 8008b3a:	aa23      	add	r2, sp, #140	; 0x8c
 8008b3c:	9907      	ldr	r1, [sp, #28]
 8008b3e:	9808      	ldr	r0, [sp, #32]
 8008b40:	f001 fff4 	bl	800ab2c <__ssprint_r>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f47f a8f5 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008b4a:	46c8      	mov	r8, r9
 8008b4c:	e488      	b.n	8008460 <_svfprintf_r+0x8d0>
 8008b4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b50:	4a27      	ldr	r2, [pc, #156]	; (8008bf0 <_svfprintf_r+0x1060>)
 8008b52:	f8c8 2000 	str.w	r2, [r8]
 8008b56:	3301      	adds	r3, #1
 8008b58:	3401      	adds	r4, #1
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	2b07      	cmp	r3, #7
 8008b5e:	9425      	str	r4, [sp, #148]	; 0x94
 8008b60:	9324      	str	r3, [sp, #144]	; 0x90
 8008b62:	f8c8 2004 	str.w	r2, [r8, #4]
 8008b66:	dc54      	bgt.n	8008c12 <_svfprintf_r+0x1082>
 8008b68:	f108 0808 	add.w	r8, r8, #8
 8008b6c:	b929      	cbnz	r1, 8008b7a <_svfprintf_r+0xfea>
 8008b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b70:	b91b      	cbnz	r3, 8008b7a <_svfprintf_r+0xfea>
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	07d8      	lsls	r0, r3, #31
 8008b76:	f57f a9f2 	bpl.w	8007f5e <_svfprintf_r+0x3ce>
 8008b7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b7c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008b7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b80:	f8c8 2000 	str.w	r2, [r8]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4602      	mov	r2, r0
 8008b88:	4422      	add	r2, r4
 8008b8a:	2b07      	cmp	r3, #7
 8008b8c:	9225      	str	r2, [sp, #148]	; 0x94
 8008b8e:	f8c8 0004 	str.w	r0, [r8, #4]
 8008b92:	9324      	str	r3, [sp, #144]	; 0x90
 8008b94:	f300 8195 	bgt.w	8008ec2 <_svfprintf_r+0x1332>
 8008b98:	f108 0808 	add.w	r8, r8, #8
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	f2c0 816d 	blt.w	8008e7c <_svfprintf_r+0x12ec>
 8008ba2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008ba4:	f8c8 6000 	str.w	r6, [r8]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	188c      	adds	r4, r1, r2
 8008bac:	2b07      	cmp	r3, #7
 8008bae:	9425      	str	r4, [sp, #148]	; 0x94
 8008bb0:	9324      	str	r3, [sp, #144]	; 0x90
 8008bb2:	f8c8 1004 	str.w	r1, [r8, #4]
 8008bb6:	f77f a9d0 	ble.w	8007f5a <_svfprintf_r+0x3ca>
 8008bba:	e529      	b.n	8008610 <_svfprintf_r+0xa80>
 8008bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bbe:	9905      	ldr	r1, [sp, #20]
 8008bc0:	6813      	ldr	r3, [r2, #0]
 8008bc2:	17cd      	asrs	r5, r1, #31
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	3204      	adds	r2, #4
 8008bc8:	4629      	mov	r1, r5
 8008bca:	920b      	str	r2, [sp, #44]	; 0x2c
 8008bcc:	e9c3 0100 	strd	r0, r1, [r3]
 8008bd0:	f7ff b805 	b.w	8007bde <_svfprintf_r+0x4e>
 8008bd4:	aa23      	add	r2, sp, #140	; 0x8c
 8008bd6:	9907      	ldr	r1, [sp, #28]
 8008bd8:	9808      	ldr	r0, [sp, #32]
 8008bda:	f001 ffa7 	bl	800ab2c <__ssprint_r>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f47f a8a8 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008be4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008be6:	46c8      	mov	r8, r9
 8008be8:	e453      	b.n	8008492 <_svfprintf_r+0x902>
 8008bea:	bf00      	nop
 8008bec:	0800b884 	.word	0x0800b884
 8008bf0:	0800b870 	.word	0x0800b870
 8008bf4:	2140      	movs	r1, #64	; 0x40
 8008bf6:	9808      	ldr	r0, [sp, #32]
 8008bf8:	f001 f9d6 	bl	8009fa8 <_malloc_r>
 8008bfc:	9a07      	ldr	r2, [sp, #28]
 8008bfe:	6010      	str	r0, [r2, #0]
 8008c00:	6110      	str	r0, [r2, #16]
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f000 81f0 	beq.w	8008fe8 <_svfprintf_r+0x1458>
 8008c08:	9a07      	ldr	r2, [sp, #28]
 8008c0a:	2340      	movs	r3, #64	; 0x40
 8008c0c:	6153      	str	r3, [r2, #20]
 8008c0e:	f7fe bfd6 	b.w	8007bbe <_svfprintf_r+0x2e>
 8008c12:	aa23      	add	r2, sp, #140	; 0x8c
 8008c14:	9907      	ldr	r1, [sp, #28]
 8008c16:	9808      	ldr	r0, [sp, #32]
 8008c18:	f001 ff88 	bl	800ab2c <__ssprint_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	f47f a889 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008c22:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008c24:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008c26:	46c8      	mov	r8, r9
 8008c28:	e7a0      	b.n	8008b6c <_svfprintf_r+0xfdc>
 8008c2a:	9d06      	ldr	r5, [sp, #24]
 8008c2c:	9808      	ldr	r0, [sp, #32]
 8008c2e:	aa21      	add	r2, sp, #132	; 0x84
 8008c30:	ab1e      	add	r3, sp, #120	; 0x78
 8008c32:	9201      	str	r2, [sp, #4]
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	462a      	mov	r2, r5
 8008c38:	ab1d      	add	r3, sp, #116	; 0x74
 8008c3a:	2103      	movs	r1, #3
 8008c3c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 8008c40:	f000 fa7e 	bl	8009140 <_dtoa_r>
 8008c44:	4606      	mov	r6, r0
 8008c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c48:	2b46      	cmp	r3, #70	; 0x46
 8008c4a:	eb06 0405 	add.w	r4, r6, r5
 8008c4e:	f47f af17 	bne.w	8008a80 <_svfprintf_r+0xef0>
 8008c52:	7833      	ldrb	r3, [r6, #0]
 8008c54:	2b30      	cmp	r3, #48	; 0x30
 8008c56:	f000 8177 	beq.w	8008f48 <_svfprintf_r+0x13b8>
 8008c5a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008c5c:	442c      	add	r4, r5
 8008c5e:	e70f      	b.n	8008a80 <_svfprintf_r+0xef0>
 8008c60:	9b06      	ldr	r3, [sp, #24]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bf08      	it	eq
 8008c66:	2301      	moveq	r3, #1
 8008c68:	9306      	str	r3, [sp, #24]
 8008c6a:	e6d9      	b.n	8008a20 <_svfprintf_r+0xe90>
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	9406      	str	r4, [sp, #24]
 8008c70:	f7f7 fbe6 	bl	8000440 <strlen>
 8008c74:	950b      	str	r5, [sp, #44]	; 0x2c
 8008c76:	900a      	str	r0, [sp, #40]	; 0x28
 8008c78:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f7ff b9eb 	b.w	8008058 <_svfprintf_r+0x4c8>
 8008c82:	272d      	movs	r7, #45	; 0x2d
 8008c84:	2300      	movs	r3, #0
 8008c86:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008c8a:	9306      	str	r3, [sp, #24]
 8008c8c:	f7ff b899 	b.w	8007dc2 <_svfprintf_r+0x232>
 8008c90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c92:	930e      	str	r3, [sp, #56]	; 0x38
 8008c94:	461a      	mov	r2, r3
 8008c96:	3303      	adds	r3, #3
 8008c98:	db04      	blt.n	8008ca4 <_svfprintf_r+0x1114>
 8008c9a:	9b06      	ldr	r3, [sp, #24]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	f6bf af10 	bge.w	8008ac4 <_svfprintf_r+0xf34>
 8008ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ca6:	3b02      	subs	r3, #2
 8008ca8:	930d      	str	r3, [sp, #52]	; 0x34
 8008caa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8008cae:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8008cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	931d      	str	r3, [sp, #116]	; 0x74
 8008cba:	bfbd      	ittte	lt
 8008cbc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008cbe:	f1c3 0301 	rsblt	r3, r3, #1
 8008cc2:	222d      	movlt	r2, #45	; 0x2d
 8008cc4:	222b      	movge	r2, #43	; 0x2b
 8008cc6:	2b09      	cmp	r3, #9
 8008cc8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 8008ccc:	f340 811d 	ble.w	8008f0a <_svfprintf_r+0x137a>
 8008cd0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4dac      	ldr	r5, [pc, #688]	; (8008f88 <_svfprintf_r+0x13f8>)
 8008cd8:	e000      	b.n	8008cdc <_svfprintf_r+0x114c>
 8008cda:	4610      	mov	r0, r2
 8008cdc:	fb85 1203 	smull	r1, r2, r5, r3
 8008ce0:	17d9      	asrs	r1, r3, #31
 8008ce2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
 8008ce6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8008cea:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8008cee:	3230      	adds	r2, #48	; 0x30
 8008cf0:	2909      	cmp	r1, #9
 8008cf2:	f800 2c01 	strb.w	r2, [r0, #-1]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008cfc:	dced      	bgt.n	8008cda <_svfprintf_r+0x114a>
 8008cfe:	3330      	adds	r3, #48	; 0x30
 8008d00:	3802      	subs	r0, #2
 8008d02:	b2d9      	uxtb	r1, r3
 8008d04:	4284      	cmp	r4, r0
 8008d06:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008d0a:	f240 816a 	bls.w	8008fe2 <_svfprintf_r+0x1452>
 8008d0e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 8008d12:	4613      	mov	r3, r2
 8008d14:	e001      	b.n	8008d1a <_svfprintf_r+0x118a>
 8008d16:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008d1a:	f800 1b01 	strb.w	r1, [r0], #1
 8008d1e:	42a3      	cmp	r3, r4
 8008d20:	d1f9      	bne.n	8008d16 <_svfprintf_r+0x1186>
 8008d22:	3301      	adds	r3, #1
 8008d24:	1a9b      	subs	r3, r3, r2
 8008d26:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8008d2a:	4413      	add	r3, r2
 8008d2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d32:	9315      	str	r3, [sp, #84]	; 0x54
 8008d34:	2a01      	cmp	r2, #1
 8008d36:	4413      	add	r3, r2
 8008d38:	930a      	str	r3, [sp, #40]	; 0x28
 8008d3a:	f340 811a 	ble.w	8008f72 <_svfprintf_r+0x13e2>
 8008d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d42:	4413      	add	r3, r2
 8008d44:	930a      	str	r3, [sp, #40]	; 0x28
 8008d46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d50:	e6c8      	b.n	8008ae4 <_svfprintf_r+0xf54>
 8008d52:	4623      	mov	r3, r4
 8008d54:	e6a7      	b.n	8008aa6 <_svfprintf_r+0xf16>
 8008d56:	aa23      	add	r2, sp, #140	; 0x8c
 8008d58:	9907      	ldr	r1, [sp, #28]
 8008d5a:	9808      	ldr	r0, [sp, #32]
 8008d5c:	f001 fee6 	bl	800ab2c <__ssprint_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	f47e afe7 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008d66:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008d68:	46c8      	mov	r8, r9
 8008d6a:	e4d5      	b.n	8008718 <_svfprintf_r+0xb88>
 8008d6c:	aa23      	add	r2, sp, #140	; 0x8c
 8008d6e:	9907      	ldr	r1, [sp, #28]
 8008d70:	9808      	ldr	r0, [sp, #32]
 8008d72:	f001 fedb 	bl	800ab2c <__ssprint_r>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f47e afdc 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008d7c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008d7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008d80:	46c8      	mov	r8, r9
 8008d82:	e5af      	b.n	80088e4 <_svfprintf_r+0xd54>
 8008d84:	aa23      	add	r2, sp, #140	; 0x8c
 8008d86:	9907      	ldr	r1, [sp, #28]
 8008d88:	9808      	ldr	r0, [sp, #32]
 8008d8a:	f001 fecf 	bl	800ab2c <__ssprint_r>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f47e afd0 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008d94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d98:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008d9a:	1a9a      	subs	r2, r3, r2
 8008d9c:	46c8      	mov	r8, r9
 8008d9e:	e5b9      	b.n	8008914 <_svfprintf_r+0xd84>
 8008da0:	9b06      	ldr	r3, [sp, #24]
 8008da2:	960e      	str	r6, [sp, #56]	; 0x38
 8008da4:	2b06      	cmp	r3, #6
 8008da6:	bf28      	it	cs
 8008da8:	2306      	movcs	r3, #6
 8008daa:	9606      	str	r6, [sp, #24]
 8008dac:	4637      	mov	r7, r6
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	950b      	str	r5, [sp, #44]	; 0x2c
 8008db2:	f8cd b00c 	str.w	fp, [sp, #12]
 8008db6:	930a      	str	r3, [sp, #40]	; 0x28
 8008db8:	4e74      	ldr	r6, [pc, #464]	; (8008f8c <_svfprintf_r+0x13fc>)
 8008dba:	f7ff b801 	b.w	8007dc0 <_svfprintf_r+0x230>
 8008dbe:	2306      	movs	r3, #6
 8008dc0:	9306      	str	r3, [sp, #24]
 8008dc2:	e62d      	b.n	8008a20 <_svfprintf_r+0xe90>
 8008dc4:	9c06      	ldr	r4, [sp, #24]
 8008dc6:	9808      	ldr	r0, [sp, #32]
 8008dc8:	aa21      	add	r2, sp, #132	; 0x84
 8008dca:	ab1e      	add	r3, sp, #120	; 0x78
 8008dcc:	9201      	str	r2, [sp, #4]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8008dd4:	2103      	movs	r1, #3
 8008dd6:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 8008dda:	f000 f9b1 	bl	8009140 <_dtoa_r>
 8008dde:	4623      	mov	r3, r4
 8008de0:	4606      	mov	r6, r0
 8008de2:	1904      	adds	r4, r0, r4
 8008de4:	461d      	mov	r5, r3
 8008de6:	e734      	b.n	8008c52 <_svfprintf_r+0x10c2>
 8008de8:	272d      	movs	r7, #45	; 0x2d
 8008dea:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008dee:	f7ff baca 	b.w	8008386 <_svfprintf_r+0x7f6>
 8008df2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008df6:	4413      	add	r3, r2
 8008df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8008dfc:	2a00      	cmp	r2, #0
 8008dfe:	f340 80b1 	ble.w	8008f64 <_svfprintf_r+0x13d4>
 8008e02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	2367      	movs	r3, #103	; 0x67
 8008e0a:	930d      	str	r3, [sp, #52]	; 0x34
 8008e0c:	e66a      	b.n	8008ae4 <_svfprintf_r+0xf54>
 8008e0e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8008e12:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8008e16:	9319      	str	r3, [sp, #100]	; 0x64
 8008e18:	232d      	movs	r3, #45	; 0x2d
 8008e1a:	9118      	str	r1, [sp, #96]	; 0x60
 8008e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e1e:	e60c      	b.n	8008a3a <_svfprintf_r+0xeaa>
 8008e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e22:	2b47      	cmp	r3, #71	; 0x47
 8008e24:	f47f ae2b 	bne.w	8008a7e <_svfprintf_r+0xeee>
 8008e28:	f01b 0f01 	tst.w	fp, #1
 8008e2c:	f47f af0b 	bne.w	8008c46 <_svfprintf_r+0x10b6>
 8008e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e32:	2f47      	cmp	r7, #71	; 0x47
 8008e34:	eba3 0306 	sub.w	r3, r3, r6
 8008e38:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e3a:	f43f af29 	beq.w	8008c90 <_svfprintf_r+0x1100>
 8008e3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e40:	930e      	str	r3, [sp, #56]	; 0x38
 8008e42:	e732      	b.n	8008caa <_svfprintf_r+0x111a>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f340 80a9 	ble.w	8008f9c <_svfprintf_r+0x140c>
 8008e4a:	9a06      	ldr	r2, [sp, #24]
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	d16b      	bne.n	8008f28 <_svfprintf_r+0x1398>
 8008e50:	f01b 0f01 	tst.w	fp, #1
 8008e54:	d168      	bne.n	8008f28 <_svfprintf_r+0x1398>
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	930a      	str	r3, [sp, #40]	; 0x28
 8008e5a:	e643      	b.n	8008ae4 <_svfprintf_r+0xf54>
 8008e5c:	9b06      	ldr	r3, [sp, #24]
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	930a      	str	r3, [sp, #40]	; 0x28
 8008e62:	9006      	str	r0, [sp, #24]
 8008e64:	950b      	str	r5, [sp, #44]	; 0x2c
 8008e66:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e6a:	900e      	str	r0, [sp, #56]	; 0x38
 8008e6c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008e70:	f7fe bfa6 	b.w	8007dc0 <_svfprintf_r+0x230>
 8008e74:	2000      	movs	r0, #0
 8008e76:	9006      	str	r0, [sp, #24]
 8008e78:	f7fe bee4 	b.w	8007c44 <_svfprintf_r+0xb4>
 8008e7c:	424f      	negs	r7, r1
 8008e7e:	3110      	adds	r1, #16
 8008e80:	4d43      	ldr	r5, [pc, #268]	; (8008f90 <_svfprintf_r+0x1400>)
 8008e82:	da2b      	bge.n	8008edc <_svfprintf_r+0x134c>
 8008e84:	2410      	movs	r4, #16
 8008e86:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008e8a:	e004      	b.n	8008e96 <_svfprintf_r+0x1306>
 8008e8c:	f108 0808 	add.w	r8, r8, #8
 8008e90:	3f10      	subs	r7, #16
 8008e92:	2f10      	cmp	r7, #16
 8008e94:	dd22      	ble.n	8008edc <_svfprintf_r+0x134c>
 8008e96:	3301      	adds	r3, #1
 8008e98:	3210      	adds	r2, #16
 8008e9a:	2b07      	cmp	r3, #7
 8008e9c:	9225      	str	r2, [sp, #148]	; 0x94
 8008e9e:	9324      	str	r3, [sp, #144]	; 0x90
 8008ea0:	f8c8 5000 	str.w	r5, [r8]
 8008ea4:	f8c8 4004 	str.w	r4, [r8, #4]
 8008ea8:	ddf0      	ble.n	8008e8c <_svfprintf_r+0x12fc>
 8008eaa:	aa23      	add	r2, sp, #140	; 0x8c
 8008eac:	9907      	ldr	r1, [sp, #28]
 8008eae:	4658      	mov	r0, fp
 8008eb0:	f001 fe3c 	bl	800ab2c <__ssprint_r>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f47e af3d 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008eba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008ebc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ebe:	46c8      	mov	r8, r9
 8008ec0:	e7e6      	b.n	8008e90 <_svfprintf_r+0x1300>
 8008ec2:	aa23      	add	r2, sp, #140	; 0x8c
 8008ec4:	9907      	ldr	r1, [sp, #28]
 8008ec6:	9808      	ldr	r0, [sp, #32]
 8008ec8:	f001 fe30 	bl	800ab2c <__ssprint_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f47e af31 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008ed2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008ed4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008ed6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ed8:	46c8      	mov	r8, r9
 8008eda:	e65f      	b.n	8008b9c <_svfprintf_r+0x100c>
 8008edc:	3301      	adds	r3, #1
 8008ede:	443a      	add	r2, r7
 8008ee0:	2b07      	cmp	r3, #7
 8008ee2:	e888 00a0 	stmia.w	r8, {r5, r7}
 8008ee6:	9225      	str	r2, [sp, #148]	; 0x94
 8008ee8:	9324      	str	r3, [sp, #144]	; 0x90
 8008eea:	f108 0808 	add.w	r8, r8, #8
 8008eee:	f77f ae58 	ble.w	8008ba2 <_svfprintf_r+0x1012>
 8008ef2:	aa23      	add	r2, sp, #140	; 0x8c
 8008ef4:	9907      	ldr	r1, [sp, #28]
 8008ef6:	9808      	ldr	r0, [sp, #32]
 8008ef8:	f001 fe18 	bl	800ab2c <__ssprint_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f47e af19 	bne.w	8007d34 <_svfprintf_r+0x1a4>
 8008f02:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008f04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f06:	46c8      	mov	r8, r9
 8008f08:	e64b      	b.n	8008ba2 <_svfprintf_r+0x1012>
 8008f0a:	3330      	adds	r3, #48	; 0x30
 8008f0c:	2230      	movs	r2, #48	; 0x30
 8008f0e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8008f12:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 8008f16:	ab20      	add	r3, sp, #128	; 0x80
 8008f18:	e708      	b.n	8008d2c <_svfprintf_r+0x119c>
 8008f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f1c:	e5c3      	b.n	8008aa6 <_svfprintf_r+0xf16>
 8008f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f22:	4413      	add	r3, r2
 8008f24:	930a      	str	r3, [sp, #40]	; 0x28
 8008f26:	e76c      	b.n	8008e02 <_svfprintf_r+0x1272>
 8008f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f2c:	4413      	add	r3, r2
 8008f2e:	9a06      	ldr	r2, [sp, #24]
 8008f30:	441a      	add	r2, r3
 8008f32:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f36:	920a      	str	r2, [sp, #40]	; 0x28
 8008f38:	9304      	str	r3, [sp, #16]
 8008f3a:	e5d3      	b.n	8008ae4 <_svfprintf_r+0xf54>
 8008f3c:	4e15      	ldr	r6, [pc, #84]	; (8008f94 <_svfprintf_r+0x1404>)
 8008f3e:	4b16      	ldr	r3, [pc, #88]	; (8008f98 <_svfprintf_r+0x1408>)
 8008f40:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008f44:	f7ff ba21 	b.w	800838a <_svfprintf_r+0x7fa>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8008f50:	f7f7 ff04 	bl	8000d5c <__aeabi_dcmpeq>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f47f ae80 	bne.w	8008c5a <_svfprintf_r+0x10ca>
 8008f5a:	f1c5 0501 	rsb	r5, r5, #1
 8008f5e:	951d      	str	r5, [sp, #116]	; 0x74
 8008f60:	442c      	add	r4, r5
 8008f62:	e58d      	b.n	8008a80 <_svfprintf_r+0xef0>
 8008f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f68:	f1c3 0301 	rsb	r3, r3, #1
 8008f6c:	441a      	add	r2, r3
 8008f6e:	4613      	mov	r3, r2
 8008f70:	e7d8      	b.n	8008f24 <_svfprintf_r+0x1394>
 8008f72:	f01b 0301 	ands.w	r3, fp, #1
 8008f76:	930e      	str	r3, [sp, #56]	; 0x38
 8008f78:	f47f aee1 	bne.w	8008d3e <_svfprintf_r+0x11ae>
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	e5ae      	b.n	8008ae4 <_svfprintf_r+0xf54>
 8008f86:	bf00      	nop
 8008f88:	66666667 	.word	0x66666667
 8008f8c:	0800b868 	.word	0x0800b868
 8008f90:	0800b884 	.word	0x0800b884
 8008f94:	0800b83c 	.word	0x0800b83c
 8008f98:	0800b838 	.word	0x0800b838
 8008f9c:	9b06      	ldr	r3, [sp, #24]
 8008f9e:	b913      	cbnz	r3, 8008fa6 <_svfprintf_r+0x1416>
 8008fa0:	f01b 0f01 	tst.w	fp, #1
 8008fa4:	d002      	beq.n	8008fac <_svfprintf_r+0x141c>
 8008fa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fa8:	3301      	adds	r3, #1
 8008faa:	e7c0      	b.n	8008f2e <_svfprintf_r+0x139e>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e752      	b.n	8008e56 <_svfprintf_r+0x12c6>
 8008fb0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008fb2:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008fb6:	6828      	ldr	r0, [r5, #0]
 8008fb8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8008fbc:	9006      	str	r0, [sp, #24]
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	3004      	adds	r0, #4
 8008fc2:	46a2      	mov	sl, r4
 8008fc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008fc6:	f7fe be3b 	b.w	8007c40 <_svfprintf_r+0xb0>
 8008fca:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8008fce:	f7ff b858 	b.w	8008082 <_svfprintf_r+0x4f2>
 8008fd2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8008fd6:	f7ff b8e4 	b.w	80081a2 <_svfprintf_r+0x612>
 8008fda:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8008fde:	f7ff ba0d 	b.w	80083fc <_svfprintf_r+0x86c>
 8008fe2:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 8008fe6:	e6a1      	b.n	8008d2c <_svfprintf_r+0x119c>
 8008fe8:	9a08      	ldr	r2, [sp, #32]
 8008fea:	230c      	movs	r3, #12
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ff2:	9305      	str	r3, [sp, #20]
 8008ff4:	f7fe bea7 	b.w	8007d46 <_svfprintf_r+0x1b6>
 8008ff8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8008ffc:	f7ff b98c 	b.w	8008318 <_svfprintf_r+0x788>
 8009000:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009004:	f7ff b968 	b.w	80082d8 <_svfprintf_r+0x748>
 8009008:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800900c:	f7ff b94b 	b.w	80082a6 <_svfprintf_r+0x716>
 8009010:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009014:	f7ff b904 	b.w	8008220 <_svfprintf_r+0x690>

08009018 <quorem>:
 8009018:	6902      	ldr	r2, [r0, #16]
 800901a:	690b      	ldr	r3, [r1, #16]
 800901c:	4293      	cmp	r3, r2
 800901e:	f300 808d 	bgt.w	800913c <quorem+0x124>
 8009022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009026:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800902a:	f101 0714 	add.w	r7, r1, #20
 800902e:	f100 0b14 	add.w	fp, r0, #20
 8009032:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8009036:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800903a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800903e:	b083      	sub	sp, #12
 8009040:	3201      	adds	r2, #1
 8009042:	fbb3 f9f2 	udiv	r9, r3, r2
 8009046:	eb0b 0304 	add.w	r3, fp, r4
 800904a:	9400      	str	r4, [sp, #0]
 800904c:	eb07 0a04 	add.w	sl, r7, r4
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	f1b9 0f00 	cmp.w	r9, #0
 8009056:	d039      	beq.n	80090cc <quorem+0xb4>
 8009058:	2500      	movs	r5, #0
 800905a:	462e      	mov	r6, r5
 800905c:	46bc      	mov	ip, r7
 800905e:	46de      	mov	lr, fp
 8009060:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009064:	f8de 3000 	ldr.w	r3, [lr]
 8009068:	b2a2      	uxth	r2, r4
 800906a:	fb09 5502 	mla	r5, r9, r2, r5
 800906e:	0c22      	lsrs	r2, r4, #16
 8009070:	0c2c      	lsrs	r4, r5, #16
 8009072:	fb09 4202 	mla	r2, r9, r2, r4
 8009076:	b2ad      	uxth	r5, r5
 8009078:	1b75      	subs	r5, r6, r5
 800907a:	b296      	uxth	r6, r2
 800907c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 8009080:	fa15 f383 	uxtah	r3, r5, r3
 8009084:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8009088:	b29b      	uxth	r3, r3
 800908a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800908e:	45e2      	cmp	sl, ip
 8009090:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8009094:	f84e 3b04 	str.w	r3, [lr], #4
 8009098:	ea4f 4626 	mov.w	r6, r6, asr #16
 800909c:	d2e0      	bcs.n	8009060 <quorem+0x48>
 800909e:	9b00      	ldr	r3, [sp, #0]
 80090a0:	f85b 3003 	ldr.w	r3, [fp, r3]
 80090a4:	b993      	cbnz	r3, 80090cc <quorem+0xb4>
 80090a6:	9c01      	ldr	r4, [sp, #4]
 80090a8:	1f23      	subs	r3, r4, #4
 80090aa:	459b      	cmp	fp, r3
 80090ac:	d20c      	bcs.n	80090c8 <quorem+0xb0>
 80090ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80090b2:	b94b      	cbnz	r3, 80090c8 <quorem+0xb0>
 80090b4:	f1a4 0308 	sub.w	r3, r4, #8
 80090b8:	e002      	b.n	80090c0 <quorem+0xa8>
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	3b04      	subs	r3, #4
 80090be:	b91a      	cbnz	r2, 80090c8 <quorem+0xb0>
 80090c0:	459b      	cmp	fp, r3
 80090c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80090c6:	d3f8      	bcc.n	80090ba <quorem+0xa2>
 80090c8:	f8c0 8010 	str.w	r8, [r0, #16]
 80090cc:	4604      	mov	r4, r0
 80090ce:	f001 fc1d 	bl	800a90c <__mcmp>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	db2e      	blt.n	8009134 <quorem+0x11c>
 80090d6:	f109 0901 	add.w	r9, r9, #1
 80090da:	465d      	mov	r5, fp
 80090dc:	2300      	movs	r3, #0
 80090de:	f857 1b04 	ldr.w	r1, [r7], #4
 80090e2:	6828      	ldr	r0, [r5, #0]
 80090e4:	b28a      	uxth	r2, r1
 80090e6:	1a9a      	subs	r2, r3, r2
 80090e8:	0c0b      	lsrs	r3, r1, #16
 80090ea:	fa12 f280 	uxtah	r2, r2, r0
 80090ee:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 80090f2:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80090f6:	b292      	uxth	r2, r2
 80090f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090fc:	45ba      	cmp	sl, r7
 80090fe:	f845 2b04 	str.w	r2, [r5], #4
 8009102:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009106:	d2ea      	bcs.n	80090de <quorem+0xc6>
 8009108:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800910c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8009110:	b982      	cbnz	r2, 8009134 <quorem+0x11c>
 8009112:	1f1a      	subs	r2, r3, #4
 8009114:	4593      	cmp	fp, r2
 8009116:	d20b      	bcs.n	8009130 <quorem+0x118>
 8009118:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800911c:	b942      	cbnz	r2, 8009130 <quorem+0x118>
 800911e:	3b08      	subs	r3, #8
 8009120:	e002      	b.n	8009128 <quorem+0x110>
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	3b04      	subs	r3, #4
 8009126:	b91a      	cbnz	r2, 8009130 <quorem+0x118>
 8009128:	459b      	cmp	fp, r3
 800912a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800912e:	d3f8      	bcc.n	8009122 <quorem+0x10a>
 8009130:	f8c4 8010 	str.w	r8, [r4, #16]
 8009134:	4648      	mov	r0, r9
 8009136:	b003      	add	sp, #12
 8009138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913c:	2000      	movs	r0, #0
 800913e:	4770      	bx	lr

08009140 <_dtoa_r>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	ec57 6b10 	vmov	r6, r7, d0
 8009148:	b097      	sub	sp, #92	; 0x5c
 800914a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800914c:	9102      	str	r1, [sp, #8]
 800914e:	4604      	mov	r4, r0
 8009150:	4693      	mov	fp, r2
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	e9cd 6700 	strd	r6, r7, [sp]
 8009158:	b14d      	cbz	r5, 800916e <_dtoa_r+0x2e>
 800915a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800915c:	606a      	str	r2, [r5, #4]
 800915e:	2301      	movs	r3, #1
 8009160:	4093      	lsls	r3, r2
 8009162:	60ab      	str	r3, [r5, #8]
 8009164:	4629      	mov	r1, r5
 8009166:	f001 f9f9 	bl	800a55c <_Bfree>
 800916a:	2300      	movs	r3, #0
 800916c:	6423      	str	r3, [r4, #64]	; 0x40
 800916e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009172:	2b00      	cmp	r3, #0
 8009174:	4699      	mov	r9, r3
 8009176:	db38      	blt.n	80091ea <_dtoa_r+0xaa>
 8009178:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800917a:	2300      	movs	r3, #0
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	4ba0      	ldr	r3, [pc, #640]	; (8009400 <_dtoa_r+0x2c0>)
 8009180:	ea33 0309 	bics.w	r3, r3, r9
 8009184:	d017      	beq.n	80091b6 <_dtoa_r+0x76>
 8009186:	e9dd 6700 	ldrd	r6, r7, [sp]
 800918a:	2200      	movs	r2, #0
 800918c:	2300      	movs	r3, #0
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 fde3 	bl	8000d5c <__aeabi_dcmpeq>
 8009196:	4680      	mov	r8, r0
 8009198:	2800      	cmp	r0, #0
 800919a:	d02f      	beq.n	80091fc <_dtoa_r+0xbc>
 800919c:	9a03      	ldr	r2, [sp, #12]
 800919e:	2301      	movs	r3, #1
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 80c4 	beq.w	8009332 <_dtoa_r+0x1f2>
 80091aa:	4896      	ldr	r0, [pc, #600]	; (8009404 <_dtoa_r+0x2c4>)
 80091ac:	6018      	str	r0, [r3, #0]
 80091ae:	3801      	subs	r0, #1
 80091b0:	b017      	add	sp, #92	; 0x5c
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	9a03      	ldr	r2, [sp, #12]
 80091b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	9b00      	ldr	r3, [sp, #0]
 80091c0:	b96b      	cbnz	r3, 80091de <_dtoa_r+0x9e>
 80091c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091c6:	b953      	cbnz	r3, 80091de <_dtoa_r+0x9e>
 80091c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ca:	488f      	ldr	r0, [pc, #572]	; (8009408 <_dtoa_r+0x2c8>)
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0ef      	beq.n	80091b0 <_dtoa_r+0x70>
 80091d0:	f100 0308 	add.w	r3, r0, #8
 80091d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	b017      	add	sp, #92	; 0x5c
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e0:	488a      	ldr	r0, [pc, #552]	; (800940c <_dtoa_r+0x2cc>)
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0e4      	beq.n	80091b0 <_dtoa_r+0x70>
 80091e6:	1cc3      	adds	r3, r0, #3
 80091e8:	e7f4      	b.n	80091d4 <_dtoa_r+0x94>
 80091ea:	9a01      	ldr	r2, [sp, #4]
 80091ec:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 80091f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091f2:	f8cd 9004 	str.w	r9, [sp, #4]
 80091f6:	2301      	movs	r3, #1
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e7c0      	b.n	800917e <_dtoa_r+0x3e>
 80091fc:	aa14      	add	r2, sp, #80	; 0x50
 80091fe:	a915      	add	r1, sp, #84	; 0x54
 8009200:	ec47 6b10 	vmov	d0, r6, r7
 8009204:	4620      	mov	r0, r4
 8009206:	f001 fc21 	bl	800aa4c <__d2b>
 800920a:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800920e:	4682      	mov	sl, r0
 8009210:	d073      	beq.n	80092fa <_dtoa_r+0x1ba>
 8009212:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009216:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800921a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800921e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009222:	4630      	mov	r0, r6
 8009224:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009228:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800922c:	2200      	movs	r2, #0
 800922e:	4b78      	ldr	r3, [pc, #480]	; (8009410 <_dtoa_r+0x2d0>)
 8009230:	f7f7 f978 	bl	8000524 <__aeabi_dsub>
 8009234:	a36c      	add	r3, pc, #432	; (adr r3, 80093e8 <_dtoa_r+0x2a8>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f7 fb27 	bl	800088c <__aeabi_dmul>
 800923e:	a36c      	add	r3, pc, #432	; (adr r3, 80093f0 <_dtoa_r+0x2b0>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f7 f970 	bl	8000528 <__adddf3>
 8009248:	4606      	mov	r6, r0
 800924a:	4628      	mov	r0, r5
 800924c:	460f      	mov	r7, r1
 800924e:	f7f7 fab7 	bl	80007c0 <__aeabi_i2d>
 8009252:	a369      	add	r3, pc, #420	; (adr r3, 80093f8 <_dtoa_r+0x2b8>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7f7 fb18 	bl	800088c <__aeabi_dmul>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4630      	mov	r0, r6
 8009262:	4639      	mov	r1, r7
 8009264:	f7f7 f960 	bl	8000528 <__adddf3>
 8009268:	4606      	mov	r6, r0
 800926a:	460f      	mov	r7, r1
 800926c:	f7f7 fdbe 	bl	8000dec <__aeabi_d2iz>
 8009270:	2200      	movs	r2, #0
 8009272:	9004      	str	r0, [sp, #16]
 8009274:	2300      	movs	r3, #0
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	f7f7 fd79 	bl	8000d70 <__aeabi_dcmplt>
 800927e:	2800      	cmp	r0, #0
 8009280:	f040 816f 	bne.w	8009562 <_dtoa_r+0x422>
 8009284:	9e04      	ldr	r6, [sp, #16]
 8009286:	2e16      	cmp	r6, #22
 8009288:	f200 8159 	bhi.w	800953e <_dtoa_r+0x3fe>
 800928c:	4b61      	ldr	r3, [pc, #388]	; (8009414 <_dtoa_r+0x2d4>)
 800928e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800929a:	f7f7 fd87 	bl	8000dac <__aeabi_dcmpgt>
 800929e:	2800      	cmp	r0, #0
 80092a0:	f000 81c4 	beq.w	800962c <_dtoa_r+0x4ec>
 80092a4:	1e73      	subs	r3, r6, #1
 80092a6:	9304      	str	r3, [sp, #16]
 80092a8:	2300      	movs	r3, #0
 80092aa:	930c      	str	r3, [sp, #48]	; 0x30
 80092ac:	eba8 0505 	sub.w	r5, r8, r5
 80092b0:	1e6b      	subs	r3, r5, #1
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	f100 814f 	bmi.w	8009556 <_dtoa_r+0x416>
 80092b8:	2300      	movs	r3, #0
 80092ba:	9306      	str	r3, [sp, #24]
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f2c0 8140 	blt.w	8009544 <_dtoa_r+0x404>
 80092c4:	9a05      	ldr	r2, [sp, #20]
 80092c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092c8:	4611      	mov	r1, r2
 80092ca:	4419      	add	r1, r3
 80092cc:	2300      	movs	r3, #0
 80092ce:	9105      	str	r1, [sp, #20]
 80092d0:	930a      	str	r3, [sp, #40]	; 0x28
 80092d2:	9b02      	ldr	r3, [sp, #8]
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d82e      	bhi.n	8009336 <_dtoa_r+0x1f6>
 80092d8:	2b05      	cmp	r3, #5
 80092da:	f340 8651 	ble.w	8009f80 <_dtoa_r+0xe40>
 80092de:	3b04      	subs	r3, #4
 80092e0:	9302      	str	r3, [sp, #8]
 80092e2:	2700      	movs	r7, #0
 80092e4:	9b02      	ldr	r3, [sp, #8]
 80092e6:	3b02      	subs	r3, #2
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	f200 8633 	bhi.w	8009f54 <_dtoa_r+0xe14>
 80092ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80092f2:	03d6      	.short	0x03d6
 80092f4:	03e302cb 	.word	0x03e302cb
 80092f8:	0464      	.short	0x0464
 80092fa:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80092fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009300:	4445      	add	r5, r8
 8009302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009306:	2b20      	cmp	r3, #32
 8009308:	f340 818a 	ble.w	8009620 <_dtoa_r+0x4e0>
 800930c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009310:	fa09 f903 	lsl.w	r9, r9, r3
 8009314:	9b00      	ldr	r3, [sp, #0]
 8009316:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800931a:	fa23 f000 	lsr.w	r0, r3, r0
 800931e:	ea40 0009 	orr.w	r0, r0, r9
 8009322:	f7f7 fa3d 	bl	80007a0 <__aeabi_ui2d>
 8009326:	2301      	movs	r3, #1
 8009328:	3d01      	subs	r5, #1
 800932a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800932e:	9310      	str	r3, [sp, #64]	; 0x40
 8009330:	e77c      	b.n	800922c <_dtoa_r+0xec>
 8009332:	4839      	ldr	r0, [pc, #228]	; (8009418 <_dtoa_r+0x2d8>)
 8009334:	e73c      	b.n	80091b0 <_dtoa_r+0x70>
 8009336:	2100      	movs	r1, #0
 8009338:	6461      	str	r1, [r4, #68]	; 0x44
 800933a:	4620      	mov	r0, r4
 800933c:	468b      	mov	fp, r1
 800933e:	f001 f8e7 	bl	800a510 <_Balloc>
 8009342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	930d      	str	r3, [sp, #52]	; 0x34
 800934a:	2301      	movs	r3, #1
 800934c:	9007      	str	r0, [sp, #28]
 800934e:	6420      	str	r0, [r4, #64]	; 0x40
 8009350:	f8cd b008 	str.w	fp, [sp, #8]
 8009354:	9309      	str	r3, [sp, #36]	; 0x24
 8009356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009358:	2b00      	cmp	r3, #0
 800935a:	f2c0 80d0 	blt.w	80094fe <_dtoa_r+0x3be>
 800935e:	9a04      	ldr	r2, [sp, #16]
 8009360:	2a0e      	cmp	r2, #14
 8009362:	f300 80cc 	bgt.w	80094fe <_dtoa_r+0x3be>
 8009366:	4b2b      	ldr	r3, [pc, #172]	; (8009414 <_dtoa_r+0x2d4>)
 8009368:	f1bb 0f00 	cmp.w	fp, #0
 800936c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009370:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009374:	f2c0 83be 	blt.w	8009af4 <_dtoa_r+0x9b4>
 8009378:	e9dd 6700 	ldrd	r6, r7, [sp]
 800937c:	4642      	mov	r2, r8
 800937e:	464b      	mov	r3, r9
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	f7f7 fbac 	bl	8000ae0 <__aeabi_ddiv>
 8009388:	f7f7 fd30 	bl	8000dec <__aeabi_d2iz>
 800938c:	4683      	mov	fp, r0
 800938e:	f7f7 fa17 	bl	80007c0 <__aeabi_i2d>
 8009392:	4642      	mov	r2, r8
 8009394:	464b      	mov	r3, r9
 8009396:	f7f7 fa79 	bl	800088c <__aeabi_dmul>
 800939a:	460b      	mov	r3, r1
 800939c:	4602      	mov	r2, r0
 800939e:	4639      	mov	r1, r7
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7f7 f8bf 	bl	8000524 <__aeabi_dsub>
 80093a6:	9d07      	ldr	r5, [sp, #28]
 80093a8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80093ac:	702b      	strb	r3, [r5, #0]
 80093ae:	9b08      	ldr	r3, [sp, #32]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	4606      	mov	r6, r0
 80093b4:	460f      	mov	r7, r1
 80093b6:	f105 0501 	add.w	r5, r5, #1
 80093ba:	d061      	beq.n	8009480 <_dtoa_r+0x340>
 80093bc:	2200      	movs	r2, #0
 80093be:	4b17      	ldr	r3, [pc, #92]	; (800941c <_dtoa_r+0x2dc>)
 80093c0:	f7f7 fa64 	bl	800088c <__aeabi_dmul>
 80093c4:	2200      	movs	r2, #0
 80093c6:	2300      	movs	r3, #0
 80093c8:	4606      	mov	r6, r0
 80093ca:	460f      	mov	r7, r1
 80093cc:	f7f7 fcc6 	bl	8000d5c <__aeabi_dcmpeq>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f040 8081 	bne.w	80094d8 <_dtoa_r+0x398>
 80093d6:	f8cd a000 	str.w	sl, [sp]
 80093da:	9402      	str	r4, [sp, #8]
 80093dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80093e0:	9c08      	ldr	r4, [sp, #32]
 80093e2:	e028      	b.n	8009436 <_dtoa_r+0x2f6>
 80093e4:	f3af 8000 	nop.w
 80093e8:	636f4361 	.word	0x636f4361
 80093ec:	3fd287a7 	.word	0x3fd287a7
 80093f0:	8b60c8b3 	.word	0x8b60c8b3
 80093f4:	3fc68a28 	.word	0x3fc68a28
 80093f8:	509f79fb 	.word	0x509f79fb
 80093fc:	3fd34413 	.word	0x3fd34413
 8009400:	7ff00000 	.word	0x7ff00000
 8009404:	0800b871 	.word	0x0800b871
 8009408:	0800b894 	.word	0x0800b894
 800940c:	0800b8a0 	.word	0x0800b8a0
 8009410:	3ff80000 	.word	0x3ff80000
 8009414:	0800b8d0 	.word	0x0800b8d0
 8009418:	0800b870 	.word	0x0800b870
 800941c:	40240000 	.word	0x40240000
 8009420:	f7f7 fa34 	bl	800088c <__aeabi_dmul>
 8009424:	2200      	movs	r2, #0
 8009426:	2300      	movs	r3, #0
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1
 800942c:	f7f7 fc96 	bl	8000d5c <__aeabi_dcmpeq>
 8009430:	2800      	cmp	r0, #0
 8009432:	f040 83c5 	bne.w	8009bc0 <_dtoa_r+0xa80>
 8009436:	4642      	mov	r2, r8
 8009438:	464b      	mov	r3, r9
 800943a:	4630      	mov	r0, r6
 800943c:	4639      	mov	r1, r7
 800943e:	f7f7 fb4f 	bl	8000ae0 <__aeabi_ddiv>
 8009442:	f7f7 fcd3 	bl	8000dec <__aeabi_d2iz>
 8009446:	4683      	mov	fp, r0
 8009448:	f7f7 f9ba 	bl	80007c0 <__aeabi_i2d>
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	f7f7 fa1c 	bl	800088c <__aeabi_dmul>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4630      	mov	r0, r6
 800945a:	4639      	mov	r1, r7
 800945c:	f7f7 f862 	bl	8000524 <__aeabi_dsub>
 8009460:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
 8009464:	f805 eb01 	strb.w	lr, [r5], #1
 8009468:	eba5 0e0a 	sub.w	lr, r5, sl
 800946c:	45a6      	cmp	lr, r4
 800946e:	4606      	mov	r6, r0
 8009470:	460f      	mov	r7, r1
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	4b6e      	ldr	r3, [pc, #440]	; (8009630 <_dtoa_r+0x4f0>)
 8009478:	d1d2      	bne.n	8009420 <_dtoa_r+0x2e0>
 800947a:	f8dd a000 	ldr.w	sl, [sp]
 800947e:	9c02      	ldr	r4, [sp, #8]
 8009480:	4632      	mov	r2, r6
 8009482:	463b      	mov	r3, r7
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f7f7 f84e 	bl	8000528 <__adddf3>
 800948c:	4606      	mov	r6, r0
 800948e:	460f      	mov	r7, r1
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	f7f7 fc6a 	bl	8000d70 <__aeabi_dcmplt>
 800949c:	b948      	cbnz	r0, 80094b2 <_dtoa_r+0x372>
 800949e:	4632      	mov	r2, r6
 80094a0:	463b      	mov	r3, r7
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f7 fc59 	bl	8000d5c <__aeabi_dcmpeq>
 80094aa:	b1a8      	cbz	r0, 80094d8 <_dtoa_r+0x398>
 80094ac:	f01b 0f01 	tst.w	fp, #1
 80094b0:	d012      	beq.n	80094d8 <_dtoa_r+0x398>
 80094b2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80094b6:	9a07      	ldr	r2, [sp, #28]
 80094b8:	1e6b      	subs	r3, r5, #1
 80094ba:	e004      	b.n	80094c6 <_dtoa_r+0x386>
 80094bc:	429a      	cmp	r2, r3
 80094be:	f000 842d 	beq.w	8009d1c <_dtoa_r+0xbdc>
 80094c2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80094c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80094ca:	f103 0501 	add.w	r5, r3, #1
 80094ce:	d0f5      	beq.n	80094bc <_dtoa_r+0x37c>
 80094d0:	f108 0801 	add.w	r8, r8, #1
 80094d4:	f883 8000 	strb.w	r8, [r3]
 80094d8:	4651      	mov	r1, sl
 80094da:	4620      	mov	r0, r4
 80094dc:	f001 f83e 	bl	800a55c <_Bfree>
 80094e0:	2200      	movs	r2, #0
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	702a      	strb	r2, [r5, #0]
 80094e6:	9a03      	ldr	r2, [sp, #12]
 80094e8:	3301      	adds	r3, #1
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 83a3 	beq.w	8009c3a <_dtoa_r+0xafa>
 80094f4:	9807      	ldr	r0, [sp, #28]
 80094f6:	601d      	str	r5, [r3, #0]
 80094f8:	b017      	add	sp, #92	; 0x5c
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009500:	2a00      	cmp	r2, #0
 8009502:	d040      	beq.n	8009586 <_dtoa_r+0x446>
 8009504:	9a02      	ldr	r2, [sp, #8]
 8009506:	2a01      	cmp	r2, #1
 8009508:	f340 831c 	ble.w	8009b44 <_dtoa_r+0xa04>
 800950c:	9b08      	ldr	r3, [sp, #32]
 800950e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009510:	1e5f      	subs	r7, r3, #1
 8009512:	42ba      	cmp	r2, r7
 8009514:	f2c0 8394 	blt.w	8009c40 <_dtoa_r+0xb00>
 8009518:	1bd7      	subs	r7, r2, r7
 800951a:	9b08      	ldr	r3, [sp, #32]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f2c0 847e 	blt.w	8009e1e <_dtoa_r+0xcde>
 8009522:	9d06      	ldr	r5, [sp, #24]
 8009524:	9b08      	ldr	r3, [sp, #32]
 8009526:	9a06      	ldr	r2, [sp, #24]
 8009528:	441a      	add	r2, r3
 800952a:	9206      	str	r2, [sp, #24]
 800952c:	9a05      	ldr	r2, [sp, #20]
 800952e:	2101      	movs	r1, #1
 8009530:	441a      	add	r2, r3
 8009532:	4620      	mov	r0, r4
 8009534:	9205      	str	r2, [sp, #20]
 8009536:	f001 f8ab 	bl	800a690 <__i2b>
 800953a:	4606      	mov	r6, r0
 800953c:	e026      	b.n	800958c <_dtoa_r+0x44c>
 800953e:	2301      	movs	r3, #1
 8009540:	930c      	str	r3, [sp, #48]	; 0x30
 8009542:	e6b3      	b.n	80092ac <_dtoa_r+0x16c>
 8009544:	9a06      	ldr	r2, [sp, #24]
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	1ad2      	subs	r2, r2, r3
 800954a:	425b      	negs	r3, r3
 800954c:	930a      	str	r3, [sp, #40]	; 0x28
 800954e:	2300      	movs	r3, #0
 8009550:	9206      	str	r2, [sp, #24]
 8009552:	930b      	str	r3, [sp, #44]	; 0x2c
 8009554:	e6bd      	b.n	80092d2 <_dtoa_r+0x192>
 8009556:	f1c5 0301 	rsb	r3, r5, #1
 800955a:	9306      	str	r3, [sp, #24]
 800955c:	2300      	movs	r3, #0
 800955e:	9305      	str	r3, [sp, #20]
 8009560:	e6ac      	b.n	80092bc <_dtoa_r+0x17c>
 8009562:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8009566:	4648      	mov	r0, r9
 8009568:	f7f7 f92a 	bl	80007c0 <__aeabi_i2d>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4630      	mov	r0, r6
 8009572:	4639      	mov	r1, r7
 8009574:	f7f7 fbf2 	bl	8000d5c <__aeabi_dcmpeq>
 8009578:	2800      	cmp	r0, #0
 800957a:	f47f ae83 	bne.w	8009284 <_dtoa_r+0x144>
 800957e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	e67e      	b.n	8009284 <_dtoa_r+0x144>
 8009586:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009588:	9d06      	ldr	r5, [sp, #24]
 800958a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800958c:	2d00      	cmp	r5, #0
 800958e:	dd0c      	ble.n	80095aa <_dtoa_r+0x46a>
 8009590:	9905      	ldr	r1, [sp, #20]
 8009592:	2900      	cmp	r1, #0
 8009594:	460b      	mov	r3, r1
 8009596:	dd08      	ble.n	80095aa <_dtoa_r+0x46a>
 8009598:	42a9      	cmp	r1, r5
 800959a:	9a06      	ldr	r2, [sp, #24]
 800959c:	bfa8      	it	ge
 800959e:	462b      	movge	r3, r5
 80095a0:	1ad2      	subs	r2, r2, r3
 80095a2:	1aed      	subs	r5, r5, r3
 80095a4:	1acb      	subs	r3, r1, r3
 80095a6:	9206      	str	r2, [sp, #24]
 80095a8:	9305      	str	r3, [sp, #20]
 80095aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ac:	b1d3      	cbz	r3, 80095e4 <_dtoa_r+0x4a4>
 80095ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 82c0 	beq.w	8009b36 <_dtoa_r+0x9f6>
 80095b6:	2f00      	cmp	r7, #0
 80095b8:	dd10      	ble.n	80095dc <_dtoa_r+0x49c>
 80095ba:	4631      	mov	r1, r6
 80095bc:	463a      	mov	r2, r7
 80095be:	4620      	mov	r0, r4
 80095c0:	f001 f902 	bl	800a7c8 <__pow5mult>
 80095c4:	4652      	mov	r2, sl
 80095c6:	4601      	mov	r1, r0
 80095c8:	4606      	mov	r6, r0
 80095ca:	4620      	mov	r0, r4
 80095cc:	f001 f86a 	bl	800a6a4 <__multiply>
 80095d0:	4651      	mov	r1, sl
 80095d2:	4680      	mov	r8, r0
 80095d4:	4620      	mov	r0, r4
 80095d6:	f000 ffc1 	bl	800a55c <_Bfree>
 80095da:	46c2      	mov	sl, r8
 80095dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095de:	1bda      	subs	r2, r3, r7
 80095e0:	f040 82aa 	bne.w	8009b38 <_dtoa_r+0x9f8>
 80095e4:	2101      	movs	r1, #1
 80095e6:	4620      	mov	r0, r4
 80095e8:	f001 f852 	bl	800a690 <__i2b>
 80095ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	4681      	mov	r9, r0
 80095f2:	dd1f      	ble.n	8009634 <_dtoa_r+0x4f4>
 80095f4:	4601      	mov	r1, r0
 80095f6:	461a      	mov	r2, r3
 80095f8:	4620      	mov	r0, r4
 80095fa:	f001 f8e5 	bl	800a7c8 <__pow5mult>
 80095fe:	9b02      	ldr	r3, [sp, #8]
 8009600:	2b01      	cmp	r3, #1
 8009602:	4681      	mov	r9, r0
 8009604:	f340 825b 	ble.w	8009abe <_dtoa_r+0x97e>
 8009608:	f04f 0800 	mov.w	r8, #0
 800960c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009610:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8009614:	6918      	ldr	r0, [r3, #16]
 8009616:	f000 ffeb 	bl	800a5f0 <__hi0bits>
 800961a:	f1c0 0020 	rsb	r0, r0, #32
 800961e:	e013      	b.n	8009648 <_dtoa_r+0x508>
 8009620:	f1c3 0920 	rsb	r9, r3, #32
 8009624:	9b00      	ldr	r3, [sp, #0]
 8009626:	fa03 f009 	lsl.w	r0, r3, r9
 800962a:	e67a      	b.n	8009322 <_dtoa_r+0x1e2>
 800962c:	900c      	str	r0, [sp, #48]	; 0x30
 800962e:	e63d      	b.n	80092ac <_dtoa_r+0x16c>
 8009630:	40240000 	.word	0x40240000
 8009634:	9b02      	ldr	r3, [sp, #8]
 8009636:	2b01      	cmp	r3, #1
 8009638:	f340 828d 	ble.w	8009b56 <_dtoa_r+0xa16>
 800963c:	f04f 0800 	mov.w	r8, #0
 8009640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009642:	2001      	movs	r0, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e1      	bne.n	800960c <_dtoa_r+0x4cc>
 8009648:	9a05      	ldr	r2, [sp, #20]
 800964a:	4410      	add	r0, r2
 800964c:	f010 001f 	ands.w	r0, r0, #31
 8009650:	f000 80a1 	beq.w	8009796 <_dtoa_r+0x656>
 8009654:	f1c0 0320 	rsb	r3, r0, #32
 8009658:	2b04      	cmp	r3, #4
 800965a:	f340 848c 	ble.w	8009f76 <_dtoa_r+0xe36>
 800965e:	9b06      	ldr	r3, [sp, #24]
 8009660:	f1c0 001c 	rsb	r0, r0, #28
 8009664:	4403      	add	r3, r0
 8009666:	9306      	str	r3, [sp, #24]
 8009668:	4613      	mov	r3, r2
 800966a:	4403      	add	r3, r0
 800966c:	4405      	add	r5, r0
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	9b06      	ldr	r3, [sp, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	dd05      	ble.n	8009682 <_dtoa_r+0x542>
 8009676:	4651      	mov	r1, sl
 8009678:	461a      	mov	r2, r3
 800967a:	4620      	mov	r0, r4
 800967c:	f001 f8f4 	bl	800a868 <__lshift>
 8009680:	4682      	mov	sl, r0
 8009682:	9b05      	ldr	r3, [sp, #20]
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd05      	ble.n	8009694 <_dtoa_r+0x554>
 8009688:	4649      	mov	r1, r9
 800968a:	461a      	mov	r2, r3
 800968c:	4620      	mov	r0, r4
 800968e:	f001 f8eb 	bl	800a868 <__lshift>
 8009692:	4681      	mov	r9, r0
 8009694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009696:	2b00      	cmp	r3, #0
 8009698:	f040 8086 	bne.w	80097a8 <_dtoa_r+0x668>
 800969c:	9b08      	ldr	r3, [sp, #32]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f340 8269 	ble.w	8009b76 <_dtoa_r+0xa36>
 80096a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 8098 	beq.w	80097dc <_dtoa_r+0x69c>
 80096ac:	2d00      	cmp	r5, #0
 80096ae:	dd05      	ble.n	80096bc <_dtoa_r+0x57c>
 80096b0:	4631      	mov	r1, r6
 80096b2:	462a      	mov	r2, r5
 80096b4:	4620      	mov	r0, r4
 80096b6:	f001 f8d7 	bl	800a868 <__lshift>
 80096ba:	4606      	mov	r6, r0
 80096bc:	f1b8 0f00 	cmp.w	r8, #0
 80096c0:	f040 8336 	bne.w	8009d30 <_dtoa_r+0xbf0>
 80096c4:	46b0      	mov	r8, r6
 80096c6:	9b08      	ldr	r3, [sp, #32]
 80096c8:	9a07      	ldr	r2, [sp, #28]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	18d3      	adds	r3, r2, r3
 80096ce:	9308      	str	r3, [sp, #32]
 80096d0:	9b00      	ldr	r3, [sp, #0]
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	9309      	str	r3, [sp, #36]	; 0x24
 80096d8:	4617      	mov	r7, r2
 80096da:	4649      	mov	r1, r9
 80096dc:	4650      	mov	r0, sl
 80096de:	f7ff fc9b 	bl	8009018 <quorem>
 80096e2:	4631      	mov	r1, r6
 80096e4:	4605      	mov	r5, r0
 80096e6:	4650      	mov	r0, sl
 80096e8:	f001 f910 	bl	800a90c <__mcmp>
 80096ec:	4642      	mov	r2, r8
 80096ee:	4649      	mov	r1, r9
 80096f0:	4683      	mov	fp, r0
 80096f2:	4620      	mov	r0, r4
 80096f4:	f001 f926 	bl	800a944 <__mdiff>
 80096f8:	f105 0230 	add.w	r2, r5, #48	; 0x30
 80096fc:	9200      	str	r2, [sp, #0]
 80096fe:	68c2      	ldr	r2, [r0, #12]
 8009700:	4601      	mov	r1, r0
 8009702:	2a00      	cmp	r2, #0
 8009704:	f040 8232 	bne.w	8009b6c <_dtoa_r+0xa2c>
 8009708:	9006      	str	r0, [sp, #24]
 800970a:	4650      	mov	r0, sl
 800970c:	f001 f8fe 	bl	800a90c <__mcmp>
 8009710:	9b06      	ldr	r3, [sp, #24]
 8009712:	9005      	str	r0, [sp, #20]
 8009714:	4619      	mov	r1, r3
 8009716:	4620      	mov	r0, r4
 8009718:	f000 ff20 	bl	800a55c <_Bfree>
 800971c:	9a05      	ldr	r2, [sp, #20]
 800971e:	b932      	cbnz	r2, 800972e <_dtoa_r+0x5ee>
 8009720:	9b02      	ldr	r3, [sp, #8]
 8009722:	b923      	cbnz	r3, 800972e <_dtoa_r+0x5ee>
 8009724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 83de 	beq.w	8009ee8 <_dtoa_r+0xda8>
 800972c:	9a02      	ldr	r2, [sp, #8]
 800972e:	f1bb 0f00 	cmp.w	fp, #0
 8009732:	f2c0 82a2 	blt.w	8009c7a <_dtoa_r+0xb3a>
 8009736:	d105      	bne.n	8009744 <_dtoa_r+0x604>
 8009738:	9b02      	ldr	r3, [sp, #8]
 800973a:	b91b      	cbnz	r3, 8009744 <_dtoa_r+0x604>
 800973c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 829b 	beq.w	8009c7a <_dtoa_r+0xb3a>
 8009744:	2a00      	cmp	r2, #0
 8009746:	f300 8307 	bgt.w	8009d58 <_dtoa_r+0xc18>
 800974a:	f89d 3000 	ldrb.w	r3, [sp]
 800974e:	703b      	strb	r3, [r7, #0]
 8009750:	9b08      	ldr	r3, [sp, #32]
 8009752:	f107 0b01 	add.w	fp, r7, #1
 8009756:	429f      	cmp	r7, r3
 8009758:	465d      	mov	r5, fp
 800975a:	f000 8308 	beq.w	8009d6e <_dtoa_r+0xc2e>
 800975e:	4651      	mov	r1, sl
 8009760:	2300      	movs	r3, #0
 8009762:	220a      	movs	r2, #10
 8009764:	4620      	mov	r0, r4
 8009766:	f000 ff03 	bl	800a570 <__multadd>
 800976a:	4546      	cmp	r6, r8
 800976c:	4682      	mov	sl, r0
 800976e:	4631      	mov	r1, r6
 8009770:	f04f 0300 	mov.w	r3, #0
 8009774:	f04f 020a 	mov.w	r2, #10
 8009778:	4620      	mov	r0, r4
 800977a:	f000 81f1 	beq.w	8009b60 <_dtoa_r+0xa20>
 800977e:	f000 fef7 	bl	800a570 <__multadd>
 8009782:	4641      	mov	r1, r8
 8009784:	4606      	mov	r6, r0
 8009786:	2300      	movs	r3, #0
 8009788:	220a      	movs	r2, #10
 800978a:	4620      	mov	r0, r4
 800978c:	f000 fef0 	bl	800a570 <__multadd>
 8009790:	465f      	mov	r7, fp
 8009792:	4680      	mov	r8, r0
 8009794:	e7a1      	b.n	80096da <_dtoa_r+0x59a>
 8009796:	201c      	movs	r0, #28
 8009798:	9b06      	ldr	r3, [sp, #24]
 800979a:	4403      	add	r3, r0
 800979c:	9306      	str	r3, [sp, #24]
 800979e:	9b05      	ldr	r3, [sp, #20]
 80097a0:	4403      	add	r3, r0
 80097a2:	4405      	add	r5, r0
 80097a4:	9305      	str	r3, [sp, #20]
 80097a6:	e763      	b.n	8009670 <_dtoa_r+0x530>
 80097a8:	4649      	mov	r1, r9
 80097aa:	4650      	mov	r0, sl
 80097ac:	f001 f8ae 	bl	800a90c <__mcmp>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	f6bf af73 	bge.w	800969c <_dtoa_r+0x55c>
 80097b6:	9f04      	ldr	r7, [sp, #16]
 80097b8:	4651      	mov	r1, sl
 80097ba:	2300      	movs	r3, #0
 80097bc:	220a      	movs	r2, #10
 80097be:	4620      	mov	r0, r4
 80097c0:	3f01      	subs	r7, #1
 80097c2:	9704      	str	r7, [sp, #16]
 80097c4:	f000 fed4 	bl	800a570 <__multadd>
 80097c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ca:	4682      	mov	sl, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 83a7 	bne.w	8009f20 <_dtoa_r+0xde0>
 80097d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f340 83b0 	ble.w	8009f3a <_dtoa_r+0xdfa>
 80097da:	9308      	str	r3, [sp, #32]
 80097dc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80097e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097e4:	465d      	mov	r5, fp
 80097e6:	e002      	b.n	80097ee <_dtoa_r+0x6ae>
 80097e8:	f000 fec2 	bl	800a570 <__multadd>
 80097ec:	4682      	mov	sl, r0
 80097ee:	4649      	mov	r1, r9
 80097f0:	4650      	mov	r0, sl
 80097f2:	f7ff fc11 	bl	8009018 <quorem>
 80097f6:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80097fa:	f805 7b01 	strb.w	r7, [r5], #1
 80097fe:	eba5 030b 	sub.w	r3, r5, fp
 8009802:	4543      	cmp	r3, r8
 8009804:	f04f 020a 	mov.w	r2, #10
 8009808:	f04f 0300 	mov.w	r3, #0
 800980c:	4651      	mov	r1, sl
 800980e:	4620      	mov	r0, r4
 8009810:	dbea      	blt.n	80097e8 <_dtoa_r+0x6a8>
 8009812:	9b07      	ldr	r3, [sp, #28]
 8009814:	9a08      	ldr	r2, [sp, #32]
 8009816:	9700      	str	r7, [sp, #0]
 8009818:	2a01      	cmp	r2, #1
 800981a:	bfac      	ite	ge
 800981c:	189b      	addge	r3, r3, r2
 800981e:	3301      	addlt	r3, #1
 8009820:	461d      	mov	r5, r3
 8009822:	f04f 0b00 	mov.w	fp, #0
 8009826:	4651      	mov	r1, sl
 8009828:	2201      	movs	r2, #1
 800982a:	4620      	mov	r0, r4
 800982c:	f001 f81c 	bl	800a868 <__lshift>
 8009830:	4649      	mov	r1, r9
 8009832:	4682      	mov	sl, r0
 8009834:	f001 f86a 	bl	800a90c <__mcmp>
 8009838:	2800      	cmp	r0, #0
 800983a:	f340 823a 	ble.w	8009cb2 <_dtoa_r+0xb72>
 800983e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009842:	9907      	ldr	r1, [sp, #28]
 8009844:	1e6b      	subs	r3, r5, #1
 8009846:	e004      	b.n	8009852 <_dtoa_r+0x712>
 8009848:	428b      	cmp	r3, r1
 800984a:	f000 81af 	beq.w	8009bac <_dtoa_r+0xa6c>
 800984e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009852:	2a39      	cmp	r2, #57	; 0x39
 8009854:	f103 0501 	add.w	r5, r3, #1
 8009858:	d0f6      	beq.n	8009848 <_dtoa_r+0x708>
 800985a:	3201      	adds	r2, #1
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	4649      	mov	r1, r9
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fe7b 	bl	800a55c <_Bfree>
 8009866:	2e00      	cmp	r6, #0
 8009868:	f43f ae36 	beq.w	80094d8 <_dtoa_r+0x398>
 800986c:	f1bb 0f00 	cmp.w	fp, #0
 8009870:	d005      	beq.n	800987e <_dtoa_r+0x73e>
 8009872:	45b3      	cmp	fp, r6
 8009874:	d003      	beq.n	800987e <_dtoa_r+0x73e>
 8009876:	4659      	mov	r1, fp
 8009878:	4620      	mov	r0, r4
 800987a:	f000 fe6f 	bl	800a55c <_Bfree>
 800987e:	4631      	mov	r1, r6
 8009880:	4620      	mov	r0, r4
 8009882:	f000 fe6b 	bl	800a55c <_Bfree>
 8009886:	e627      	b.n	80094d8 <_dtoa_r+0x398>
 8009888:	2300      	movs	r3, #0
 800988a:	9309      	str	r3, [sp, #36]	; 0x24
 800988c:	9b04      	ldr	r3, [sp, #16]
 800988e:	445b      	add	r3, fp
 8009890:	930d      	str	r3, [sp, #52]	; 0x34
 8009892:	3301      	adds	r3, #1
 8009894:	2b01      	cmp	r3, #1
 8009896:	461e      	mov	r6, r3
 8009898:	461d      	mov	r5, r3
 800989a:	9308      	str	r3, [sp, #32]
 800989c:	bfb8      	it	lt
 800989e:	2601      	movlt	r6, #1
 80098a0:	2100      	movs	r1, #0
 80098a2:	2e17      	cmp	r6, #23
 80098a4:	6461      	str	r1, [r4, #68]	; 0x44
 80098a6:	d90a      	bls.n	80098be <_dtoa_r+0x77e>
 80098a8:	2201      	movs	r2, #1
 80098aa:	2304      	movs	r3, #4
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	f103 0014 	add.w	r0, r3, #20
 80098b2:	4286      	cmp	r6, r0
 80098b4:	4611      	mov	r1, r2
 80098b6:	f102 0201 	add.w	r2, r2, #1
 80098ba:	d2f7      	bcs.n	80098ac <_dtoa_r+0x76c>
 80098bc:	6461      	str	r1, [r4, #68]	; 0x44
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 fe26 	bl	800a510 <_Balloc>
 80098c4:	2d0e      	cmp	r5, #14
 80098c6:	9007      	str	r0, [sp, #28]
 80098c8:	6420      	str	r0, [r4, #64]	; 0x40
 80098ca:	f63f ad44 	bhi.w	8009356 <_dtoa_r+0x216>
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	f43f ad41 	beq.w	8009356 <_dtoa_r+0x216>
 80098d4:	9904      	ldr	r1, [sp, #16]
 80098d6:	2900      	cmp	r1, #0
 80098d8:	ed9d 7b00 	vldr	d7, [sp]
 80098dc:	f340 81f6 	ble.w	8009ccc <_dtoa_r+0xb8c>
 80098e0:	4bb9      	ldr	r3, [pc, #740]	; (8009bc8 <_dtoa_r+0xa88>)
 80098e2:	f001 020f 	and.w	r2, r1, #15
 80098e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ea:	110d      	asrs	r5, r1, #4
 80098ec:	e9d3 6700 	ldrd	r6, r7, [r3]
 80098f0:	06eb      	lsls	r3, r5, #27
 80098f2:	f140 81ad 	bpl.w	8009c50 <_dtoa_r+0xb10>
 80098f6:	4bb5      	ldr	r3, [pc, #724]	; (8009bcc <_dtoa_r+0xa8c>)
 80098f8:	ec51 0b17 	vmov	r0, r1, d7
 80098fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009900:	f7f7 f8ee 	bl	8000ae0 <__aeabi_ddiv>
 8009904:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009908:	f005 050f 	and.w	r5, r5, #15
 800990c:	f04f 0903 	mov.w	r9, #3
 8009910:	b18d      	cbz	r5, 8009936 <_dtoa_r+0x7f6>
 8009912:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8009bcc <_dtoa_r+0xa8c>
 8009916:	07e8      	lsls	r0, r5, #31
 8009918:	d509      	bpl.n	800992e <_dtoa_r+0x7ee>
 800991a:	4630      	mov	r0, r6
 800991c:	4639      	mov	r1, r7
 800991e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009922:	f7f6 ffb3 	bl	800088c <__aeabi_dmul>
 8009926:	f109 0901 	add.w	r9, r9, #1
 800992a:	4606      	mov	r6, r0
 800992c:	460f      	mov	r7, r1
 800992e:	106d      	asrs	r5, r5, #1
 8009930:	f108 0808 	add.w	r8, r8, #8
 8009934:	d1ef      	bne.n	8009916 <_dtoa_r+0x7d6>
 8009936:	463b      	mov	r3, r7
 8009938:	4632      	mov	r2, r6
 800993a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800993e:	f7f7 f8cf 	bl	8000ae0 <__aeabi_ddiv>
 8009942:	4607      	mov	r7, r0
 8009944:	4688      	mov	r8, r1
 8009946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009948:	b143      	cbz	r3, 800995c <_dtoa_r+0x81c>
 800994a:	2200      	movs	r2, #0
 800994c:	4ba0      	ldr	r3, [pc, #640]	; (8009bd0 <_dtoa_r+0xa90>)
 800994e:	4638      	mov	r0, r7
 8009950:	4641      	mov	r1, r8
 8009952:	f7f7 fa0d 	bl	8000d70 <__aeabi_dcmplt>
 8009956:	2800      	cmp	r0, #0
 8009958:	f040 8273 	bne.w	8009e42 <_dtoa_r+0xd02>
 800995c:	4648      	mov	r0, r9
 800995e:	f7f6 ff2f 	bl	80007c0 <__aeabi_i2d>
 8009962:	463a      	mov	r2, r7
 8009964:	4643      	mov	r3, r8
 8009966:	f7f6 ff91 	bl	800088c <__aeabi_dmul>
 800996a:	4b9a      	ldr	r3, [pc, #616]	; (8009bd4 <_dtoa_r+0xa94>)
 800996c:	2200      	movs	r2, #0
 800996e:	f7f6 fddb 	bl	8000528 <__adddf3>
 8009972:	9b08      	ldr	r3, [sp, #32]
 8009974:	4605      	mov	r5, r0
 8009976:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 8140 	beq.w	8009c00 <_dtoa_r+0xac0>
 8009980:	9b04      	ldr	r3, [sp, #16]
 8009982:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009986:	9311      	str	r3, [sp, #68]	; 0x44
 8009988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 81f6 	beq.w	8009d7c <_dtoa_r+0xc3c>
 8009990:	4b8d      	ldr	r3, [pc, #564]	; (8009bc8 <_dtoa_r+0xa88>)
 8009992:	4991      	ldr	r1, [pc, #580]	; (8009bd8 <_dtoa_r+0xa98>)
 8009994:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800999c:	2000      	movs	r0, #0
 800999e:	f7f7 f89f 	bl	8000ae0 <__aeabi_ddiv>
 80099a2:	462a      	mov	r2, r5
 80099a4:	4633      	mov	r3, r6
 80099a6:	f7f6 fdbd 	bl	8000524 <__aeabi_dsub>
 80099aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80099ae:	4641      	mov	r1, r8
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7f7 fa1b 	bl	8000dec <__aeabi_d2iz>
 80099b6:	4605      	mov	r5, r0
 80099b8:	f7f6 ff02 	bl	80007c0 <__aeabi_i2d>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4638      	mov	r0, r7
 80099c2:	4641      	mov	r1, r8
 80099c4:	f7f6 fdae 	bl	8000524 <__aeabi_dsub>
 80099c8:	3530      	adds	r5, #48	; 0x30
 80099ca:	fa5f f885 	uxtb.w	r8, r5
 80099ce:	9d07      	ldr	r5, [sp, #28]
 80099d0:	4606      	mov	r6, r0
 80099d2:	460f      	mov	r7, r1
 80099d4:	f885 8000 	strb.w	r8, [r5]
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80099e0:	3501      	adds	r5, #1
 80099e2:	f7f7 f9e3 	bl	8000dac <__aeabi_dcmpgt>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d156      	bne.n	8009a98 <_dtoa_r+0x958>
 80099ea:	4632      	mov	r2, r6
 80099ec:	463b      	mov	r3, r7
 80099ee:	2000      	movs	r0, #0
 80099f0:	4977      	ldr	r1, [pc, #476]	; (8009bd0 <_dtoa_r+0xa90>)
 80099f2:	f7f6 fd97 	bl	8000524 <__aeabi_dsub>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80099fe:	f7f7 f9d5 	bl	8000dac <__aeabi_dcmpgt>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f040 8262 	bne.w	8009ecc <_dtoa_r+0xd8c>
 8009a08:	f1b9 0f01 	cmp.w	r9, #1
 8009a0c:	f43f aca3 	beq.w	8009356 <_dtoa_r+0x216>
 8009a10:	9b07      	ldr	r3, [sp, #28]
 8009a12:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8009a16:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8009a1a:	4499      	add	r9, r3
 8009a1c:	46a0      	mov	r8, r4
 8009a1e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8009a22:	e00d      	b.n	8009a40 <_dtoa_r+0x900>
 8009a24:	2000      	movs	r0, #0
 8009a26:	496a      	ldr	r1, [pc, #424]	; (8009bd0 <_dtoa_r+0xa90>)
 8009a28:	f7f6 fd7c 	bl	8000524 <__aeabi_dsub>
 8009a2c:	4652      	mov	r2, sl
 8009a2e:	465b      	mov	r3, fp
 8009a30:	f7f7 f99e 	bl	8000d70 <__aeabi_dcmplt>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f040 8244 	bne.w	8009ec2 <_dtoa_r+0xd82>
 8009a3a:	454d      	cmp	r5, r9
 8009a3c:	f000 824a 	beq.w	8009ed4 <_dtoa_r+0xd94>
 8009a40:	4650      	mov	r0, sl
 8009a42:	4659      	mov	r1, fp
 8009a44:	2200      	movs	r2, #0
 8009a46:	4b65      	ldr	r3, [pc, #404]	; (8009bdc <_dtoa_r+0xa9c>)
 8009a48:	f7f6 ff20 	bl	800088c <__aeabi_dmul>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4b63      	ldr	r3, [pc, #396]	; (8009bdc <_dtoa_r+0xa9c>)
 8009a50:	4682      	mov	sl, r0
 8009a52:	468b      	mov	fp, r1
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f6 ff18 	bl	800088c <__aeabi_dmul>
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	4606      	mov	r6, r0
 8009a60:	f7f7 f9c4 	bl	8000dec <__aeabi_d2iz>
 8009a64:	4604      	mov	r4, r0
 8009a66:	f7f6 feab 	bl	80007c0 <__aeabi_i2d>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4630      	mov	r0, r6
 8009a70:	4639      	mov	r1, r7
 8009a72:	f7f6 fd57 	bl	8000524 <__aeabi_dsub>
 8009a76:	3430      	adds	r4, #48	; 0x30
 8009a78:	b2e4      	uxtb	r4, r4
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	465b      	mov	r3, fp
 8009a7e:	f805 4b01 	strb.w	r4, [r5], #1
 8009a82:	4606      	mov	r6, r0
 8009a84:	460f      	mov	r7, r1
 8009a86:	f7f7 f973 	bl	8000d70 <__aeabi_dcmplt>
 8009a8a:	4632      	mov	r2, r6
 8009a8c:	463b      	mov	r3, r7
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d0c8      	beq.n	8009a24 <_dtoa_r+0x8e4>
 8009a92:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8009a96:	4644      	mov	r4, r8
 8009a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	e51c      	b.n	80094d8 <_dtoa_r+0x398>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa2:	f1bb 0f00 	cmp.w	fp, #0
 8009aa6:	f340 80da 	ble.w	8009c5e <_dtoa_r+0xb1e>
 8009aaa:	465e      	mov	r6, fp
 8009aac:	465d      	mov	r5, fp
 8009aae:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8009ab2:	f8cd b020 	str.w	fp, [sp, #32]
 8009ab6:	e6f3      	b.n	80098a0 <_dtoa_r+0x760>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	9309      	str	r3, [sp, #36]	; 0x24
 8009abc:	e7f1      	b.n	8009aa2 <_dtoa_r+0x962>
 8009abe:	9b00      	ldr	r3, [sp, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f47f ada1 	bne.w	8009608 <_dtoa_r+0x4c8>
 8009ac6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009aca:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f47f adb4 	bne.w	800963c <_dtoa_r+0x4fc>
 8009ad4:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
 8009ad8:	0d3f      	lsrs	r7, r7, #20
 8009ada:	053f      	lsls	r7, r7, #20
 8009adc:	2f00      	cmp	r7, #0
 8009ade:	f000 8200 	beq.w	8009ee2 <_dtoa_r+0xda2>
 8009ae2:	9b06      	ldr	r3, [sp, #24]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	9306      	str	r3, [sp, #24]
 8009ae8:	9b05      	ldr	r3, [sp, #20]
 8009aea:	3301      	adds	r3, #1
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	f04f 0801 	mov.w	r8, #1
 8009af2:	e5a5      	b.n	8009640 <_dtoa_r+0x500>
 8009af4:	9b08      	ldr	r3, [sp, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f73f ac3e 	bgt.w	8009378 <_dtoa_r+0x238>
 8009afc:	f040 8099 	bne.w	8009c32 <_dtoa_r+0xaf2>
 8009b00:	4649      	mov	r1, r9
 8009b02:	2200      	movs	r2, #0
 8009b04:	4b36      	ldr	r3, [pc, #216]	; (8009be0 <_dtoa_r+0xaa0>)
 8009b06:	4640      	mov	r0, r8
 8009b08:	f7f6 fec0 	bl	800088c <__aeabi_dmul>
 8009b0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b10:	f7f7 f942 	bl	8000d98 <__aeabi_dcmpge>
 8009b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b18:	464e      	mov	r6, r9
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d03e      	beq.n	8009b9c <_dtoa_r+0xa5c>
 8009b1e:	ea6f 030b 	mvn.w	r3, fp
 8009b22:	9d07      	ldr	r5, [sp, #28]
 8009b24:	9304      	str	r3, [sp, #16]
 8009b26:	4649      	mov	r1, r9
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 fd17 	bl	800a55c <_Bfree>
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	f43f acd2 	beq.w	80094d8 <_dtoa_r+0x398>
 8009b34:	e6a3      	b.n	800987e <_dtoa_r+0x73e>
 8009b36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b38:	4651      	mov	r1, sl
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 fe44 	bl	800a7c8 <__pow5mult>
 8009b40:	4682      	mov	sl, r0
 8009b42:	e54f      	b.n	80095e4 <_dtoa_r+0x4a4>
 8009b44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	f000 816f 	beq.w	8009e2a <_dtoa_r+0xcea>
 8009b4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009b52:	9d06      	ldr	r5, [sp, #24]
 8009b54:	e4e7      	b.n	8009526 <_dtoa_r+0x3e6>
 8009b56:	9b00      	ldr	r3, [sp, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f47f ad6f 	bne.w	800963c <_dtoa_r+0x4fc>
 8009b5e:	e7b2      	b.n	8009ac6 <_dtoa_r+0x986>
 8009b60:	f000 fd06 	bl	800a570 <__multadd>
 8009b64:	465f      	mov	r7, fp
 8009b66:	4606      	mov	r6, r0
 8009b68:	4680      	mov	r8, r0
 8009b6a:	e5b6      	b.n	80096da <_dtoa_r+0x59a>
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f000 fcf5 	bl	800a55c <_Bfree>
 8009b72:	2201      	movs	r2, #1
 8009b74:	e5db      	b.n	800972e <_dtoa_r+0x5ee>
 8009b76:	9b02      	ldr	r3, [sp, #8]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	f77f ad93 	ble.w	80096a4 <_dtoa_r+0x564>
 8009b7e:	9b08      	ldr	r3, [sp, #32]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1cc      	bne.n	8009b1e <_dtoa_r+0x9de>
 8009b84:	4649      	mov	r1, r9
 8009b86:	2205      	movs	r2, #5
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 fcf1 	bl	800a570 <__multadd>
 8009b8e:	4601      	mov	r1, r0
 8009b90:	4681      	mov	r9, r0
 8009b92:	4650      	mov	r0, sl
 8009b94:	f000 feba 	bl	800a90c <__mcmp>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	ddc0      	ble.n	8009b1e <_dtoa_r+0x9de>
 8009b9c:	9a04      	ldr	r2, [sp, #16]
 8009b9e:	9907      	ldr	r1, [sp, #28]
 8009ba0:	2331      	movs	r3, #49	; 0x31
 8009ba2:	3201      	adds	r2, #1
 8009ba4:	9204      	str	r2, [sp, #16]
 8009ba6:	700b      	strb	r3, [r1, #0]
 8009ba8:	1c4d      	adds	r5, r1, #1
 8009baa:	e7bc      	b.n	8009b26 <_dtoa_r+0x9e6>
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	3201      	adds	r2, #1
 8009bb0:	9204      	str	r2, [sp, #16]
 8009bb2:	9a07      	ldr	r2, [sp, #28]
 8009bb4:	2331      	movs	r3, #49	; 0x31
 8009bb6:	7013      	strb	r3, [r2, #0]
 8009bb8:	e651      	b.n	800985e <_dtoa_r+0x71e>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bbe:	e665      	b.n	800988c <_dtoa_r+0x74c>
 8009bc0:	f8dd a000 	ldr.w	sl, [sp]
 8009bc4:	9c02      	ldr	r4, [sp, #8]
 8009bc6:	e487      	b.n	80094d8 <_dtoa_r+0x398>
 8009bc8:	0800b8d0 	.word	0x0800b8d0
 8009bcc:	0800b8a8 	.word	0x0800b8a8
 8009bd0:	3ff00000 	.word	0x3ff00000
 8009bd4:	401c0000 	.word	0x401c0000
 8009bd8:	3fe00000 	.word	0x3fe00000
 8009bdc:	40240000 	.word	0x40240000
 8009be0:	40140000 	.word	0x40140000
 8009be4:	4648      	mov	r0, r9
 8009be6:	f7f6 fdeb 	bl	80007c0 <__aeabi_i2d>
 8009bea:	463a      	mov	r2, r7
 8009bec:	4643      	mov	r3, r8
 8009bee:	f7f6 fe4d 	bl	800088c <__aeabi_dmul>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4bc4      	ldr	r3, [pc, #784]	; (8009f08 <_dtoa_r+0xdc8>)
 8009bf6:	f7f6 fc97 	bl	8000528 <__adddf3>
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c00:	4641      	mov	r1, r8
 8009c02:	2200      	movs	r2, #0
 8009c04:	4bc1      	ldr	r3, [pc, #772]	; (8009f0c <_dtoa_r+0xdcc>)
 8009c06:	4638      	mov	r0, r7
 8009c08:	f7f6 fc8c 	bl	8000524 <__aeabi_dsub>
 8009c0c:	462a      	mov	r2, r5
 8009c0e:	4633      	mov	r3, r6
 8009c10:	4680      	mov	r8, r0
 8009c12:	4689      	mov	r9, r1
 8009c14:	f7f7 f8ca 	bl	8000dac <__aeabi_dcmpgt>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	f040 80ab 	bne.w	8009d74 <_dtoa_r+0xc34>
 8009c1e:	462a      	mov	r2, r5
 8009c20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c24:	4640      	mov	r0, r8
 8009c26:	4649      	mov	r1, r9
 8009c28:	f7f7 f8a2 	bl	8000d70 <__aeabi_dcmplt>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	f43f ab92 	beq.w	8009356 <_dtoa_r+0x216>
 8009c32:	f04f 0900 	mov.w	r9, #0
 8009c36:	464e      	mov	r6, r9
 8009c38:	e771      	b.n	8009b1e <_dtoa_r+0x9de>
 8009c3a:	9807      	ldr	r0, [sp, #28]
 8009c3c:	f7ff bab8 	b.w	80091b0 <_dtoa_r+0x70>
 8009c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c44:	970a      	str	r7, [sp, #40]	; 0x28
 8009c46:	1afb      	subs	r3, r7, r3
 8009c48:	441a      	add	r2, r3
 8009c4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c4c:	2700      	movs	r7, #0
 8009c4e:	e464      	b.n	800951a <_dtoa_r+0x3da>
 8009c50:	ed9d 7b00 	vldr	d7, [sp]
 8009c54:	f04f 0902 	mov.w	r9, #2
 8009c58:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8009c5c:	e658      	b.n	8009910 <_dtoa_r+0x7d0>
 8009c5e:	2100      	movs	r1, #0
 8009c60:	6461      	str	r1, [r4, #68]	; 0x44
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fc54 	bl	800a510 <_Balloc>
 8009c68:	f04f 0b01 	mov.w	fp, #1
 8009c6c:	9007      	str	r0, [sp, #28]
 8009c6e:	6420      	str	r0, [r4, #64]	; 0x40
 8009c70:	f8cd b020 	str.w	fp, [sp, #32]
 8009c74:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8009c78:	e629      	b.n	80098ce <_dtoa_r+0x78e>
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	dd12      	ble.n	8009ca4 <_dtoa_r+0xb64>
 8009c7e:	4651      	mov	r1, sl
 8009c80:	2201      	movs	r2, #1
 8009c82:	4620      	mov	r0, r4
 8009c84:	f000 fdf0 	bl	800a868 <__lshift>
 8009c88:	4649      	mov	r1, r9
 8009c8a:	4682      	mov	sl, r0
 8009c8c:	f000 fe3e 	bl	800a90c <__mcmp>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	f340 8131 	ble.w	8009ef8 <_dtoa_r+0xdb8>
 8009c96:	9b00      	ldr	r3, [sp, #0]
 8009c98:	2b39      	cmp	r3, #57	; 0x39
 8009c9a:	f000 80f7 	beq.w	8009e8c <_dtoa_r+0xd4c>
 8009c9e:	f105 0331 	add.w	r3, r5, #49	; 0x31
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	f89d 3000 	ldrb.w	r3, [sp]
 8009ca8:	703b      	strb	r3, [r7, #0]
 8009caa:	46b3      	mov	fp, r6
 8009cac:	1c7d      	adds	r5, r7, #1
 8009cae:	4646      	mov	r6, r8
 8009cb0:	e5d5      	b.n	800985e <_dtoa_r+0x71e>
 8009cb2:	d104      	bne.n	8009cbe <_dtoa_r+0xb7e>
 8009cb4:	9b00      	ldr	r3, [sp, #0]
 8009cb6:	07db      	lsls	r3, r3, #31
 8009cb8:	d501      	bpl.n	8009cbe <_dtoa_r+0xb7e>
 8009cba:	e5c0      	b.n	800983e <_dtoa_r+0x6fe>
 8009cbc:	4615      	mov	r5, r2
 8009cbe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cc2:	2b30      	cmp	r3, #48	; 0x30
 8009cc4:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009cc8:	d0f8      	beq.n	8009cbc <_dtoa_r+0xb7c>
 8009cca:	e5c8      	b.n	800985e <_dtoa_r+0x71e>
 8009ccc:	f000 80b4 	beq.w	8009e38 <_dtoa_r+0xcf8>
 8009cd0:	9b04      	ldr	r3, [sp, #16]
 8009cd2:	425d      	negs	r5, r3
 8009cd4:	4b8e      	ldr	r3, [pc, #568]	; (8009f10 <_dtoa_r+0xdd0>)
 8009cd6:	f005 020f 	and.w	r2, r5, #15
 8009cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ce6:	f7f6 fdd1 	bl	800088c <__aeabi_dmul>
 8009cea:	112d      	asrs	r5, r5, #4
 8009cec:	4607      	mov	r7, r0
 8009cee:	4688      	mov	r8, r1
 8009cf0:	f000 8128 	beq.w	8009f44 <_dtoa_r+0xe04>
 8009cf4:	4e87      	ldr	r6, [pc, #540]	; (8009f14 <_dtoa_r+0xdd4>)
 8009cf6:	f04f 0902 	mov.w	r9, #2
 8009cfa:	07e9      	lsls	r1, r5, #31
 8009cfc:	d509      	bpl.n	8009d12 <_dtoa_r+0xbd2>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	4641      	mov	r1, r8
 8009d02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d06:	f7f6 fdc1 	bl	800088c <__aeabi_dmul>
 8009d0a:	f109 0901 	add.w	r9, r9, #1
 8009d0e:	4607      	mov	r7, r0
 8009d10:	4688      	mov	r8, r1
 8009d12:	106d      	asrs	r5, r5, #1
 8009d14:	f106 0608 	add.w	r6, r6, #8
 8009d18:	d1ef      	bne.n	8009cfa <_dtoa_r+0xbba>
 8009d1a:	e614      	b.n	8009946 <_dtoa_r+0x806>
 8009d1c:	9907      	ldr	r1, [sp, #28]
 8009d1e:	2230      	movs	r2, #48	; 0x30
 8009d20:	700a      	strb	r2, [r1, #0]
 8009d22:	9a04      	ldr	r2, [sp, #16]
 8009d24:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8009d28:	3201      	adds	r2, #1
 8009d2a:	9204      	str	r2, [sp, #16]
 8009d2c:	f7ff bbd0 	b.w	80094d0 <_dtoa_r+0x390>
 8009d30:	6871      	ldr	r1, [r6, #4]
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 fbec 	bl	800a510 <_Balloc>
 8009d38:	6933      	ldr	r3, [r6, #16]
 8009d3a:	3302      	adds	r3, #2
 8009d3c:	009a      	lsls	r2, r3, #2
 8009d3e:	4605      	mov	r5, r0
 8009d40:	f106 010c 	add.w	r1, r6, #12
 8009d44:	300c      	adds	r0, #12
 8009d46:	f7f6 fac3 	bl	80002d0 <memcpy>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 fd8a 	bl	800a868 <__lshift>
 8009d54:	4680      	mov	r8, r0
 8009d56:	e4b6      	b.n	80096c6 <_dtoa_r+0x586>
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	2b39      	cmp	r3, #57	; 0x39
 8009d5c:	f000 8096 	beq.w	8009e8c <_dtoa_r+0xd4c>
 8009d60:	9b00      	ldr	r3, [sp, #0]
 8009d62:	3301      	adds	r3, #1
 8009d64:	46b3      	mov	fp, r6
 8009d66:	703b      	strb	r3, [r7, #0]
 8009d68:	1c7d      	adds	r5, r7, #1
 8009d6a:	4646      	mov	r6, r8
 8009d6c:	e577      	b.n	800985e <_dtoa_r+0x71e>
 8009d6e:	46b3      	mov	fp, r6
 8009d70:	4646      	mov	r6, r8
 8009d72:	e558      	b.n	8009826 <_dtoa_r+0x6e6>
 8009d74:	f04f 0900 	mov.w	r9, #0
 8009d78:	464e      	mov	r6, r9
 8009d7a:	e70f      	b.n	8009b9c <_dtoa_r+0xa5c>
 8009d7c:	4964      	ldr	r1, [pc, #400]	; (8009f10 <_dtoa_r+0xdd0>)
 8009d7e:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8009d82:	462a      	mov	r2, r5
 8009d84:	4633      	mov	r3, r6
 8009d86:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009d8a:	f7f6 fd7f 	bl	800088c <__aeabi_dmul>
 8009d8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009d92:	4638      	mov	r0, r7
 8009d94:	4641      	mov	r1, r8
 8009d96:	f7f7 f829 	bl	8000dec <__aeabi_d2iz>
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	f7f6 fd10 	bl	80007c0 <__aeabi_i2d>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4638      	mov	r0, r7
 8009da6:	4641      	mov	r1, r8
 8009da8:	f7f6 fbbc 	bl	8000524 <__aeabi_dsub>
 8009dac:	9a07      	ldr	r2, [sp, #28]
 8009dae:	3530      	adds	r5, #48	; 0x30
 8009db0:	f1b9 0f01 	cmp.w	r9, #1
 8009db4:	7015      	strb	r5, [r2, #0]
 8009db6:	4606      	mov	r6, r0
 8009db8:	460f      	mov	r7, r1
 8009dba:	f102 0501 	add.w	r5, r2, #1
 8009dbe:	d01c      	beq.n	8009dfa <_dtoa_r+0xcba>
 8009dc0:	9b07      	ldr	r3, [sp, #28]
 8009dc2:	4499      	add	r9, r3
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4b54      	ldr	r3, [pc, #336]	; (8009f18 <_dtoa_r+0xdd8>)
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fd5e 	bl	800088c <__aeabi_dmul>
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	f7f7 f80a 	bl	8000dec <__aeabi_d2iz>
 8009dd8:	4680      	mov	r8, r0
 8009dda:	f7f6 fcf1 	bl	80007c0 <__aeabi_i2d>
 8009dde:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	4630      	mov	r0, r6
 8009de8:	4639      	mov	r1, r7
 8009dea:	f7f6 fb9b 	bl	8000524 <__aeabi_dsub>
 8009dee:	f805 8b01 	strb.w	r8, [r5], #1
 8009df2:	454d      	cmp	r5, r9
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	d1e4      	bne.n	8009dc4 <_dtoa_r+0xc84>
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4b47      	ldr	r3, [pc, #284]	; (8009f1c <_dtoa_r+0xddc>)
 8009dfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009e02:	f7f6 fb91 	bl	8000528 <__adddf3>
 8009e06:	4632      	mov	r2, r6
 8009e08:	463b      	mov	r3, r7
 8009e0a:	f7f6 ffb1 	bl	8000d70 <__aeabi_dcmplt>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d042      	beq.n	8009e98 <_dtoa_r+0xd58>
 8009e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8009e1a:	f7ff bb4c 	b.w	80094b6 <_dtoa_r+0x376>
 8009e1e:	9b06      	ldr	r3, [sp, #24]
 8009e20:	9a08      	ldr	r2, [sp, #32]
 8009e22:	1a9d      	subs	r5, r3, r2
 8009e24:	2300      	movs	r3, #0
 8009e26:	f7ff bb7e 	b.w	8009526 <_dtoa_r+0x3e6>
 8009e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009e2e:	9d06      	ldr	r5, [sp, #24]
 8009e30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e34:	f7ff bb77 	b.w	8009526 <_dtoa_r+0x3e6>
 8009e38:	e9dd 7800 	ldrd	r7, r8, [sp]
 8009e3c:	f04f 0902 	mov.w	r9, #2
 8009e40:	e581      	b.n	8009946 <_dtoa_r+0x806>
 8009e42:	9b08      	ldr	r3, [sp, #32]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f43f aecd 	beq.w	8009be4 <_dtoa_r+0xaa4>
 8009e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f77f aa82 	ble.w	8009356 <_dtoa_r+0x216>
 8009e52:	2200      	movs	r2, #0
 8009e54:	4b30      	ldr	r3, [pc, #192]	; (8009f18 <_dtoa_r+0xdd8>)
 8009e56:	4638      	mov	r0, r7
 8009e58:	4641      	mov	r1, r8
 8009e5a:	f7f6 fd17 	bl	800088c <__aeabi_dmul>
 8009e5e:	4607      	mov	r7, r0
 8009e60:	4688      	mov	r8, r1
 8009e62:	f109 0001 	add.w	r0, r9, #1
 8009e66:	f7f6 fcab 	bl	80007c0 <__aeabi_i2d>
 8009e6a:	463a      	mov	r2, r7
 8009e6c:	4643      	mov	r3, r8
 8009e6e:	f7f6 fd0d 	bl	800088c <__aeabi_dmul>
 8009e72:	2200      	movs	r2, #0
 8009e74:	4b24      	ldr	r3, [pc, #144]	; (8009f08 <_dtoa_r+0xdc8>)
 8009e76:	f7f6 fb57 	bl	8000528 <__adddf3>
 8009e7a:	9a04      	ldr	r2, [sp, #16]
 8009e7c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8009e80:	3a01      	subs	r2, #1
 8009e82:	4605      	mov	r5, r0
 8009e84:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009e88:	9211      	str	r2, [sp, #68]	; 0x44
 8009e8a:	e57d      	b.n	8009988 <_dtoa_r+0x848>
 8009e8c:	2239      	movs	r2, #57	; 0x39
 8009e8e:	46b3      	mov	fp, r6
 8009e90:	703a      	strb	r2, [r7, #0]
 8009e92:	4646      	mov	r6, r8
 8009e94:	1c7d      	adds	r5, r7, #1
 8009e96:	e4d4      	b.n	8009842 <_dtoa_r+0x702>
 8009e98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	491f      	ldr	r1, [pc, #124]	; (8009f1c <_dtoa_r+0xddc>)
 8009ea0:	f7f6 fb40 	bl	8000524 <__aeabi_dsub>
 8009ea4:	4632      	mov	r2, r6
 8009ea6:	463b      	mov	r3, r7
 8009ea8:	f7f6 ff80 	bl	8000dac <__aeabi_dcmpgt>
 8009eac:	b910      	cbnz	r0, 8009eb4 <_dtoa_r+0xd74>
 8009eae:	f7ff ba52 	b.w	8009356 <_dtoa_r+0x216>
 8009eb2:	4615      	mov	r5, r2
 8009eb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009eb8:	2b30      	cmp	r3, #48	; 0x30
 8009eba:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009ebe:	d0f8      	beq.n	8009eb2 <_dtoa_r+0xd72>
 8009ec0:	e5ea      	b.n	8009a98 <_dtoa_r+0x958>
 8009ec2:	4643      	mov	r3, r8
 8009ec4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8009ec8:	46a0      	mov	r8, r4
 8009eca:	461c      	mov	r4, r3
 8009ecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	f7ff baf1 	b.w	80094b6 <_dtoa_r+0x376>
 8009ed4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8009ed8:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8009edc:	4644      	mov	r4, r8
 8009ede:	f7ff ba3a 	b.w	8009356 <_dtoa_r+0x216>
 8009ee2:	46b8      	mov	r8, r7
 8009ee4:	f7ff bbac 	b.w	8009640 <_dtoa_r+0x500>
 8009ee8:	9b00      	ldr	r3, [sp, #0]
 8009eea:	2b39      	cmp	r3, #57	; 0x39
 8009eec:	d0ce      	beq.n	8009e8c <_dtoa_r+0xd4c>
 8009eee:	f1bb 0f00 	cmp.w	fp, #0
 8009ef2:	f73f aed4 	bgt.w	8009c9e <_dtoa_r+0xb5e>
 8009ef6:	e6d5      	b.n	8009ca4 <_dtoa_r+0xb64>
 8009ef8:	f47f aed4 	bne.w	8009ca4 <_dtoa_r+0xb64>
 8009efc:	9b00      	ldr	r3, [sp, #0]
 8009efe:	07da      	lsls	r2, r3, #31
 8009f00:	f57f aed0 	bpl.w	8009ca4 <_dtoa_r+0xb64>
 8009f04:	e6c7      	b.n	8009c96 <_dtoa_r+0xb56>
 8009f06:	bf00      	nop
 8009f08:	401c0000 	.word	0x401c0000
 8009f0c:	40140000 	.word	0x40140000
 8009f10:	0800b8d0 	.word	0x0800b8d0
 8009f14:	0800b8a8 	.word	0x0800b8a8
 8009f18:	40240000 	.word	0x40240000
 8009f1c:	3fe00000 	.word	0x3fe00000
 8009f20:	4631      	mov	r1, r6
 8009f22:	2300      	movs	r3, #0
 8009f24:	220a      	movs	r2, #10
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 fb22 	bl	800a570 <__multadd>
 8009f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	4606      	mov	r6, r0
 8009f32:	dd0a      	ble.n	8009f4a <_dtoa_r+0xe0a>
 8009f34:	9308      	str	r3, [sp, #32]
 8009f36:	f7ff bbb9 	b.w	80096ac <_dtoa_r+0x56c>
 8009f3a:	9b02      	ldr	r3, [sp, #8]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	dc22      	bgt.n	8009f86 <_dtoa_r+0xe46>
 8009f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f42:	e44a      	b.n	80097da <_dtoa_r+0x69a>
 8009f44:	f04f 0902 	mov.w	r9, #2
 8009f48:	e4fd      	b.n	8009946 <_dtoa_r+0x806>
 8009f4a:	9b02      	ldr	r3, [sp, #8]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	dc1a      	bgt.n	8009f86 <_dtoa_r+0xe46>
 8009f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f52:	e7ef      	b.n	8009f34 <_dtoa_r+0xdf4>
 8009f54:	2500      	movs	r5, #0
 8009f56:	6465      	str	r5, [r4, #68]	; 0x44
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fad8 	bl	800a510 <_Balloc>
 8009f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f64:	9308      	str	r3, [sp, #32]
 8009f66:	930d      	str	r3, [sp, #52]	; 0x34
 8009f68:	2301      	movs	r3, #1
 8009f6a:	9007      	str	r0, [sp, #28]
 8009f6c:	46ab      	mov	fp, r5
 8009f6e:	6420      	str	r0, [r4, #64]	; 0x40
 8009f70:	9309      	str	r3, [sp, #36]	; 0x24
 8009f72:	f7ff b9f0 	b.w	8009356 <_dtoa_r+0x216>
 8009f76:	f43f ab7b 	beq.w	8009670 <_dtoa_r+0x530>
 8009f7a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8009f7e:	e40b      	b.n	8009798 <_dtoa_r+0x658>
 8009f80:	2701      	movs	r7, #1
 8009f82:	f7ff b9af 	b.w	80092e4 <_dtoa_r+0x1a4>
 8009f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f88:	9308      	str	r3, [sp, #32]
 8009f8a:	e5f8      	b.n	8009b7e <_dtoa_r+0xa3e>

08009f8c <_localeconv_r>:
 8009f8c:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <_localeconv_r+0x14>)
 8009f8e:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <_localeconv_r+0x18>)
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8009f94:	2800      	cmp	r0, #0
 8009f96:	bf08      	it	eq
 8009f98:	4618      	moveq	r0, r3
 8009f9a:	30f0      	adds	r0, #240	; 0xf0
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	20000000 	.word	0x20000000
 8009fa4:	20000980 	.word	0x20000980

08009fa8 <_malloc_r>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	f101 060b 	add.w	r6, r1, #11
 8009fb0:	2e16      	cmp	r6, #22
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	f240 809e 	bls.w	800a0f6 <_malloc_r+0x14e>
 8009fba:	f036 0607 	bics.w	r6, r6, #7
 8009fbe:	f100 80bd 	bmi.w	800a13c <_malloc_r+0x194>
 8009fc2:	42b1      	cmp	r1, r6
 8009fc4:	f200 80ba 	bhi.w	800a13c <_malloc_r+0x194>
 8009fc8:	f000 fa9e 	bl	800a508 <__malloc_lock>
 8009fcc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8009fd0:	f0c0 8293 	bcc.w	800a4fa <_malloc_r+0x552>
 8009fd4:	0a73      	lsrs	r3, r6, #9
 8009fd6:	f000 80b8 	beq.w	800a14a <_malloc_r+0x1a2>
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	f200 8179 	bhi.w	800a2d2 <_malloc_r+0x32a>
 8009fe0:	09b3      	lsrs	r3, r6, #6
 8009fe2:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8009fe6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 8009fea:	00c3      	lsls	r3, r0, #3
 8009fec:	4fbf      	ldr	r7, [pc, #764]	; (800a2ec <_malloc_r+0x344>)
 8009fee:	443b      	add	r3, r7
 8009ff0:	f1a3 0108 	sub.w	r1, r3, #8
 8009ff4:	685c      	ldr	r4, [r3, #4]
 8009ff6:	42a1      	cmp	r1, r4
 8009ff8:	d106      	bne.n	800a008 <_malloc_r+0x60>
 8009ffa:	e00c      	b.n	800a016 <_malloc_r+0x6e>
 8009ffc:	2a00      	cmp	r2, #0
 8009ffe:	f280 80aa 	bge.w	800a156 <_malloc_r+0x1ae>
 800a002:	68e4      	ldr	r4, [r4, #12]
 800a004:	42a1      	cmp	r1, r4
 800a006:	d006      	beq.n	800a016 <_malloc_r+0x6e>
 800a008:	6863      	ldr	r3, [r4, #4]
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	1b9a      	subs	r2, r3, r6
 800a010:	2a0f      	cmp	r2, #15
 800a012:	ddf3      	ble.n	8009ffc <_malloc_r+0x54>
 800a014:	4670      	mov	r0, lr
 800a016:	693c      	ldr	r4, [r7, #16]
 800a018:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 800a300 <_malloc_r+0x358>
 800a01c:	4574      	cmp	r4, lr
 800a01e:	f000 81ab 	beq.w	800a378 <_malloc_r+0x3d0>
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	f023 0303 	bic.w	r3, r3, #3
 800a028:	1b9a      	subs	r2, r3, r6
 800a02a:	2a0f      	cmp	r2, #15
 800a02c:	f300 8190 	bgt.w	800a350 <_malloc_r+0x3a8>
 800a030:	2a00      	cmp	r2, #0
 800a032:	f8c7 e014 	str.w	lr, [r7, #20]
 800a036:	f8c7 e010 	str.w	lr, [r7, #16]
 800a03a:	f280 809d 	bge.w	800a178 <_malloc_r+0x1d0>
 800a03e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a042:	f080 8161 	bcs.w	800a308 <_malloc_r+0x360>
 800a046:	08db      	lsrs	r3, r3, #3
 800a048:	f103 0c01 	add.w	ip, r3, #1
 800a04c:	1099      	asrs	r1, r3, #2
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 800a054:	f8c4 8008 	str.w	r8, [r4, #8]
 800a058:	2301      	movs	r3, #1
 800a05a:	408b      	lsls	r3, r1
 800a05c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 800a060:	4313      	orrs	r3, r2
 800a062:	3908      	subs	r1, #8
 800a064:	60e1      	str	r1, [r4, #12]
 800a066:	607b      	str	r3, [r7, #4]
 800a068:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800a06c:	f8c8 400c 	str.w	r4, [r8, #12]
 800a070:	1082      	asrs	r2, r0, #2
 800a072:	2401      	movs	r4, #1
 800a074:	4094      	lsls	r4, r2
 800a076:	429c      	cmp	r4, r3
 800a078:	f200 808b 	bhi.w	800a192 <_malloc_r+0x1ea>
 800a07c:	421c      	tst	r4, r3
 800a07e:	d106      	bne.n	800a08e <_malloc_r+0xe6>
 800a080:	f020 0003 	bic.w	r0, r0, #3
 800a084:	0064      	lsls	r4, r4, #1
 800a086:	421c      	tst	r4, r3
 800a088:	f100 0004 	add.w	r0, r0, #4
 800a08c:	d0fa      	beq.n	800a084 <_malloc_r+0xdc>
 800a08e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800a092:	46cc      	mov	ip, r9
 800a094:	4680      	mov	r8, r0
 800a096:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800a09a:	459c      	cmp	ip, r3
 800a09c:	d107      	bne.n	800a0ae <_malloc_r+0x106>
 800a09e:	e16d      	b.n	800a37c <_malloc_r+0x3d4>
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	f280 817b 	bge.w	800a39c <_malloc_r+0x3f4>
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	459c      	cmp	ip, r3
 800a0aa:	f000 8167 	beq.w	800a37c <_malloc_r+0x3d4>
 800a0ae:	6859      	ldr	r1, [r3, #4]
 800a0b0:	f021 0103 	bic.w	r1, r1, #3
 800a0b4:	1b8a      	subs	r2, r1, r6
 800a0b6:	2a0f      	cmp	r2, #15
 800a0b8:	ddf2      	ble.n	800a0a0 <_malloc_r+0xf8>
 800a0ba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800a0be:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	199c      	adds	r4, r3, r6
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f046 0601 	orr.w	r6, r6, #1
 800a0cc:	f042 0501 	orr.w	r5, r2, #1
 800a0d0:	605e      	str	r6, [r3, #4]
 800a0d2:	f8c8 c00c 	str.w	ip, [r8, #12]
 800a0d6:	f8cc 8008 	str.w	r8, [ip, #8]
 800a0da:	617c      	str	r4, [r7, #20]
 800a0dc:	613c      	str	r4, [r7, #16]
 800a0de:	f8c4 e00c 	str.w	lr, [r4, #12]
 800a0e2:	f8c4 e008 	str.w	lr, [r4, #8]
 800a0e6:	6065      	str	r5, [r4, #4]
 800a0e8:	505a      	str	r2, [r3, r1]
 800a0ea:	f000 fa0f 	bl	800a50c <__malloc_unlock>
 800a0ee:	9b00      	ldr	r3, [sp, #0]
 800a0f0:	f103 0408 	add.w	r4, r3, #8
 800a0f4:	e01e      	b.n	800a134 <_malloc_r+0x18c>
 800a0f6:	2910      	cmp	r1, #16
 800a0f8:	d820      	bhi.n	800a13c <_malloc_r+0x194>
 800a0fa:	f000 fa05 	bl	800a508 <__malloc_lock>
 800a0fe:	2610      	movs	r6, #16
 800a100:	2318      	movs	r3, #24
 800a102:	2002      	movs	r0, #2
 800a104:	4f79      	ldr	r7, [pc, #484]	; (800a2ec <_malloc_r+0x344>)
 800a106:	443b      	add	r3, r7
 800a108:	f1a3 0208 	sub.w	r2, r3, #8
 800a10c:	685c      	ldr	r4, [r3, #4]
 800a10e:	4294      	cmp	r4, r2
 800a110:	f000 813d 	beq.w	800a38e <_malloc_r+0x3e6>
 800a114:	6863      	ldr	r3, [r4, #4]
 800a116:	68e1      	ldr	r1, [r4, #12]
 800a118:	68a6      	ldr	r6, [r4, #8]
 800a11a:	f023 0303 	bic.w	r3, r3, #3
 800a11e:	4423      	add	r3, r4
 800a120:	4628      	mov	r0, r5
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	60f1      	str	r1, [r6, #12]
 800a126:	f042 0201 	orr.w	r2, r2, #1
 800a12a:	608e      	str	r6, [r1, #8]
 800a12c:	605a      	str	r2, [r3, #4]
 800a12e:	f000 f9ed 	bl	800a50c <__malloc_unlock>
 800a132:	3408      	adds	r4, #8
 800a134:	4620      	mov	r0, r4
 800a136:	b003      	add	sp, #12
 800a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	2400      	movs	r4, #0
 800a13e:	230c      	movs	r3, #12
 800a140:	4620      	mov	r0, r4
 800a142:	602b      	str	r3, [r5, #0]
 800a144:	b003      	add	sp, #12
 800a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14a:	2040      	movs	r0, #64	; 0x40
 800a14c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a150:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800a154:	e74a      	b.n	8009fec <_malloc_r+0x44>
 800a156:	4423      	add	r3, r4
 800a158:	68e1      	ldr	r1, [r4, #12]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	68a6      	ldr	r6, [r4, #8]
 800a15e:	f042 0201 	orr.w	r2, r2, #1
 800a162:	60f1      	str	r1, [r6, #12]
 800a164:	4628      	mov	r0, r5
 800a166:	608e      	str	r6, [r1, #8]
 800a168:	605a      	str	r2, [r3, #4]
 800a16a:	f000 f9cf 	bl	800a50c <__malloc_unlock>
 800a16e:	3408      	adds	r4, #8
 800a170:	4620      	mov	r0, r4
 800a172:	b003      	add	sp, #12
 800a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a178:	4423      	add	r3, r4
 800a17a:	4628      	mov	r0, r5
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	f042 0201 	orr.w	r2, r2, #1
 800a182:	605a      	str	r2, [r3, #4]
 800a184:	f000 f9c2 	bl	800a50c <__malloc_unlock>
 800a188:	3408      	adds	r4, #8
 800a18a:	4620      	mov	r0, r4
 800a18c:	b003      	add	sp, #12
 800a18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a192:	68bc      	ldr	r4, [r7, #8]
 800a194:	6863      	ldr	r3, [r4, #4]
 800a196:	f023 0803 	bic.w	r8, r3, #3
 800a19a:	45b0      	cmp	r8, r6
 800a19c:	d304      	bcc.n	800a1a8 <_malloc_r+0x200>
 800a19e:	eba8 0306 	sub.w	r3, r8, r6
 800a1a2:	2b0f      	cmp	r3, #15
 800a1a4:	f300 8085 	bgt.w	800a2b2 <_malloc_r+0x30a>
 800a1a8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800a304 <_malloc_r+0x35c>
 800a1ac:	4b50      	ldr	r3, [pc, #320]	; (800a2f0 <_malloc_r+0x348>)
 800a1ae:	f8d9 2000 	ldr.w	r2, [r9]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3201      	adds	r2, #1
 800a1b6:	4433      	add	r3, r6
 800a1b8:	eb04 0a08 	add.w	sl, r4, r8
 800a1bc:	f000 8155 	beq.w	800a46a <_malloc_r+0x4c2>
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c4:	330f      	adds	r3, #15
 800a1c6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 800a1ca:	f02b 0b0f 	bic.w	fp, fp, #15
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f000 fc99 	bl	800ab08 <_sbrk_r>
 800a1d6:	1c41      	adds	r1, r0, #1
 800a1d8:	4602      	mov	r2, r0
 800a1da:	f000 80fc 	beq.w	800a3d6 <_malloc_r+0x42e>
 800a1de:	4582      	cmp	sl, r0
 800a1e0:	f200 80f7 	bhi.w	800a3d2 <_malloc_r+0x42a>
 800a1e4:	4b43      	ldr	r3, [pc, #268]	; (800a2f4 <_malloc_r+0x34c>)
 800a1e6:	6819      	ldr	r1, [r3, #0]
 800a1e8:	4459      	add	r1, fp
 800a1ea:	6019      	str	r1, [r3, #0]
 800a1ec:	f000 814d 	beq.w	800a48a <_malloc_r+0x4e2>
 800a1f0:	f8d9 0000 	ldr.w	r0, [r9]
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	bf1b      	ittet	ne
 800a1f8:	eba2 0a0a 	subne.w	sl, r2, sl
 800a1fc:	4451      	addne	r1, sl
 800a1fe:	f8c9 2000 	streq.w	r2, [r9]
 800a202:	6019      	strne	r1, [r3, #0]
 800a204:	f012 0107 	ands.w	r1, r2, #7
 800a208:	f000 8115 	beq.w	800a436 <_malloc_r+0x48e>
 800a20c:	f1c1 0008 	rsb	r0, r1, #8
 800a210:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800a214:	4402      	add	r2, r0
 800a216:	3108      	adds	r1, #8
 800a218:	eb02 090b 	add.w	r9, r2, fp
 800a21c:	f3c9 090b 	ubfx	r9, r9, #0, #12
 800a220:	eba1 0909 	sub.w	r9, r1, r9
 800a224:	4649      	mov	r1, r9
 800a226:	4628      	mov	r0, r5
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	9200      	str	r2, [sp, #0]
 800a22c:	f000 fc6c 	bl	800ab08 <_sbrk_r>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800a236:	f000 8143 	beq.w	800a4c0 <_malloc_r+0x518>
 800a23a:	1a80      	subs	r0, r0, r2
 800a23c:	4448      	add	r0, r9
 800a23e:	f040 0001 	orr.w	r0, r0, #1
 800a242:	6819      	ldr	r1, [r3, #0]
 800a244:	60ba      	str	r2, [r7, #8]
 800a246:	4449      	add	r1, r9
 800a248:	42bc      	cmp	r4, r7
 800a24a:	6050      	str	r0, [r2, #4]
 800a24c:	6019      	str	r1, [r3, #0]
 800a24e:	d017      	beq.n	800a280 <_malloc_r+0x2d8>
 800a250:	f1b8 0f0f 	cmp.w	r8, #15
 800a254:	f240 80fb 	bls.w	800a44e <_malloc_r+0x4a6>
 800a258:	6860      	ldr	r0, [r4, #4]
 800a25a:	f1a8 020c 	sub.w	r2, r8, #12
 800a25e:	f022 0207 	bic.w	r2, r2, #7
 800a262:	eb04 0e02 	add.w	lr, r4, r2
 800a266:	f000 0001 	and.w	r0, r0, #1
 800a26a:	f04f 0c05 	mov.w	ip, #5
 800a26e:	4310      	orrs	r0, r2
 800a270:	2a0f      	cmp	r2, #15
 800a272:	6060      	str	r0, [r4, #4]
 800a274:	f8ce c004 	str.w	ip, [lr, #4]
 800a278:	f8ce c008 	str.w	ip, [lr, #8]
 800a27c:	f200 8117 	bhi.w	800a4ae <_malloc_r+0x506>
 800a280:	4b1d      	ldr	r3, [pc, #116]	; (800a2f8 <_malloc_r+0x350>)
 800a282:	68bc      	ldr	r4, [r7, #8]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	4291      	cmp	r1, r2
 800a288:	bf88      	it	hi
 800a28a:	6019      	strhi	r1, [r3, #0]
 800a28c:	4b1b      	ldr	r3, [pc, #108]	; (800a2fc <_malloc_r+0x354>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4291      	cmp	r1, r2
 800a292:	6862      	ldr	r2, [r4, #4]
 800a294:	bf88      	it	hi
 800a296:	6019      	strhi	r1, [r3, #0]
 800a298:	f022 0203 	bic.w	r2, r2, #3
 800a29c:	4296      	cmp	r6, r2
 800a29e:	eba2 0306 	sub.w	r3, r2, r6
 800a2a2:	d801      	bhi.n	800a2a8 <_malloc_r+0x300>
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	dc04      	bgt.n	800a2b2 <_malloc_r+0x30a>
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f000 f92f 	bl	800a50c <__malloc_unlock>
 800a2ae:	2400      	movs	r4, #0
 800a2b0:	e740      	b.n	800a134 <_malloc_r+0x18c>
 800a2b2:	19a2      	adds	r2, r4, r6
 800a2b4:	f043 0301 	orr.w	r3, r3, #1
 800a2b8:	f046 0601 	orr.w	r6, r6, #1
 800a2bc:	6066      	str	r6, [r4, #4]
 800a2be:	4628      	mov	r0, r5
 800a2c0:	60ba      	str	r2, [r7, #8]
 800a2c2:	6053      	str	r3, [r2, #4]
 800a2c4:	f000 f922 	bl	800a50c <__malloc_unlock>
 800a2c8:	3408      	adds	r4, #8
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	b003      	add	sp, #12
 800a2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d2:	2b14      	cmp	r3, #20
 800a2d4:	d971      	bls.n	800a3ba <_malloc_r+0x412>
 800a2d6:	2b54      	cmp	r3, #84	; 0x54
 800a2d8:	f200 80a3 	bhi.w	800a422 <_malloc_r+0x47a>
 800a2dc:	0b33      	lsrs	r3, r6, #12
 800a2de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800a2e2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 800a2e6:	00c3      	lsls	r3, r0, #3
 800a2e8:	e680      	b.n	8009fec <_malloc_r+0x44>
 800a2ea:	bf00      	nop
 800a2ec:	20000570 	.word	0x20000570
 800a2f0:	20000c08 	.word	0x20000c08
 800a2f4:	20000bd8 	.word	0x20000bd8
 800a2f8:	20000c00 	.word	0x20000c00
 800a2fc:	20000c04 	.word	0x20000c04
 800a300:	20000578 	.word	0x20000578
 800a304:	20000978 	.word	0x20000978
 800a308:	0a5a      	lsrs	r2, r3, #9
 800a30a:	2a04      	cmp	r2, #4
 800a30c:	d95b      	bls.n	800a3c6 <_malloc_r+0x41e>
 800a30e:	2a14      	cmp	r2, #20
 800a310:	f200 80ae 	bhi.w	800a470 <_malloc_r+0x4c8>
 800a314:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800a318:	00c9      	lsls	r1, r1, #3
 800a31a:	325b      	adds	r2, #91	; 0x5b
 800a31c:	eb07 0c01 	add.w	ip, r7, r1
 800a320:	5879      	ldr	r1, [r7, r1]
 800a322:	f1ac 0c08 	sub.w	ip, ip, #8
 800a326:	458c      	cmp	ip, r1
 800a328:	f000 8088 	beq.w	800a43c <_malloc_r+0x494>
 800a32c:	684a      	ldr	r2, [r1, #4]
 800a32e:	f022 0203 	bic.w	r2, r2, #3
 800a332:	4293      	cmp	r3, r2
 800a334:	d273      	bcs.n	800a41e <_malloc_r+0x476>
 800a336:	6889      	ldr	r1, [r1, #8]
 800a338:	458c      	cmp	ip, r1
 800a33a:	d1f7      	bne.n	800a32c <_malloc_r+0x384>
 800a33c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	60e2      	str	r2, [r4, #12]
 800a344:	f8c4 c008 	str.w	ip, [r4, #8]
 800a348:	6094      	str	r4, [r2, #8]
 800a34a:	f8cc 400c 	str.w	r4, [ip, #12]
 800a34e:	e68f      	b.n	800a070 <_malloc_r+0xc8>
 800a350:	19a1      	adds	r1, r4, r6
 800a352:	f046 0c01 	orr.w	ip, r6, #1
 800a356:	f042 0601 	orr.w	r6, r2, #1
 800a35a:	f8c4 c004 	str.w	ip, [r4, #4]
 800a35e:	4628      	mov	r0, r5
 800a360:	6179      	str	r1, [r7, #20]
 800a362:	6139      	str	r1, [r7, #16]
 800a364:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a368:	f8c1 e008 	str.w	lr, [r1, #8]
 800a36c:	604e      	str	r6, [r1, #4]
 800a36e:	50e2      	str	r2, [r4, r3]
 800a370:	f000 f8cc 	bl	800a50c <__malloc_unlock>
 800a374:	3408      	adds	r4, #8
 800a376:	e6dd      	b.n	800a134 <_malloc_r+0x18c>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	e679      	b.n	800a070 <_malloc_r+0xc8>
 800a37c:	f108 0801 	add.w	r8, r8, #1
 800a380:	f018 0f03 	tst.w	r8, #3
 800a384:	f10c 0c08 	add.w	ip, ip, #8
 800a388:	f47f ae85 	bne.w	800a096 <_malloc_r+0xee>
 800a38c:	e02d      	b.n	800a3ea <_malloc_r+0x442>
 800a38e:	68dc      	ldr	r4, [r3, #12]
 800a390:	42a3      	cmp	r3, r4
 800a392:	bf08      	it	eq
 800a394:	3002      	addeq	r0, #2
 800a396:	f43f ae3e 	beq.w	800a016 <_malloc_r+0x6e>
 800a39a:	e6bb      	b.n	800a114 <_malloc_r+0x16c>
 800a39c:	4419      	add	r1, r3
 800a39e:	461c      	mov	r4, r3
 800a3a0:	684a      	ldr	r2, [r1, #4]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	f854 6f08 	ldr.w	r6, [r4, #8]!
 800a3a8:	f042 0201 	orr.w	r2, r2, #1
 800a3ac:	604a      	str	r2, [r1, #4]
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	60f3      	str	r3, [r6, #12]
 800a3b2:	609e      	str	r6, [r3, #8]
 800a3b4:	f000 f8aa 	bl	800a50c <__malloc_unlock>
 800a3b8:	e6bc      	b.n	800a134 <_malloc_r+0x18c>
 800a3ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800a3be:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 800a3c2:	00c3      	lsls	r3, r0, #3
 800a3c4:	e612      	b.n	8009fec <_malloc_r+0x44>
 800a3c6:	099a      	lsrs	r2, r3, #6
 800a3c8:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800a3cc:	00c9      	lsls	r1, r1, #3
 800a3ce:	3238      	adds	r2, #56	; 0x38
 800a3d0:	e7a4      	b.n	800a31c <_malloc_r+0x374>
 800a3d2:	42bc      	cmp	r4, r7
 800a3d4:	d054      	beq.n	800a480 <_malloc_r+0x4d8>
 800a3d6:	68bc      	ldr	r4, [r7, #8]
 800a3d8:	6862      	ldr	r2, [r4, #4]
 800a3da:	f022 0203 	bic.w	r2, r2, #3
 800a3de:	e75d      	b.n	800a29c <_malloc_r+0x2f4>
 800a3e0:	f859 3908 	ldr.w	r3, [r9], #-8
 800a3e4:	4599      	cmp	r9, r3
 800a3e6:	f040 8086 	bne.w	800a4f6 <_malloc_r+0x54e>
 800a3ea:	f010 0f03 	tst.w	r0, #3
 800a3ee:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800a3f2:	d1f5      	bne.n	800a3e0 <_malloc_r+0x438>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	ea23 0304 	bic.w	r3, r3, r4
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	0064      	lsls	r4, r4, #1
 800a3fe:	429c      	cmp	r4, r3
 800a400:	f63f aec7 	bhi.w	800a192 <_malloc_r+0x1ea>
 800a404:	2c00      	cmp	r4, #0
 800a406:	f43f aec4 	beq.w	800a192 <_malloc_r+0x1ea>
 800a40a:	421c      	tst	r4, r3
 800a40c:	4640      	mov	r0, r8
 800a40e:	f47f ae3e 	bne.w	800a08e <_malloc_r+0xe6>
 800a412:	0064      	lsls	r4, r4, #1
 800a414:	421c      	tst	r4, r3
 800a416:	f100 0004 	add.w	r0, r0, #4
 800a41a:	d0fa      	beq.n	800a412 <_malloc_r+0x46a>
 800a41c:	e637      	b.n	800a08e <_malloc_r+0xe6>
 800a41e:	468c      	mov	ip, r1
 800a420:	e78c      	b.n	800a33c <_malloc_r+0x394>
 800a422:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a426:	d815      	bhi.n	800a454 <_malloc_r+0x4ac>
 800a428:	0bf3      	lsrs	r3, r6, #15
 800a42a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800a42e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 800a432:	00c3      	lsls	r3, r0, #3
 800a434:	e5da      	b.n	8009fec <_malloc_r+0x44>
 800a436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a43a:	e6ed      	b.n	800a218 <_malloc_r+0x270>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	1092      	asrs	r2, r2, #2
 800a440:	2101      	movs	r1, #1
 800a442:	fa01 f202 	lsl.w	r2, r1, r2
 800a446:	4313      	orrs	r3, r2
 800a448:	607b      	str	r3, [r7, #4]
 800a44a:	4662      	mov	r2, ip
 800a44c:	e779      	b.n	800a342 <_malloc_r+0x39a>
 800a44e:	2301      	movs	r3, #1
 800a450:	6053      	str	r3, [r2, #4]
 800a452:	e729      	b.n	800a2a8 <_malloc_r+0x300>
 800a454:	f240 5254 	movw	r2, #1364	; 0x554
 800a458:	4293      	cmp	r3, r2
 800a45a:	d822      	bhi.n	800a4a2 <_malloc_r+0x4fa>
 800a45c:	0cb3      	lsrs	r3, r6, #18
 800a45e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800a462:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 800a466:	00c3      	lsls	r3, r0, #3
 800a468:	e5c0      	b.n	8009fec <_malloc_r+0x44>
 800a46a:	f103 0b10 	add.w	fp, r3, #16
 800a46e:	e6ae      	b.n	800a1ce <_malloc_r+0x226>
 800a470:	2a54      	cmp	r2, #84	; 0x54
 800a472:	d829      	bhi.n	800a4c8 <_malloc_r+0x520>
 800a474:	0b1a      	lsrs	r2, r3, #12
 800a476:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800a47a:	00c9      	lsls	r1, r1, #3
 800a47c:	326e      	adds	r2, #110	; 0x6e
 800a47e:	e74d      	b.n	800a31c <_malloc_r+0x374>
 800a480:	4b20      	ldr	r3, [pc, #128]	; (800a504 <_malloc_r+0x55c>)
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	4459      	add	r1, fp
 800a486:	6019      	str	r1, [r3, #0]
 800a488:	e6b2      	b.n	800a1f0 <_malloc_r+0x248>
 800a48a:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800a48e:	2800      	cmp	r0, #0
 800a490:	f47f aeae 	bne.w	800a1f0 <_malloc_r+0x248>
 800a494:	eb08 030b 	add.w	r3, r8, fp
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	f043 0301 	orr.w	r3, r3, #1
 800a49e:	6053      	str	r3, [r2, #4]
 800a4a0:	e6ee      	b.n	800a280 <_malloc_r+0x2d8>
 800a4a2:	207f      	movs	r0, #127	; 0x7f
 800a4a4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800a4a8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 800a4ac:	e59e      	b.n	8009fec <_malloc_r+0x44>
 800a4ae:	f104 0108 	add.w	r1, r4, #8
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	f000 fc37 	bl	800ad28 <_free_r>
 800a4ba:	9b00      	ldr	r3, [sp, #0]
 800a4bc:	6819      	ldr	r1, [r3, #0]
 800a4be:	e6df      	b.n	800a280 <_malloc_r+0x2d8>
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	e6bc      	b.n	800a242 <_malloc_r+0x29a>
 800a4c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a4cc:	d805      	bhi.n	800a4da <_malloc_r+0x532>
 800a4ce:	0bda      	lsrs	r2, r3, #15
 800a4d0:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800a4d4:	00c9      	lsls	r1, r1, #3
 800a4d6:	3277      	adds	r2, #119	; 0x77
 800a4d8:	e720      	b.n	800a31c <_malloc_r+0x374>
 800a4da:	f240 5154 	movw	r1, #1364	; 0x554
 800a4de:	428a      	cmp	r2, r1
 800a4e0:	d805      	bhi.n	800a4ee <_malloc_r+0x546>
 800a4e2:	0c9a      	lsrs	r2, r3, #18
 800a4e4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800a4e8:	00c9      	lsls	r1, r1, #3
 800a4ea:	327c      	adds	r2, #124	; 0x7c
 800a4ec:	e716      	b.n	800a31c <_malloc_r+0x374>
 800a4ee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a4f2:	227e      	movs	r2, #126	; 0x7e
 800a4f4:	e712      	b.n	800a31c <_malloc_r+0x374>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	e780      	b.n	800a3fc <_malloc_r+0x454>
 800a4fa:	08f0      	lsrs	r0, r6, #3
 800a4fc:	f106 0308 	add.w	r3, r6, #8
 800a500:	e600      	b.n	800a104 <_malloc_r+0x15c>
 800a502:	bf00      	nop
 800a504:	20000bd8 	.word	0x20000bd8

0800a508 <__malloc_lock>:
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop

0800a50c <__malloc_unlock>:
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop

0800a510 <_Balloc>:
 800a510:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a512:	b570      	push	{r4, r5, r6, lr}
 800a514:	4605      	mov	r5, r0
 800a516:	460c      	mov	r4, r1
 800a518:	b14b      	cbz	r3, 800a52e <_Balloc+0x1e>
 800a51a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a51e:	b180      	cbz	r0, 800a542 <_Balloc+0x32>
 800a520:	6802      	ldr	r2, [r0, #0]
 800a522:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a526:	2300      	movs	r3, #0
 800a528:	6103      	str	r3, [r0, #16]
 800a52a:	60c3      	str	r3, [r0, #12]
 800a52c:	bd70      	pop	{r4, r5, r6, pc}
 800a52e:	2221      	movs	r2, #33	; 0x21
 800a530:	2104      	movs	r1, #4
 800a532:	f000 fb79 	bl	800ac28 <_calloc_r>
 800a536:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a538:	4603      	mov	r3, r0
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d1ed      	bne.n	800a51a <_Balloc+0xa>
 800a53e:	2000      	movs	r0, #0
 800a540:	bd70      	pop	{r4, r5, r6, pc}
 800a542:	2101      	movs	r1, #1
 800a544:	fa01 f604 	lsl.w	r6, r1, r4
 800a548:	1d72      	adds	r2, r6, #5
 800a54a:	4628      	mov	r0, r5
 800a54c:	0092      	lsls	r2, r2, #2
 800a54e:	f000 fb6b 	bl	800ac28 <_calloc_r>
 800a552:	2800      	cmp	r0, #0
 800a554:	d0f3      	beq.n	800a53e <_Balloc+0x2e>
 800a556:	6044      	str	r4, [r0, #4]
 800a558:	6086      	str	r6, [r0, #8]
 800a55a:	e7e4      	b.n	800a526 <_Balloc+0x16>

0800a55c <_Bfree>:
 800a55c:	b131      	cbz	r1, 800a56c <_Bfree+0x10>
 800a55e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a560:	684a      	ldr	r2, [r1, #4]
 800a562:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a566:	6008      	str	r0, [r1, #0]
 800a568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop

0800a570 <__multadd>:
 800a570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a572:	690c      	ldr	r4, [r1, #16]
 800a574:	b083      	sub	sp, #12
 800a576:	460d      	mov	r5, r1
 800a578:	4606      	mov	r6, r0
 800a57a:	f101 0e14 	add.w	lr, r1, #20
 800a57e:	2700      	movs	r7, #0
 800a580:	f8de 0000 	ldr.w	r0, [lr]
 800a584:	b281      	uxth	r1, r0
 800a586:	fb02 3301 	mla	r3, r2, r1, r3
 800a58a:	0c01      	lsrs	r1, r0, #16
 800a58c:	0c18      	lsrs	r0, r3, #16
 800a58e:	fb02 0101 	mla	r1, r2, r1, r0
 800a592:	b29b      	uxth	r3, r3
 800a594:	3701      	adds	r7, #1
 800a596:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800a59a:	42bc      	cmp	r4, r7
 800a59c:	f84e 3b04 	str.w	r3, [lr], #4
 800a5a0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a5a4:	dcec      	bgt.n	800a580 <__multadd+0x10>
 800a5a6:	b13b      	cbz	r3, 800a5b8 <__multadd+0x48>
 800a5a8:	68aa      	ldr	r2, [r5, #8]
 800a5aa:	4294      	cmp	r4, r2
 800a5ac:	da07      	bge.n	800a5be <__multadd+0x4e>
 800a5ae:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800a5b2:	3401      	adds	r4, #1
 800a5b4:	6153      	str	r3, [r2, #20]
 800a5b6:	612c      	str	r4, [r5, #16]
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	b003      	add	sp, #12
 800a5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5be:	6869      	ldr	r1, [r5, #4]
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	3101      	adds	r1, #1
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f7ff ffa3 	bl	800a510 <_Balloc>
 800a5ca:	692a      	ldr	r2, [r5, #16]
 800a5cc:	3202      	adds	r2, #2
 800a5ce:	f105 010c 	add.w	r1, r5, #12
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	0092      	lsls	r2, r2, #2
 800a5d6:	300c      	adds	r0, #12
 800a5d8:	f7f5 fe7a 	bl	80002d0 <memcpy>
 800a5dc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800a5de:	6869      	ldr	r1, [r5, #4]
 800a5e0:	9b01      	ldr	r3, [sp, #4]
 800a5e2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800a5e6:	6028      	str	r0, [r5, #0]
 800a5e8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800a5ec:	463d      	mov	r5, r7
 800a5ee:	e7de      	b.n	800a5ae <__multadd+0x3e>

0800a5f0 <__hi0bits>:
 800a5f0:	0c02      	lsrs	r2, r0, #16
 800a5f2:	0412      	lsls	r2, r2, #16
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	b9b2      	cbnz	r2, 800a626 <__hi0bits+0x36>
 800a5f8:	0403      	lsls	r3, r0, #16
 800a5fa:	2010      	movs	r0, #16
 800a5fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a600:	bf04      	itt	eq
 800a602:	021b      	lsleq	r3, r3, #8
 800a604:	3008      	addeq	r0, #8
 800a606:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a60a:	bf04      	itt	eq
 800a60c:	011b      	lsleq	r3, r3, #4
 800a60e:	3004      	addeq	r0, #4
 800a610:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a614:	bf04      	itt	eq
 800a616:	009b      	lsleq	r3, r3, #2
 800a618:	3002      	addeq	r0, #2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	db02      	blt.n	800a624 <__hi0bits+0x34>
 800a61e:	005b      	lsls	r3, r3, #1
 800a620:	d403      	bmi.n	800a62a <__hi0bits+0x3a>
 800a622:	2020      	movs	r0, #32
 800a624:	4770      	bx	lr
 800a626:	2000      	movs	r0, #0
 800a628:	e7e8      	b.n	800a5fc <__hi0bits+0xc>
 800a62a:	3001      	adds	r0, #1
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop

0800a630 <__lo0bits>:
 800a630:	6803      	ldr	r3, [r0, #0]
 800a632:	f013 0207 	ands.w	r2, r3, #7
 800a636:	4601      	mov	r1, r0
 800a638:	d007      	beq.n	800a64a <__lo0bits+0x1a>
 800a63a:	07da      	lsls	r2, r3, #31
 800a63c:	d421      	bmi.n	800a682 <__lo0bits+0x52>
 800a63e:	0798      	lsls	r0, r3, #30
 800a640:	d421      	bmi.n	800a686 <__lo0bits+0x56>
 800a642:	089b      	lsrs	r3, r3, #2
 800a644:	600b      	str	r3, [r1, #0]
 800a646:	2002      	movs	r0, #2
 800a648:	4770      	bx	lr
 800a64a:	b298      	uxth	r0, r3
 800a64c:	b198      	cbz	r0, 800a676 <__lo0bits+0x46>
 800a64e:	4610      	mov	r0, r2
 800a650:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a654:	bf04      	itt	eq
 800a656:	0a1b      	lsreq	r3, r3, #8
 800a658:	3008      	addeq	r0, #8
 800a65a:	071a      	lsls	r2, r3, #28
 800a65c:	bf04      	itt	eq
 800a65e:	091b      	lsreq	r3, r3, #4
 800a660:	3004      	addeq	r0, #4
 800a662:	079a      	lsls	r2, r3, #30
 800a664:	bf04      	itt	eq
 800a666:	089b      	lsreq	r3, r3, #2
 800a668:	3002      	addeq	r0, #2
 800a66a:	07da      	lsls	r2, r3, #31
 800a66c:	d407      	bmi.n	800a67e <__lo0bits+0x4e>
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	d104      	bne.n	800a67c <__lo0bits+0x4c>
 800a672:	2020      	movs	r0, #32
 800a674:	4770      	bx	lr
 800a676:	0c1b      	lsrs	r3, r3, #16
 800a678:	2010      	movs	r0, #16
 800a67a:	e7e9      	b.n	800a650 <__lo0bits+0x20>
 800a67c:	3001      	adds	r0, #1
 800a67e:	600b      	str	r3, [r1, #0]
 800a680:	4770      	bx	lr
 800a682:	2000      	movs	r0, #0
 800a684:	4770      	bx	lr
 800a686:	085b      	lsrs	r3, r3, #1
 800a688:	600b      	str	r3, [r1, #0]
 800a68a:	2001      	movs	r0, #1
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop

0800a690 <__i2b>:
 800a690:	b510      	push	{r4, lr}
 800a692:	460c      	mov	r4, r1
 800a694:	2101      	movs	r1, #1
 800a696:	f7ff ff3b 	bl	800a510 <_Balloc>
 800a69a:	2201      	movs	r2, #1
 800a69c:	6144      	str	r4, [r0, #20]
 800a69e:	6102      	str	r2, [r0, #16]
 800a6a0:	bd10      	pop	{r4, pc}
 800a6a2:	bf00      	nop

0800a6a4 <__multiply>:
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	690c      	ldr	r4, [r1, #16]
 800a6aa:	6915      	ldr	r5, [r2, #16]
 800a6ac:	42ac      	cmp	r4, r5
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	468b      	mov	fp, r1
 800a6b2:	4616      	mov	r6, r2
 800a6b4:	da04      	bge.n	800a6c0 <__multiply+0x1c>
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	46b3      	mov	fp, r6
 800a6ba:	462c      	mov	r4, r5
 800a6bc:	460e      	mov	r6, r1
 800a6be:	4615      	mov	r5, r2
 800a6c0:	f8db 3008 	ldr.w	r3, [fp, #8]
 800a6c4:	f8db 1004 	ldr.w	r1, [fp, #4]
 800a6c8:	eb04 0805 	add.w	r8, r4, r5
 800a6cc:	4598      	cmp	r8, r3
 800a6ce:	bfc8      	it	gt
 800a6d0:	3101      	addgt	r1, #1
 800a6d2:	f7ff ff1d 	bl	800a510 <_Balloc>
 800a6d6:	f100 0914 	add.w	r9, r0, #20
 800a6da:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800a6de:	45d1      	cmp	r9, sl
 800a6e0:	9000      	str	r0, [sp, #0]
 800a6e2:	d205      	bcs.n	800a6f0 <__multiply+0x4c>
 800a6e4:	464b      	mov	r3, r9
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	f843 1b04 	str.w	r1, [r3], #4
 800a6ec:	459a      	cmp	sl, r3
 800a6ee:	d8fb      	bhi.n	800a6e8 <__multiply+0x44>
 800a6f0:	f106 0c14 	add.w	ip, r6, #20
 800a6f4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
 800a6f8:	f10b 0b14 	add.w	fp, fp, #20
 800a6fc:	459c      	cmp	ip, r3
 800a6fe:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
 800a702:	d24c      	bcs.n	800a79e <__multiply+0xfa>
 800a704:	f8cd a004 	str.w	sl, [sp, #4]
 800a708:	469a      	mov	sl, r3
 800a70a:	f8dc 5000 	ldr.w	r5, [ip]
 800a70e:	b2af      	uxth	r7, r5
 800a710:	b1ef      	cbz	r7, 800a74e <__multiply+0xaa>
 800a712:	2100      	movs	r1, #0
 800a714:	464d      	mov	r5, r9
 800a716:	465e      	mov	r6, fp
 800a718:	460c      	mov	r4, r1
 800a71a:	f856 2b04 	ldr.w	r2, [r6], #4
 800a71e:	6828      	ldr	r0, [r5, #0]
 800a720:	b293      	uxth	r3, r2
 800a722:	b281      	uxth	r1, r0
 800a724:	fb07 1303 	mla	r3, r7, r3, r1
 800a728:	0c12      	lsrs	r2, r2, #16
 800a72a:	0c01      	lsrs	r1, r0, #16
 800a72c:	4423      	add	r3, r4
 800a72e:	fb07 1102 	mla	r1, r7, r2, r1
 800a732:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 800a736:	b29b      	uxth	r3, r3
 800a738:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a73c:	45b6      	cmp	lr, r6
 800a73e:	f845 3b04 	str.w	r3, [r5], #4
 800a742:	ea4f 4411 	mov.w	r4, r1, lsr #16
 800a746:	d8e8      	bhi.n	800a71a <__multiply+0x76>
 800a748:	602c      	str	r4, [r5, #0]
 800a74a:	f8dc 5000 	ldr.w	r5, [ip]
 800a74e:	0c2d      	lsrs	r5, r5, #16
 800a750:	d01d      	beq.n	800a78e <__multiply+0xea>
 800a752:	f8d9 3000 	ldr.w	r3, [r9]
 800a756:	4648      	mov	r0, r9
 800a758:	461c      	mov	r4, r3
 800a75a:	4659      	mov	r1, fp
 800a75c:	2200      	movs	r2, #0
 800a75e:	880e      	ldrh	r6, [r1, #0]
 800a760:	0c24      	lsrs	r4, r4, #16
 800a762:	fb05 4406 	mla	r4, r5, r6, r4
 800a766:	4422      	add	r2, r4
 800a768:	b29b      	uxth	r3, r3
 800a76a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a76e:	f840 3b04 	str.w	r3, [r0], #4
 800a772:	f851 3b04 	ldr.w	r3, [r1], #4
 800a776:	6804      	ldr	r4, [r0, #0]
 800a778:	0c1b      	lsrs	r3, r3, #16
 800a77a:	b2a6      	uxth	r6, r4
 800a77c:	fb05 6303 	mla	r3, r5, r3, r6
 800a780:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a784:	458e      	cmp	lr, r1
 800a786:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800a78a:	d8e8      	bhi.n	800a75e <__multiply+0xba>
 800a78c:	6003      	str	r3, [r0, #0]
 800a78e:	f10c 0c04 	add.w	ip, ip, #4
 800a792:	45e2      	cmp	sl, ip
 800a794:	f109 0904 	add.w	r9, r9, #4
 800a798:	d8b7      	bhi.n	800a70a <__multiply+0x66>
 800a79a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800a79e:	f1b8 0f00 	cmp.w	r8, #0
 800a7a2:	dd0b      	ble.n	800a7bc <__multiply+0x118>
 800a7a4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 800a7a8:	f1aa 0a04 	sub.w	sl, sl, #4
 800a7ac:	b11b      	cbz	r3, 800a7b6 <__multiply+0x112>
 800a7ae:	e005      	b.n	800a7bc <__multiply+0x118>
 800a7b0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 800a7b4:	b913      	cbnz	r3, 800a7bc <__multiply+0x118>
 800a7b6:	f1b8 0801 	subs.w	r8, r8, #1
 800a7ba:	d1f9      	bne.n	800a7b0 <__multiply+0x10c>
 800a7bc:	9800      	ldr	r0, [sp, #0]
 800a7be:	f8c0 8010 	str.w	r8, [r0, #16]
 800a7c2:	b003      	add	sp, #12
 800a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7c8 <__pow5mult>:
 800a7c8:	f012 0303 	ands.w	r3, r2, #3
 800a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	4607      	mov	r7, r0
 800a7d4:	d12e      	bne.n	800a834 <__pow5mult+0x6c>
 800a7d6:	460d      	mov	r5, r1
 800a7d8:	10a4      	asrs	r4, r4, #2
 800a7da:	d01c      	beq.n	800a816 <__pow5mult+0x4e>
 800a7dc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800a7de:	b396      	cbz	r6, 800a846 <__pow5mult+0x7e>
 800a7e0:	07e3      	lsls	r3, r4, #31
 800a7e2:	f04f 0800 	mov.w	r8, #0
 800a7e6:	d406      	bmi.n	800a7f6 <__pow5mult+0x2e>
 800a7e8:	1064      	asrs	r4, r4, #1
 800a7ea:	d014      	beq.n	800a816 <__pow5mult+0x4e>
 800a7ec:	6830      	ldr	r0, [r6, #0]
 800a7ee:	b1a8      	cbz	r0, 800a81c <__pow5mult+0x54>
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	07e3      	lsls	r3, r4, #31
 800a7f4:	d5f8      	bpl.n	800a7e8 <__pow5mult+0x20>
 800a7f6:	4632      	mov	r2, r6
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	f7ff ff52 	bl	800a6a4 <__multiply>
 800a800:	b1b5      	cbz	r5, 800a830 <__pow5mult+0x68>
 800a802:	686a      	ldr	r2, [r5, #4]
 800a804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a806:	1064      	asrs	r4, r4, #1
 800a808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a80c:	6029      	str	r1, [r5, #0]
 800a80e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a812:	4605      	mov	r5, r0
 800a814:	d1ea      	bne.n	800a7ec <__pow5mult+0x24>
 800a816:	4628      	mov	r0, r5
 800a818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81c:	4632      	mov	r2, r6
 800a81e:	4631      	mov	r1, r6
 800a820:	4638      	mov	r0, r7
 800a822:	f7ff ff3f 	bl	800a6a4 <__multiply>
 800a826:	6030      	str	r0, [r6, #0]
 800a828:	f8c0 8000 	str.w	r8, [r0]
 800a82c:	4606      	mov	r6, r0
 800a82e:	e7e0      	b.n	800a7f2 <__pow5mult+0x2a>
 800a830:	4605      	mov	r5, r0
 800a832:	e7d9      	b.n	800a7e8 <__pow5mult+0x20>
 800a834:	1e5a      	subs	r2, r3, #1
 800a836:	4d0b      	ldr	r5, [pc, #44]	; (800a864 <__pow5mult+0x9c>)
 800a838:	2300      	movs	r3, #0
 800a83a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a83e:	f7ff fe97 	bl	800a570 <__multadd>
 800a842:	4605      	mov	r5, r0
 800a844:	e7c8      	b.n	800a7d8 <__pow5mult+0x10>
 800a846:	2101      	movs	r1, #1
 800a848:	4638      	mov	r0, r7
 800a84a:	f7ff fe61 	bl	800a510 <_Balloc>
 800a84e:	f240 2171 	movw	r1, #625	; 0x271
 800a852:	2201      	movs	r2, #1
 800a854:	2300      	movs	r3, #0
 800a856:	6141      	str	r1, [r0, #20]
 800a858:	6102      	str	r2, [r0, #16]
 800a85a:	4606      	mov	r6, r0
 800a85c:	64b8      	str	r0, [r7, #72]	; 0x48
 800a85e:	6003      	str	r3, [r0, #0]
 800a860:	e7be      	b.n	800a7e0 <__pow5mult+0x18>
 800a862:	bf00      	nop
 800a864:	0800b998 	.word	0x0800b998

0800a868 <__lshift>:
 800a868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a86c:	4691      	mov	r9, r2
 800a86e:	690a      	ldr	r2, [r1, #16]
 800a870:	688b      	ldr	r3, [r1, #8]
 800a872:	ea4f 1469 	mov.w	r4, r9, asr #5
 800a876:	eb04 0802 	add.w	r8, r4, r2
 800a87a:	f108 0501 	add.w	r5, r8, #1
 800a87e:	429d      	cmp	r5, r3
 800a880:	460e      	mov	r6, r1
 800a882:	4607      	mov	r7, r0
 800a884:	6849      	ldr	r1, [r1, #4]
 800a886:	dd04      	ble.n	800a892 <__lshift+0x2a>
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	429d      	cmp	r5, r3
 800a88c:	f101 0101 	add.w	r1, r1, #1
 800a890:	dcfa      	bgt.n	800a888 <__lshift+0x20>
 800a892:	4638      	mov	r0, r7
 800a894:	f7ff fe3c 	bl	800a510 <_Balloc>
 800a898:	2c00      	cmp	r4, #0
 800a89a:	f100 0314 	add.w	r3, r0, #20
 800a89e:	dd06      	ble.n	800a8ae <__lshift+0x46>
 800a8a0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	f843 1b04 	str.w	r1, [r3], #4
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d1fb      	bne.n	800a8a6 <__lshift+0x3e>
 800a8ae:	6934      	ldr	r4, [r6, #16]
 800a8b0:	f106 0114 	add.w	r1, r6, #20
 800a8b4:	f019 091f 	ands.w	r9, r9, #31
 800a8b8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800a8bc:	d01d      	beq.n	800a8fa <__lshift+0x92>
 800a8be:	f1c9 0c20 	rsb	ip, r9, #32
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	680c      	ldr	r4, [r1, #0]
 800a8c6:	fa04 f409 	lsl.w	r4, r4, r9
 800a8ca:	4314      	orrs	r4, r2
 800a8cc:	f843 4b04 	str.w	r4, [r3], #4
 800a8d0:	f851 2b04 	ldr.w	r2, [r1], #4
 800a8d4:	458e      	cmp	lr, r1
 800a8d6:	fa22 f20c 	lsr.w	r2, r2, ip
 800a8da:	d8f3      	bhi.n	800a8c4 <__lshift+0x5c>
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	b10a      	cbz	r2, 800a8e4 <__lshift+0x7c>
 800a8e0:	f108 0502 	add.w	r5, r8, #2
 800a8e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8e6:	6872      	ldr	r2, [r6, #4]
 800a8e8:	3d01      	subs	r5, #1
 800a8ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8ee:	6105      	str	r5, [r0, #16]
 800a8f0:	6031      	str	r1, [r6, #0]
 800a8f2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800a8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fa:	3b04      	subs	r3, #4
 800a8fc:	f851 2b04 	ldr.w	r2, [r1], #4
 800a900:	f843 2f04 	str.w	r2, [r3, #4]!
 800a904:	458e      	cmp	lr, r1
 800a906:	d8f9      	bhi.n	800a8fc <__lshift+0x94>
 800a908:	e7ec      	b.n	800a8e4 <__lshift+0x7c>
 800a90a:	bf00      	nop

0800a90c <__mcmp>:
 800a90c:	b430      	push	{r4, r5}
 800a90e:	690b      	ldr	r3, [r1, #16]
 800a910:	4605      	mov	r5, r0
 800a912:	6900      	ldr	r0, [r0, #16]
 800a914:	1ac0      	subs	r0, r0, r3
 800a916:	d10f      	bne.n	800a938 <__mcmp+0x2c>
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	3514      	adds	r5, #20
 800a91c:	3114      	adds	r1, #20
 800a91e:	4419      	add	r1, r3
 800a920:	442b      	add	r3, r5
 800a922:	e001      	b.n	800a928 <__mcmp+0x1c>
 800a924:	429d      	cmp	r5, r3
 800a926:	d207      	bcs.n	800a938 <__mcmp+0x2c>
 800a928:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800a92c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a930:	4294      	cmp	r4, r2
 800a932:	d0f7      	beq.n	800a924 <__mcmp+0x18>
 800a934:	d302      	bcc.n	800a93c <__mcmp+0x30>
 800a936:	2001      	movs	r0, #1
 800a938:	bc30      	pop	{r4, r5}
 800a93a:	4770      	bx	lr
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a940:	e7fa      	b.n	800a938 <__mcmp+0x2c>
 800a942:	bf00      	nop

0800a944 <__mdiff>:
 800a944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a948:	690f      	ldr	r7, [r1, #16]
 800a94a:	460e      	mov	r6, r1
 800a94c:	6911      	ldr	r1, [r2, #16]
 800a94e:	1a7f      	subs	r7, r7, r1
 800a950:	2f00      	cmp	r7, #0
 800a952:	4690      	mov	r8, r2
 800a954:	d117      	bne.n	800a986 <__mdiff+0x42>
 800a956:	0089      	lsls	r1, r1, #2
 800a958:	f106 0514 	add.w	r5, r6, #20
 800a95c:	f102 0e14 	add.w	lr, r2, #20
 800a960:	186b      	adds	r3, r5, r1
 800a962:	4471      	add	r1, lr
 800a964:	e001      	b.n	800a96a <__mdiff+0x26>
 800a966:	429d      	cmp	r5, r3
 800a968:	d25c      	bcs.n	800aa24 <__mdiff+0xe0>
 800a96a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a96e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a972:	42a2      	cmp	r2, r4
 800a974:	d0f7      	beq.n	800a966 <__mdiff+0x22>
 800a976:	d25e      	bcs.n	800aa36 <__mdiff+0xf2>
 800a978:	4633      	mov	r3, r6
 800a97a:	462c      	mov	r4, r5
 800a97c:	4646      	mov	r6, r8
 800a97e:	4675      	mov	r5, lr
 800a980:	4698      	mov	r8, r3
 800a982:	2701      	movs	r7, #1
 800a984:	e005      	b.n	800a992 <__mdiff+0x4e>
 800a986:	db58      	blt.n	800aa3a <__mdiff+0xf6>
 800a988:	f106 0514 	add.w	r5, r6, #20
 800a98c:	f108 0414 	add.w	r4, r8, #20
 800a990:	2700      	movs	r7, #0
 800a992:	6871      	ldr	r1, [r6, #4]
 800a994:	f7ff fdbc 	bl	800a510 <_Balloc>
 800a998:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a99c:	6936      	ldr	r6, [r6, #16]
 800a99e:	60c7      	str	r7, [r0, #12]
 800a9a0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800a9a4:	46a6      	mov	lr, r4
 800a9a6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800a9aa:	f100 0414 	add.w	r4, r0, #20
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f85e 1b04 	ldr.w	r1, [lr], #4
 800a9b4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a9b8:	b28a      	uxth	r2, r1
 800a9ba:	fa13 f388 	uxtah	r3, r3, r8
 800a9be:	0c09      	lsrs	r1, r1, #16
 800a9c0:	1a9a      	subs	r2, r3, r2
 800a9c2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800a9c6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800a9ca:	b292      	uxth	r2, r2
 800a9cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a9d0:	45f4      	cmp	ip, lr
 800a9d2:	f844 2b04 	str.w	r2, [r4], #4
 800a9d6:	ea4f 4323 	mov.w	r3, r3, asr #16
 800a9da:	d8e9      	bhi.n	800a9b0 <__mdiff+0x6c>
 800a9dc:	42af      	cmp	r7, r5
 800a9de:	d917      	bls.n	800aa10 <__mdiff+0xcc>
 800a9e0:	46a4      	mov	ip, r4
 800a9e2:	46ae      	mov	lr, r5
 800a9e4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a9e8:	fa13 f382 	uxtah	r3, r3, r2
 800a9ec:	1419      	asrs	r1, r3, #16
 800a9ee:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 800a9f8:	4577      	cmp	r7, lr
 800a9fa:	f84c 2b04 	str.w	r2, [ip], #4
 800a9fe:	ea4f 4321 	mov.w	r3, r1, asr #16
 800aa02:	d8ef      	bhi.n	800a9e4 <__mdiff+0xa0>
 800aa04:	43ed      	mvns	r5, r5
 800aa06:	442f      	add	r7, r5
 800aa08:	f027 0703 	bic.w	r7, r7, #3
 800aa0c:	3704      	adds	r7, #4
 800aa0e:	443c      	add	r4, r7
 800aa10:	3c04      	subs	r4, #4
 800aa12:	b922      	cbnz	r2, 800aa1e <__mdiff+0xda>
 800aa14:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800aa18:	3e01      	subs	r6, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0fa      	beq.n	800aa14 <__mdiff+0xd0>
 800aa1e:	6106      	str	r6, [r0, #16]
 800aa20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa24:	2100      	movs	r1, #0
 800aa26:	f7ff fd73 	bl	800a510 <_Balloc>
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	6102      	str	r2, [r0, #16]
 800aa30:	6143      	str	r3, [r0, #20]
 800aa32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa36:	4674      	mov	r4, lr
 800aa38:	e7ab      	b.n	800a992 <__mdiff+0x4e>
 800aa3a:	4633      	mov	r3, r6
 800aa3c:	f106 0414 	add.w	r4, r6, #20
 800aa40:	f102 0514 	add.w	r5, r2, #20
 800aa44:	4616      	mov	r6, r2
 800aa46:	2701      	movs	r7, #1
 800aa48:	4698      	mov	r8, r3
 800aa4a:	e7a2      	b.n	800a992 <__mdiff+0x4e>

0800aa4c <__d2b>:
 800aa4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa50:	ec57 6b10 	vmov	r6, r7, d0
 800aa54:	b083      	sub	sp, #12
 800aa56:	4688      	mov	r8, r1
 800aa58:	2101      	movs	r1, #1
 800aa5a:	463c      	mov	r4, r7
 800aa5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa60:	4617      	mov	r7, r2
 800aa62:	f7ff fd55 	bl	800a510 <_Balloc>
 800aa66:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aa6a:	4681      	mov	r9, r0
 800aa6c:	b10d      	cbz	r5, 800aa72 <__d2b+0x26>
 800aa6e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800aa72:	9401      	str	r4, [sp, #4]
 800aa74:	b31e      	cbz	r6, 800aabe <__d2b+0x72>
 800aa76:	a802      	add	r0, sp, #8
 800aa78:	f840 6d08 	str.w	r6, [r0, #-8]!
 800aa7c:	f7ff fdd8 	bl	800a630 <__lo0bits>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d134      	bne.n	800aaee <__d2b+0xa2>
 800aa84:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800aa88:	f8c9 2014 	str.w	r2, [r9, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf0c      	ite	eq
 800aa90:	2101      	moveq	r1, #1
 800aa92:	2102      	movne	r1, #2
 800aa94:	f8c9 3018 	str.w	r3, [r9, #24]
 800aa98:	f8c9 1010 	str.w	r1, [r9, #16]
 800aa9c:	b9dd      	cbnz	r5, 800aad6 <__d2b+0x8a>
 800aa9e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800aaa2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaa6:	f8c8 0000 	str.w	r0, [r8]
 800aaaa:	6918      	ldr	r0, [r3, #16]
 800aaac:	f7ff fda0 	bl	800a5f0 <__hi0bits>
 800aab0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aab4:	6038      	str	r0, [r7, #0]
 800aab6:	4648      	mov	r0, r9
 800aab8:	b003      	add	sp, #12
 800aaba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aabe:	a801      	add	r0, sp, #4
 800aac0:	f7ff fdb6 	bl	800a630 <__lo0bits>
 800aac4:	9b01      	ldr	r3, [sp, #4]
 800aac6:	f8c9 3014 	str.w	r3, [r9, #20]
 800aaca:	2101      	movs	r1, #1
 800aacc:	3020      	adds	r0, #32
 800aace:	f8c9 1010 	str.w	r1, [r9, #16]
 800aad2:	2d00      	cmp	r5, #0
 800aad4:	d0e3      	beq.n	800aa9e <__d2b+0x52>
 800aad6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aada:	4405      	add	r5, r0
 800aadc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aae0:	f8c8 5000 	str.w	r5, [r8]
 800aae4:	6038      	str	r0, [r7, #0]
 800aae6:	4648      	mov	r0, r9
 800aae8:	b003      	add	sp, #12
 800aaea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaee:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800aaf2:	f1c0 0220 	rsb	r2, r0, #32
 800aaf6:	fa03 f202 	lsl.w	r2, r3, r2
 800aafa:	430a      	orrs	r2, r1
 800aafc:	40c3      	lsrs	r3, r0
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	f8c9 2014 	str.w	r2, [r9, #20]
 800ab04:	e7c2      	b.n	800aa8c <__d2b+0x40>
 800ab06:	bf00      	nop

0800ab08 <_sbrk_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4c07      	ldr	r4, [pc, #28]	; (800ab28 <_sbrk_r+0x20>)
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4605      	mov	r5, r0
 800ab10:	4608      	mov	r0, r1
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	f000 fc1c 	bl	800b350 <_sbrk>
 800ab18:	1c43      	adds	r3, r0, #1
 800ab1a:	d000      	beq.n	800ab1e <_sbrk_r+0x16>
 800ab1c:	bd38      	pop	{r3, r4, r5, pc}
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0fb      	beq.n	800ab1c <_sbrk_r+0x14>
 800ab24:	602b      	str	r3, [r5, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	200024b4 	.word	0x200024b4

0800ab2c <__ssprint_r>:
 800ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	6893      	ldr	r3, [r2, #8]
 800ab32:	b083      	sub	sp, #12
 800ab34:	4690      	mov	r8, r2
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d070      	beq.n	800ac1c <__ssprint_r+0xf0>
 800ab3a:	4682      	mov	sl, r0
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	6817      	ldr	r7, [r2, #0]
 800ab40:	688d      	ldr	r5, [r1, #8]
 800ab42:	6808      	ldr	r0, [r1, #0]
 800ab44:	e042      	b.n	800abcc <__ssprint_r+0xa0>
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800ab4c:	d02e      	beq.n	800abac <__ssprint_r+0x80>
 800ab4e:	6965      	ldr	r5, [r4, #20]
 800ab50:	6921      	ldr	r1, [r4, #16]
 800ab52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab56:	eba0 0b01 	sub.w	fp, r0, r1
 800ab5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab5e:	f10b 0001 	add.w	r0, fp, #1
 800ab62:	106d      	asrs	r5, r5, #1
 800ab64:	4430      	add	r0, r6
 800ab66:	42a8      	cmp	r0, r5
 800ab68:	462a      	mov	r2, r5
 800ab6a:	bf84      	itt	hi
 800ab6c:	4605      	movhi	r5, r0
 800ab6e:	462a      	movhi	r2, r5
 800ab70:	055b      	lsls	r3, r3, #21
 800ab72:	d538      	bpl.n	800abe6 <__ssprint_r+0xba>
 800ab74:	4611      	mov	r1, r2
 800ab76:	4650      	mov	r0, sl
 800ab78:	f7ff fa16 	bl	8009fa8 <_malloc_r>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d03c      	beq.n	800abfa <__ssprint_r+0xce>
 800ab80:	465a      	mov	r2, fp
 800ab82:	6921      	ldr	r1, [r4, #16]
 800ab84:	9001      	str	r0, [sp, #4]
 800ab86:	f7f5 fba3 	bl	80002d0 <memcpy>
 800ab8a:	89a2      	ldrh	r2, [r4, #12]
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ab92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ab96:	81a2      	strh	r2, [r4, #12]
 800ab98:	eba5 020b 	sub.w	r2, r5, fp
 800ab9c:	eb03 000b 	add.w	r0, r3, fp
 800aba0:	6165      	str	r5, [r4, #20]
 800aba2:	6123      	str	r3, [r4, #16]
 800aba4:	6020      	str	r0, [r4, #0]
 800aba6:	60a2      	str	r2, [r4, #8]
 800aba8:	4635      	mov	r5, r6
 800abaa:	46b3      	mov	fp, r6
 800abac:	465a      	mov	r2, fp
 800abae:	4649      	mov	r1, r9
 800abb0:	f000 f9b6 	bl	800af20 <memmove>
 800abb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abb8:	68a2      	ldr	r2, [r4, #8]
 800abba:	6820      	ldr	r0, [r4, #0]
 800abbc:	1b55      	subs	r5, r2, r5
 800abbe:	4458      	add	r0, fp
 800abc0:	1b9e      	subs	r6, r3, r6
 800abc2:	60a5      	str	r5, [r4, #8]
 800abc4:	6020      	str	r0, [r4, #0]
 800abc6:	f8c8 6008 	str.w	r6, [r8, #8]
 800abca:	b33e      	cbz	r6, 800ac1c <__ssprint_r+0xf0>
 800abcc:	687e      	ldr	r6, [r7, #4]
 800abce:	463b      	mov	r3, r7
 800abd0:	3708      	adds	r7, #8
 800abd2:	2e00      	cmp	r6, #0
 800abd4:	d0fa      	beq.n	800abcc <__ssprint_r+0xa0>
 800abd6:	42ae      	cmp	r6, r5
 800abd8:	f8d3 9000 	ldr.w	r9, [r3]
 800abdc:	46ab      	mov	fp, r5
 800abde:	d2b2      	bcs.n	800ab46 <__ssprint_r+0x1a>
 800abe0:	4635      	mov	r5, r6
 800abe2:	46b3      	mov	fp, r6
 800abe4:	e7e2      	b.n	800abac <__ssprint_r+0x80>
 800abe6:	4650      	mov	r0, sl
 800abe8:	f000 f9fe 	bl	800afe8 <_realloc_r>
 800abec:	4603      	mov	r3, r0
 800abee:	2800      	cmp	r0, #0
 800abf0:	d1d2      	bne.n	800ab98 <__ssprint_r+0x6c>
 800abf2:	6921      	ldr	r1, [r4, #16]
 800abf4:	4650      	mov	r0, sl
 800abf6:	f000 f897 	bl	800ad28 <_free_r>
 800abfa:	230c      	movs	r3, #12
 800abfc:	f8ca 3000 	str.w	r3, [sl]
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	f8c8 2008 	str.w	r2, [r8, #8]
 800ac12:	f8c8 2004 	str.w	r2, [r8, #4]
 800ac16:	b003      	add	sp, #12
 800ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	f8c8 0004 	str.w	r0, [r8, #4]
 800ac22:	b003      	add	sp, #12
 800ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac28 <_calloc_r>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	fb02 f101 	mul.w	r1, r2, r1
 800ac2e:	f7ff f9bb 	bl	8009fa8 <_malloc_r>
 800ac32:	4604      	mov	r4, r0
 800ac34:	b1d8      	cbz	r0, 800ac6e <_calloc_r+0x46>
 800ac36:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ac3a:	f022 0203 	bic.w	r2, r2, #3
 800ac3e:	3a04      	subs	r2, #4
 800ac40:	2a24      	cmp	r2, #36	; 0x24
 800ac42:	d818      	bhi.n	800ac76 <_calloc_r+0x4e>
 800ac44:	2a13      	cmp	r2, #19
 800ac46:	d914      	bls.n	800ac72 <_calloc_r+0x4a>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	2a1b      	cmp	r2, #27
 800ac4c:	6003      	str	r3, [r0, #0]
 800ac4e:	6043      	str	r3, [r0, #4]
 800ac50:	d916      	bls.n	800ac80 <_calloc_r+0x58>
 800ac52:	2a24      	cmp	r2, #36	; 0x24
 800ac54:	6083      	str	r3, [r0, #8]
 800ac56:	60c3      	str	r3, [r0, #12]
 800ac58:	bf11      	iteee	ne
 800ac5a:	f100 0210 	addne.w	r2, r0, #16
 800ac5e:	6103      	streq	r3, [r0, #16]
 800ac60:	6143      	streq	r3, [r0, #20]
 800ac62:	f100 0218 	addeq.w	r2, r0, #24
 800ac66:	2300      	movs	r3, #0
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	6053      	str	r3, [r2, #4]
 800ac6c:	6093      	str	r3, [r2, #8]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	bd10      	pop	{r4, pc}
 800ac72:	4602      	mov	r2, r0
 800ac74:	e7f7      	b.n	800ac66 <_calloc_r+0x3e>
 800ac76:	2100      	movs	r1, #0
 800ac78:	f7f6 fae0 	bl	800123c <memset>
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	bd10      	pop	{r4, pc}
 800ac80:	f100 0208 	add.w	r2, r0, #8
 800ac84:	e7ef      	b.n	800ac66 <_calloc_r+0x3e>
 800ac86:	bf00      	nop

0800ac88 <_malloc_trim_r>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	4f24      	ldr	r7, [pc, #144]	; (800ad1c <_malloc_trim_r+0x94>)
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	4606      	mov	r6, r0
 800ac90:	f7ff fc3a 	bl	800a508 <__malloc_lock>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	685d      	ldr	r5, [r3, #4]
 800ac98:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800ac9c:	310f      	adds	r1, #15
 800ac9e:	f025 0503 	bic.w	r5, r5, #3
 800aca2:	4429      	add	r1, r5
 800aca4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800aca8:	f021 010f 	bic.w	r1, r1, #15
 800acac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800acb0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800acb4:	db07      	blt.n	800acc6 <_malloc_trim_r+0x3e>
 800acb6:	2100      	movs	r1, #0
 800acb8:	4630      	mov	r0, r6
 800acba:	f7ff ff25 	bl	800ab08 <_sbrk_r>
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	442b      	add	r3, r5
 800acc2:	4298      	cmp	r0, r3
 800acc4:	d004      	beq.n	800acd0 <_malloc_trim_r+0x48>
 800acc6:	4630      	mov	r0, r6
 800acc8:	f7ff fc20 	bl	800a50c <__malloc_unlock>
 800accc:	2000      	movs	r0, #0
 800acce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd0:	4261      	negs	r1, r4
 800acd2:	4630      	mov	r0, r6
 800acd4:	f7ff ff18 	bl	800ab08 <_sbrk_r>
 800acd8:	3001      	adds	r0, #1
 800acda:	d00d      	beq.n	800acf8 <_malloc_trim_r+0x70>
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <_malloc_trim_r+0x98>)
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	6819      	ldr	r1, [r3, #0]
 800ace2:	1b2d      	subs	r5, r5, r4
 800ace4:	f045 0501 	orr.w	r5, r5, #1
 800ace8:	4630      	mov	r0, r6
 800acea:	1b09      	subs	r1, r1, r4
 800acec:	6055      	str	r5, [r2, #4]
 800acee:	6019      	str	r1, [r3, #0]
 800acf0:	f7ff fc0c 	bl	800a50c <__malloc_unlock>
 800acf4:	2001      	movs	r0, #1
 800acf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf8:	2100      	movs	r1, #0
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7ff ff04 	bl	800ab08 <_sbrk_r>
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	1a83      	subs	r3, r0, r2
 800ad04:	2b0f      	cmp	r3, #15
 800ad06:	ddde      	ble.n	800acc6 <_malloc_trim_r+0x3e>
 800ad08:	4c06      	ldr	r4, [pc, #24]	; (800ad24 <_malloc_trim_r+0x9c>)
 800ad0a:	4905      	ldr	r1, [pc, #20]	; (800ad20 <_malloc_trim_r+0x98>)
 800ad0c:	6824      	ldr	r4, [r4, #0]
 800ad0e:	f043 0301 	orr.w	r3, r3, #1
 800ad12:	1b00      	subs	r0, r0, r4
 800ad14:	6053      	str	r3, [r2, #4]
 800ad16:	6008      	str	r0, [r1, #0]
 800ad18:	e7d5      	b.n	800acc6 <_malloc_trim_r+0x3e>
 800ad1a:	bf00      	nop
 800ad1c:	20000570 	.word	0x20000570
 800ad20:	20000bd8 	.word	0x20000bd8
 800ad24:	20000978 	.word	0x20000978

0800ad28 <_free_r>:
 800ad28:	2900      	cmp	r1, #0
 800ad2a:	d044      	beq.n	800adb6 <_free_r+0x8e>
 800ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad30:	460d      	mov	r5, r1
 800ad32:	4680      	mov	r8, r0
 800ad34:	f7ff fbe8 	bl	800a508 <__malloc_lock>
 800ad38:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800ad3c:	4969      	ldr	r1, [pc, #420]	; (800aee4 <_free_r+0x1bc>)
 800ad3e:	f027 0301 	bic.w	r3, r7, #1
 800ad42:	f1a5 0408 	sub.w	r4, r5, #8
 800ad46:	18e2      	adds	r2, r4, r3
 800ad48:	688e      	ldr	r6, [r1, #8]
 800ad4a:	6850      	ldr	r0, [r2, #4]
 800ad4c:	42b2      	cmp	r2, r6
 800ad4e:	f020 0003 	bic.w	r0, r0, #3
 800ad52:	d05e      	beq.n	800ae12 <_free_r+0xea>
 800ad54:	07fe      	lsls	r6, r7, #31
 800ad56:	6050      	str	r0, [r2, #4]
 800ad58:	d40b      	bmi.n	800ad72 <_free_r+0x4a>
 800ad5a:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800ad5e:	1be4      	subs	r4, r4, r7
 800ad60:	f101 0e08 	add.w	lr, r1, #8
 800ad64:	68a5      	ldr	r5, [r4, #8]
 800ad66:	4575      	cmp	r5, lr
 800ad68:	443b      	add	r3, r7
 800ad6a:	d06d      	beq.n	800ae48 <_free_r+0x120>
 800ad6c:	68e7      	ldr	r7, [r4, #12]
 800ad6e:	60ef      	str	r7, [r5, #12]
 800ad70:	60bd      	str	r5, [r7, #8]
 800ad72:	1815      	adds	r5, r2, r0
 800ad74:	686d      	ldr	r5, [r5, #4]
 800ad76:	07ed      	lsls	r5, r5, #31
 800ad78:	d53e      	bpl.n	800adf8 <_free_r+0xd0>
 800ad7a:	f043 0201 	orr.w	r2, r3, #1
 800ad7e:	6062      	str	r2, [r4, #4]
 800ad80:	50e3      	str	r3, [r4, r3]
 800ad82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad86:	d217      	bcs.n	800adb8 <_free_r+0x90>
 800ad88:	08db      	lsrs	r3, r3, #3
 800ad8a:	1c58      	adds	r0, r3, #1
 800ad8c:	109a      	asrs	r2, r3, #2
 800ad8e:	684d      	ldr	r5, [r1, #4]
 800ad90:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 800ad94:	60a7      	str	r7, [r4, #8]
 800ad96:	2301      	movs	r3, #1
 800ad98:	4093      	lsls	r3, r2
 800ad9a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 800ad9e:	432b      	orrs	r3, r5
 800ada0:	3a08      	subs	r2, #8
 800ada2:	60e2      	str	r2, [r4, #12]
 800ada4:	604b      	str	r3, [r1, #4]
 800ada6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 800adaa:	60fc      	str	r4, [r7, #12]
 800adac:	4640      	mov	r0, r8
 800adae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb2:	f7ff bbab 	b.w	800a50c <__malloc_unlock>
 800adb6:	4770      	bx	lr
 800adb8:	0a5a      	lsrs	r2, r3, #9
 800adba:	2a04      	cmp	r2, #4
 800adbc:	d852      	bhi.n	800ae64 <_free_r+0x13c>
 800adbe:	099a      	lsrs	r2, r3, #6
 800adc0:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800adc4:	00ff      	lsls	r7, r7, #3
 800adc6:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800adca:	19c8      	adds	r0, r1, r7
 800adcc:	59ca      	ldr	r2, [r1, r7]
 800adce:	3808      	subs	r0, #8
 800add0:	4290      	cmp	r0, r2
 800add2:	d04f      	beq.n	800ae74 <_free_r+0x14c>
 800add4:	6851      	ldr	r1, [r2, #4]
 800add6:	f021 0103 	bic.w	r1, r1, #3
 800adda:	428b      	cmp	r3, r1
 800addc:	d232      	bcs.n	800ae44 <_free_r+0x11c>
 800adde:	6892      	ldr	r2, [r2, #8]
 800ade0:	4290      	cmp	r0, r2
 800ade2:	d1f7      	bne.n	800add4 <_free_r+0xac>
 800ade4:	68c3      	ldr	r3, [r0, #12]
 800ade6:	60a0      	str	r0, [r4, #8]
 800ade8:	60e3      	str	r3, [r4, #12]
 800adea:	609c      	str	r4, [r3, #8]
 800adec:	60c4      	str	r4, [r0, #12]
 800adee:	4640      	mov	r0, r8
 800adf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adf4:	f7ff bb8a 	b.w	800a50c <__malloc_unlock>
 800adf8:	6895      	ldr	r5, [r2, #8]
 800adfa:	4f3b      	ldr	r7, [pc, #236]	; (800aee8 <_free_r+0x1c0>)
 800adfc:	42bd      	cmp	r5, r7
 800adfe:	4403      	add	r3, r0
 800ae00:	d040      	beq.n	800ae84 <_free_r+0x15c>
 800ae02:	68d0      	ldr	r0, [r2, #12]
 800ae04:	60e8      	str	r0, [r5, #12]
 800ae06:	f043 0201 	orr.w	r2, r3, #1
 800ae0a:	6085      	str	r5, [r0, #8]
 800ae0c:	6062      	str	r2, [r4, #4]
 800ae0e:	50e3      	str	r3, [r4, r3]
 800ae10:	e7b7      	b.n	800ad82 <_free_r+0x5a>
 800ae12:	07ff      	lsls	r7, r7, #31
 800ae14:	4403      	add	r3, r0
 800ae16:	d407      	bmi.n	800ae28 <_free_r+0x100>
 800ae18:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800ae1c:	1aa4      	subs	r4, r4, r2
 800ae1e:	4413      	add	r3, r2
 800ae20:	68a0      	ldr	r0, [r4, #8]
 800ae22:	68e2      	ldr	r2, [r4, #12]
 800ae24:	60c2      	str	r2, [r0, #12]
 800ae26:	6090      	str	r0, [r2, #8]
 800ae28:	4a30      	ldr	r2, [pc, #192]	; (800aeec <_free_r+0x1c4>)
 800ae2a:	6812      	ldr	r2, [r2, #0]
 800ae2c:	f043 0001 	orr.w	r0, r3, #1
 800ae30:	4293      	cmp	r3, r2
 800ae32:	6060      	str	r0, [r4, #4]
 800ae34:	608c      	str	r4, [r1, #8]
 800ae36:	d3b9      	bcc.n	800adac <_free_r+0x84>
 800ae38:	4b2d      	ldr	r3, [pc, #180]	; (800aef0 <_free_r+0x1c8>)
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	6819      	ldr	r1, [r3, #0]
 800ae3e:	f7ff ff23 	bl	800ac88 <_malloc_trim_r>
 800ae42:	e7b3      	b.n	800adac <_free_r+0x84>
 800ae44:	4610      	mov	r0, r2
 800ae46:	e7cd      	b.n	800ade4 <_free_r+0xbc>
 800ae48:	1811      	adds	r1, r2, r0
 800ae4a:	6849      	ldr	r1, [r1, #4]
 800ae4c:	07c9      	lsls	r1, r1, #31
 800ae4e:	d444      	bmi.n	800aeda <_free_r+0x1b2>
 800ae50:	6891      	ldr	r1, [r2, #8]
 800ae52:	68d2      	ldr	r2, [r2, #12]
 800ae54:	60ca      	str	r2, [r1, #12]
 800ae56:	4403      	add	r3, r0
 800ae58:	f043 0001 	orr.w	r0, r3, #1
 800ae5c:	6091      	str	r1, [r2, #8]
 800ae5e:	6060      	str	r0, [r4, #4]
 800ae60:	50e3      	str	r3, [r4, r3]
 800ae62:	e7a3      	b.n	800adac <_free_r+0x84>
 800ae64:	2a14      	cmp	r2, #20
 800ae66:	d816      	bhi.n	800ae96 <_free_r+0x16e>
 800ae68:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800ae6c:	00ff      	lsls	r7, r7, #3
 800ae6e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800ae72:	e7aa      	b.n	800adca <_free_r+0xa2>
 800ae74:	10aa      	asrs	r2, r5, #2
 800ae76:	2301      	movs	r3, #1
 800ae78:	684d      	ldr	r5, [r1, #4]
 800ae7a:	4093      	lsls	r3, r2
 800ae7c:	432b      	orrs	r3, r5
 800ae7e:	604b      	str	r3, [r1, #4]
 800ae80:	4603      	mov	r3, r0
 800ae82:	e7b0      	b.n	800ade6 <_free_r+0xbe>
 800ae84:	f043 0201 	orr.w	r2, r3, #1
 800ae88:	614c      	str	r4, [r1, #20]
 800ae8a:	610c      	str	r4, [r1, #16]
 800ae8c:	60e5      	str	r5, [r4, #12]
 800ae8e:	60a5      	str	r5, [r4, #8]
 800ae90:	6062      	str	r2, [r4, #4]
 800ae92:	50e3      	str	r3, [r4, r3]
 800ae94:	e78a      	b.n	800adac <_free_r+0x84>
 800ae96:	2a54      	cmp	r2, #84	; 0x54
 800ae98:	d806      	bhi.n	800aea8 <_free_r+0x180>
 800ae9a:	0b1a      	lsrs	r2, r3, #12
 800ae9c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800aea0:	00ff      	lsls	r7, r7, #3
 800aea2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800aea6:	e790      	b.n	800adca <_free_r+0xa2>
 800aea8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800aeac:	d806      	bhi.n	800aebc <_free_r+0x194>
 800aeae:	0bda      	lsrs	r2, r3, #15
 800aeb0:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800aeb4:	00ff      	lsls	r7, r7, #3
 800aeb6:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800aeba:	e786      	b.n	800adca <_free_r+0xa2>
 800aebc:	f240 5054 	movw	r0, #1364	; 0x554
 800aec0:	4282      	cmp	r2, r0
 800aec2:	d806      	bhi.n	800aed2 <_free_r+0x1aa>
 800aec4:	0c9a      	lsrs	r2, r3, #18
 800aec6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800aeca:	00ff      	lsls	r7, r7, #3
 800aecc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800aed0:	e77b      	b.n	800adca <_free_r+0xa2>
 800aed2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800aed6:	257e      	movs	r5, #126	; 0x7e
 800aed8:	e777      	b.n	800adca <_free_r+0xa2>
 800aeda:	f043 0101 	orr.w	r1, r3, #1
 800aede:	6061      	str	r1, [r4, #4]
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	e763      	b.n	800adac <_free_r+0x84>
 800aee4:	20000570 	.word	0x20000570
 800aee8:	20000578 	.word	0x20000578
 800aeec:	2000097c 	.word	0x2000097c
 800aef0:	20000c08 	.word	0x20000c08

0800aef4 <__ascii_mbtowc>:
 800aef4:	b082      	sub	sp, #8
 800aef6:	b149      	cbz	r1, 800af0c <__ascii_mbtowc+0x18>
 800aef8:	b15a      	cbz	r2, 800af12 <__ascii_mbtowc+0x1e>
 800aefa:	b16b      	cbz	r3, 800af18 <__ascii_mbtowc+0x24>
 800aefc:	7813      	ldrb	r3, [r2, #0]
 800aefe:	600b      	str	r3, [r1, #0]
 800af00:	7812      	ldrb	r2, [r2, #0]
 800af02:	1c10      	adds	r0, r2, #0
 800af04:	bf18      	it	ne
 800af06:	2001      	movne	r0, #1
 800af08:	b002      	add	sp, #8
 800af0a:	4770      	bx	lr
 800af0c:	a901      	add	r1, sp, #4
 800af0e:	2a00      	cmp	r2, #0
 800af10:	d1f3      	bne.n	800aefa <__ascii_mbtowc+0x6>
 800af12:	4610      	mov	r0, r2
 800af14:	b002      	add	sp, #8
 800af16:	4770      	bx	lr
 800af18:	f06f 0001 	mvn.w	r0, #1
 800af1c:	e7f4      	b.n	800af08 <__ascii_mbtowc+0x14>
 800af1e:	bf00      	nop

0800af20 <memmove>:
 800af20:	4288      	cmp	r0, r1
 800af22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af24:	d90d      	bls.n	800af42 <memmove+0x22>
 800af26:	188b      	adds	r3, r1, r2
 800af28:	4298      	cmp	r0, r3
 800af2a:	d20a      	bcs.n	800af42 <memmove+0x22>
 800af2c:	1884      	adds	r4, r0, r2
 800af2e:	2a00      	cmp	r2, #0
 800af30:	d051      	beq.n	800afd6 <memmove+0xb6>
 800af32:	4622      	mov	r2, r4
 800af34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af3c:	4299      	cmp	r1, r3
 800af3e:	d1f9      	bne.n	800af34 <memmove+0x14>
 800af40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af42:	2a0f      	cmp	r2, #15
 800af44:	d948      	bls.n	800afd8 <memmove+0xb8>
 800af46:	ea41 0300 	orr.w	r3, r1, r0
 800af4a:	079b      	lsls	r3, r3, #30
 800af4c:	d146      	bne.n	800afdc <memmove+0xbc>
 800af4e:	f100 0410 	add.w	r4, r0, #16
 800af52:	f101 0310 	add.w	r3, r1, #16
 800af56:	4615      	mov	r5, r2
 800af58:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800af5c:	f844 6c10 	str.w	r6, [r4, #-16]
 800af60:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800af64:	f844 6c0c 	str.w	r6, [r4, #-12]
 800af68:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800af6c:	f844 6c08 	str.w	r6, [r4, #-8]
 800af70:	3d10      	subs	r5, #16
 800af72:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800af76:	f844 6c04 	str.w	r6, [r4, #-4]
 800af7a:	2d0f      	cmp	r5, #15
 800af7c:	f103 0310 	add.w	r3, r3, #16
 800af80:	f104 0410 	add.w	r4, r4, #16
 800af84:	d8e8      	bhi.n	800af58 <memmove+0x38>
 800af86:	f1a2 0310 	sub.w	r3, r2, #16
 800af8a:	f023 030f 	bic.w	r3, r3, #15
 800af8e:	f002 0e0f 	and.w	lr, r2, #15
 800af92:	3310      	adds	r3, #16
 800af94:	f1be 0f03 	cmp.w	lr, #3
 800af98:	4419      	add	r1, r3
 800af9a:	4403      	add	r3, r0
 800af9c:	d921      	bls.n	800afe2 <memmove+0xc2>
 800af9e:	1f1e      	subs	r6, r3, #4
 800afa0:	460d      	mov	r5, r1
 800afa2:	4674      	mov	r4, lr
 800afa4:	3c04      	subs	r4, #4
 800afa6:	f855 7b04 	ldr.w	r7, [r5], #4
 800afaa:	f846 7f04 	str.w	r7, [r6, #4]!
 800afae:	2c03      	cmp	r4, #3
 800afb0:	d8f8      	bhi.n	800afa4 <memmove+0x84>
 800afb2:	f1ae 0404 	sub.w	r4, lr, #4
 800afb6:	f024 0403 	bic.w	r4, r4, #3
 800afba:	3404      	adds	r4, #4
 800afbc:	4421      	add	r1, r4
 800afbe:	4423      	add	r3, r4
 800afc0:	f002 0203 	and.w	r2, r2, #3
 800afc4:	b162      	cbz	r2, 800afe0 <memmove+0xc0>
 800afc6:	3b01      	subs	r3, #1
 800afc8:	440a      	add	r2, r1
 800afca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afd2:	428a      	cmp	r2, r1
 800afd4:	d1f9      	bne.n	800afca <memmove+0xaa>
 800afd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd8:	4603      	mov	r3, r0
 800afda:	e7f3      	b.n	800afc4 <memmove+0xa4>
 800afdc:	4603      	mov	r3, r0
 800afde:	e7f2      	b.n	800afc6 <memmove+0xa6>
 800afe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afe2:	4672      	mov	r2, lr
 800afe4:	e7ee      	b.n	800afc4 <memmove+0xa4>
 800afe6:	bf00      	nop

0800afe8 <_realloc_r>:
 800afe8:	2900      	cmp	r1, #0
 800afea:	f000 8095 	beq.w	800b118 <_realloc_r+0x130>
 800afee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff2:	460d      	mov	r5, r1
 800aff4:	4616      	mov	r6, r2
 800aff6:	b083      	sub	sp, #12
 800aff8:	4680      	mov	r8, r0
 800affa:	f106 070b 	add.w	r7, r6, #11
 800affe:	f7ff fa83 	bl	800a508 <__malloc_lock>
 800b002:	f855 ec04 	ldr.w	lr, [r5, #-4]
 800b006:	2f16      	cmp	r7, #22
 800b008:	f02e 0403 	bic.w	r4, lr, #3
 800b00c:	f1a5 0908 	sub.w	r9, r5, #8
 800b010:	d83c      	bhi.n	800b08c <_realloc_r+0xa4>
 800b012:	2210      	movs	r2, #16
 800b014:	4617      	mov	r7, r2
 800b016:	42be      	cmp	r6, r7
 800b018:	d83d      	bhi.n	800b096 <_realloc_r+0xae>
 800b01a:	4294      	cmp	r4, r2
 800b01c:	da43      	bge.n	800b0a6 <_realloc_r+0xbe>
 800b01e:	4bc4      	ldr	r3, [pc, #784]	; (800b330 <_realloc_r+0x348>)
 800b020:	6899      	ldr	r1, [r3, #8]
 800b022:	eb09 0004 	add.w	r0, r9, r4
 800b026:	4288      	cmp	r0, r1
 800b028:	f000 80b4 	beq.w	800b194 <_realloc_r+0x1ac>
 800b02c:	6843      	ldr	r3, [r0, #4]
 800b02e:	f023 0101 	bic.w	r1, r3, #1
 800b032:	4401      	add	r1, r0
 800b034:	6849      	ldr	r1, [r1, #4]
 800b036:	07c9      	lsls	r1, r1, #31
 800b038:	d54c      	bpl.n	800b0d4 <_realloc_r+0xec>
 800b03a:	f01e 0f01 	tst.w	lr, #1
 800b03e:	f000 809b 	beq.w	800b178 <_realloc_r+0x190>
 800b042:	4631      	mov	r1, r6
 800b044:	4640      	mov	r0, r8
 800b046:	f7fe ffaf 	bl	8009fa8 <_malloc_r>
 800b04a:	4606      	mov	r6, r0
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d03a      	beq.n	800b0c6 <_realloc_r+0xde>
 800b050:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b054:	f023 0301 	bic.w	r3, r3, #1
 800b058:	444b      	add	r3, r9
 800b05a:	f1a0 0208 	sub.w	r2, r0, #8
 800b05e:	429a      	cmp	r2, r3
 800b060:	f000 8121 	beq.w	800b2a6 <_realloc_r+0x2be>
 800b064:	1f22      	subs	r2, r4, #4
 800b066:	2a24      	cmp	r2, #36	; 0x24
 800b068:	f200 8107 	bhi.w	800b27a <_realloc_r+0x292>
 800b06c:	2a13      	cmp	r2, #19
 800b06e:	f200 80db 	bhi.w	800b228 <_realloc_r+0x240>
 800b072:	4603      	mov	r3, r0
 800b074:	462a      	mov	r2, r5
 800b076:	6811      	ldr	r1, [r2, #0]
 800b078:	6019      	str	r1, [r3, #0]
 800b07a:	6851      	ldr	r1, [r2, #4]
 800b07c:	6059      	str	r1, [r3, #4]
 800b07e:	6892      	ldr	r2, [r2, #8]
 800b080:	609a      	str	r2, [r3, #8]
 800b082:	4629      	mov	r1, r5
 800b084:	4640      	mov	r0, r8
 800b086:	f7ff fe4f 	bl	800ad28 <_free_r>
 800b08a:	e01c      	b.n	800b0c6 <_realloc_r+0xde>
 800b08c:	f027 0707 	bic.w	r7, r7, #7
 800b090:	2f00      	cmp	r7, #0
 800b092:	463a      	mov	r2, r7
 800b094:	dabf      	bge.n	800b016 <_realloc_r+0x2e>
 800b096:	2600      	movs	r6, #0
 800b098:	230c      	movs	r3, #12
 800b09a:	4630      	mov	r0, r6
 800b09c:	f8c8 3000 	str.w	r3, [r8]
 800b0a0:	b003      	add	sp, #12
 800b0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a6:	462e      	mov	r6, r5
 800b0a8:	1be3      	subs	r3, r4, r7
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	d81e      	bhi.n	800b0ec <_realloc_r+0x104>
 800b0ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	4323      	orrs	r3, r4
 800b0b8:	444c      	add	r4, r9
 800b0ba:	f8c9 3004 	str.w	r3, [r9, #4]
 800b0be:	6863      	ldr	r3, [r4, #4]
 800b0c0:	f043 0301 	orr.w	r3, r3, #1
 800b0c4:	6063      	str	r3, [r4, #4]
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	f7ff fa20 	bl	800a50c <__malloc_unlock>
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	b003      	add	sp, #12
 800b0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d4:	f023 0303 	bic.w	r3, r3, #3
 800b0d8:	18e1      	adds	r1, r4, r3
 800b0da:	4291      	cmp	r1, r2
 800b0dc:	db1f      	blt.n	800b11e <_realloc_r+0x136>
 800b0de:	68c3      	ldr	r3, [r0, #12]
 800b0e0:	6882      	ldr	r2, [r0, #8]
 800b0e2:	462e      	mov	r6, r5
 800b0e4:	60d3      	str	r3, [r2, #12]
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	609a      	str	r2, [r3, #8]
 800b0ea:	e7dd      	b.n	800b0a8 <_realloc_r+0xc0>
 800b0ec:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b0f0:	eb09 0107 	add.w	r1, r9, r7
 800b0f4:	f002 0201 	and.w	r2, r2, #1
 800b0f8:	444c      	add	r4, r9
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	4317      	orrs	r7, r2
 800b100:	f8c9 7004 	str.w	r7, [r9, #4]
 800b104:	604b      	str	r3, [r1, #4]
 800b106:	6863      	ldr	r3, [r4, #4]
 800b108:	f043 0301 	orr.w	r3, r3, #1
 800b10c:	3108      	adds	r1, #8
 800b10e:	6063      	str	r3, [r4, #4]
 800b110:	4640      	mov	r0, r8
 800b112:	f7ff fe09 	bl	800ad28 <_free_r>
 800b116:	e7d6      	b.n	800b0c6 <_realloc_r+0xde>
 800b118:	4611      	mov	r1, r2
 800b11a:	f7fe bf45 	b.w	8009fa8 <_malloc_r>
 800b11e:	f01e 0f01 	tst.w	lr, #1
 800b122:	d18e      	bne.n	800b042 <_realloc_r+0x5a>
 800b124:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800b128:	eba9 0a01 	sub.w	sl, r9, r1
 800b12c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b130:	f021 0103 	bic.w	r1, r1, #3
 800b134:	440b      	add	r3, r1
 800b136:	4423      	add	r3, r4
 800b138:	4293      	cmp	r3, r2
 800b13a:	db25      	blt.n	800b188 <_realloc_r+0x1a0>
 800b13c:	68c2      	ldr	r2, [r0, #12]
 800b13e:	6881      	ldr	r1, [r0, #8]
 800b140:	4656      	mov	r6, sl
 800b142:	60ca      	str	r2, [r1, #12]
 800b144:	6091      	str	r1, [r2, #8]
 800b146:	f8da 100c 	ldr.w	r1, [sl, #12]
 800b14a:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800b14e:	1f22      	subs	r2, r4, #4
 800b150:	2a24      	cmp	r2, #36	; 0x24
 800b152:	60c1      	str	r1, [r0, #12]
 800b154:	6088      	str	r0, [r1, #8]
 800b156:	f200 8094 	bhi.w	800b282 <_realloc_r+0x29a>
 800b15a:	2a13      	cmp	r2, #19
 800b15c:	d96f      	bls.n	800b23e <_realloc_r+0x256>
 800b15e:	6829      	ldr	r1, [r5, #0]
 800b160:	f8ca 1008 	str.w	r1, [sl, #8]
 800b164:	6869      	ldr	r1, [r5, #4]
 800b166:	f8ca 100c 	str.w	r1, [sl, #12]
 800b16a:	2a1b      	cmp	r2, #27
 800b16c:	f200 80a2 	bhi.w	800b2b4 <_realloc_r+0x2cc>
 800b170:	3508      	adds	r5, #8
 800b172:	f10a 0210 	add.w	r2, sl, #16
 800b176:	e063      	b.n	800b240 <_realloc_r+0x258>
 800b178:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800b17c:	eba9 0a03 	sub.w	sl, r9, r3
 800b180:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b184:	f021 0103 	bic.w	r1, r1, #3
 800b188:	1863      	adds	r3, r4, r1
 800b18a:	4293      	cmp	r3, r2
 800b18c:	f6ff af59 	blt.w	800b042 <_realloc_r+0x5a>
 800b190:	4656      	mov	r6, sl
 800b192:	e7d8      	b.n	800b146 <_realloc_r+0x15e>
 800b194:	6841      	ldr	r1, [r0, #4]
 800b196:	f021 0b03 	bic.w	fp, r1, #3
 800b19a:	44a3      	add	fp, r4
 800b19c:	f107 0010 	add.w	r0, r7, #16
 800b1a0:	4583      	cmp	fp, r0
 800b1a2:	da56      	bge.n	800b252 <_realloc_r+0x26a>
 800b1a4:	f01e 0f01 	tst.w	lr, #1
 800b1a8:	f47f af4b 	bne.w	800b042 <_realloc_r+0x5a>
 800b1ac:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800b1b0:	eba9 0a01 	sub.w	sl, r9, r1
 800b1b4:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b1b8:	f021 0103 	bic.w	r1, r1, #3
 800b1bc:	448b      	add	fp, r1
 800b1be:	4558      	cmp	r0, fp
 800b1c0:	dce2      	bgt.n	800b188 <_realloc_r+0x1a0>
 800b1c2:	4656      	mov	r6, sl
 800b1c4:	f8da 100c 	ldr.w	r1, [sl, #12]
 800b1c8:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800b1cc:	1f22      	subs	r2, r4, #4
 800b1ce:	2a24      	cmp	r2, #36	; 0x24
 800b1d0:	60c1      	str	r1, [r0, #12]
 800b1d2:	6088      	str	r0, [r1, #8]
 800b1d4:	f200 808f 	bhi.w	800b2f6 <_realloc_r+0x30e>
 800b1d8:	2a13      	cmp	r2, #19
 800b1da:	f240 808a 	bls.w	800b2f2 <_realloc_r+0x30a>
 800b1de:	6829      	ldr	r1, [r5, #0]
 800b1e0:	f8ca 1008 	str.w	r1, [sl, #8]
 800b1e4:	6869      	ldr	r1, [r5, #4]
 800b1e6:	f8ca 100c 	str.w	r1, [sl, #12]
 800b1ea:	2a1b      	cmp	r2, #27
 800b1ec:	f200 808a 	bhi.w	800b304 <_realloc_r+0x31c>
 800b1f0:	3508      	adds	r5, #8
 800b1f2:	f10a 0210 	add.w	r2, sl, #16
 800b1f6:	6829      	ldr	r1, [r5, #0]
 800b1f8:	6011      	str	r1, [r2, #0]
 800b1fa:	6869      	ldr	r1, [r5, #4]
 800b1fc:	6051      	str	r1, [r2, #4]
 800b1fe:	68a9      	ldr	r1, [r5, #8]
 800b200:	6091      	str	r1, [r2, #8]
 800b202:	eb0a 0107 	add.w	r1, sl, r7
 800b206:	ebab 0207 	sub.w	r2, fp, r7
 800b20a:	f042 0201 	orr.w	r2, r2, #1
 800b20e:	6099      	str	r1, [r3, #8]
 800b210:	604a      	str	r2, [r1, #4]
 800b212:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	431f      	orrs	r7, r3
 800b21c:	4640      	mov	r0, r8
 800b21e:	f8ca 7004 	str.w	r7, [sl, #4]
 800b222:	f7ff f973 	bl	800a50c <__malloc_unlock>
 800b226:	e751      	b.n	800b0cc <_realloc_r+0xe4>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	6003      	str	r3, [r0, #0]
 800b22c:	686b      	ldr	r3, [r5, #4]
 800b22e:	6043      	str	r3, [r0, #4]
 800b230:	2a1b      	cmp	r2, #27
 800b232:	d82d      	bhi.n	800b290 <_realloc_r+0x2a8>
 800b234:	f100 0308 	add.w	r3, r0, #8
 800b238:	f105 0208 	add.w	r2, r5, #8
 800b23c:	e71b      	b.n	800b076 <_realloc_r+0x8e>
 800b23e:	4632      	mov	r2, r6
 800b240:	6829      	ldr	r1, [r5, #0]
 800b242:	6011      	str	r1, [r2, #0]
 800b244:	6869      	ldr	r1, [r5, #4]
 800b246:	6051      	str	r1, [r2, #4]
 800b248:	68a9      	ldr	r1, [r5, #8]
 800b24a:	6091      	str	r1, [r2, #8]
 800b24c:	461c      	mov	r4, r3
 800b24e:	46d1      	mov	r9, sl
 800b250:	e72a      	b.n	800b0a8 <_realloc_r+0xc0>
 800b252:	eb09 0107 	add.w	r1, r9, r7
 800b256:	ebab 0b07 	sub.w	fp, fp, r7
 800b25a:	f04b 0201 	orr.w	r2, fp, #1
 800b25e:	6099      	str	r1, [r3, #8]
 800b260:	604a      	str	r2, [r1, #4]
 800b262:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	431f      	orrs	r7, r3
 800b26c:	4640      	mov	r0, r8
 800b26e:	f845 7c04 	str.w	r7, [r5, #-4]
 800b272:	f7ff f94b 	bl	800a50c <__malloc_unlock>
 800b276:	462e      	mov	r6, r5
 800b278:	e728      	b.n	800b0cc <_realloc_r+0xe4>
 800b27a:	4629      	mov	r1, r5
 800b27c:	f7ff fe50 	bl	800af20 <memmove>
 800b280:	e6ff      	b.n	800b082 <_realloc_r+0x9a>
 800b282:	4629      	mov	r1, r5
 800b284:	4630      	mov	r0, r6
 800b286:	461c      	mov	r4, r3
 800b288:	46d1      	mov	r9, sl
 800b28a:	f7ff fe49 	bl	800af20 <memmove>
 800b28e:	e70b      	b.n	800b0a8 <_realloc_r+0xc0>
 800b290:	68ab      	ldr	r3, [r5, #8]
 800b292:	6083      	str	r3, [r0, #8]
 800b294:	68eb      	ldr	r3, [r5, #12]
 800b296:	60c3      	str	r3, [r0, #12]
 800b298:	2a24      	cmp	r2, #36	; 0x24
 800b29a:	d017      	beq.n	800b2cc <_realloc_r+0x2e4>
 800b29c:	f100 0310 	add.w	r3, r0, #16
 800b2a0:	f105 0210 	add.w	r2, r5, #16
 800b2a4:	e6e7      	b.n	800b076 <_realloc_r+0x8e>
 800b2a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b2aa:	f023 0303 	bic.w	r3, r3, #3
 800b2ae:	441c      	add	r4, r3
 800b2b0:	462e      	mov	r6, r5
 800b2b2:	e6f9      	b.n	800b0a8 <_realloc_r+0xc0>
 800b2b4:	68a9      	ldr	r1, [r5, #8]
 800b2b6:	f8ca 1010 	str.w	r1, [sl, #16]
 800b2ba:	68e9      	ldr	r1, [r5, #12]
 800b2bc:	f8ca 1014 	str.w	r1, [sl, #20]
 800b2c0:	2a24      	cmp	r2, #36	; 0x24
 800b2c2:	d00c      	beq.n	800b2de <_realloc_r+0x2f6>
 800b2c4:	3510      	adds	r5, #16
 800b2c6:	f10a 0218 	add.w	r2, sl, #24
 800b2ca:	e7b9      	b.n	800b240 <_realloc_r+0x258>
 800b2cc:	692b      	ldr	r3, [r5, #16]
 800b2ce:	6103      	str	r3, [r0, #16]
 800b2d0:	696b      	ldr	r3, [r5, #20]
 800b2d2:	6143      	str	r3, [r0, #20]
 800b2d4:	f105 0218 	add.w	r2, r5, #24
 800b2d8:	f100 0318 	add.w	r3, r0, #24
 800b2dc:	e6cb      	b.n	800b076 <_realloc_r+0x8e>
 800b2de:	692a      	ldr	r2, [r5, #16]
 800b2e0:	f8ca 2018 	str.w	r2, [sl, #24]
 800b2e4:	696a      	ldr	r2, [r5, #20]
 800b2e6:	f8ca 201c 	str.w	r2, [sl, #28]
 800b2ea:	3518      	adds	r5, #24
 800b2ec:	f10a 0220 	add.w	r2, sl, #32
 800b2f0:	e7a6      	b.n	800b240 <_realloc_r+0x258>
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	e77f      	b.n	800b1f6 <_realloc_r+0x20e>
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	f7ff fe10 	bl	800af20 <memmove>
 800b300:	9b01      	ldr	r3, [sp, #4]
 800b302:	e77e      	b.n	800b202 <_realloc_r+0x21a>
 800b304:	68a9      	ldr	r1, [r5, #8]
 800b306:	f8ca 1010 	str.w	r1, [sl, #16]
 800b30a:	68e9      	ldr	r1, [r5, #12]
 800b30c:	f8ca 1014 	str.w	r1, [sl, #20]
 800b310:	2a24      	cmp	r2, #36	; 0x24
 800b312:	d003      	beq.n	800b31c <_realloc_r+0x334>
 800b314:	3510      	adds	r5, #16
 800b316:	f10a 0218 	add.w	r2, sl, #24
 800b31a:	e76c      	b.n	800b1f6 <_realloc_r+0x20e>
 800b31c:	692a      	ldr	r2, [r5, #16]
 800b31e:	f8ca 2018 	str.w	r2, [sl, #24]
 800b322:	696a      	ldr	r2, [r5, #20]
 800b324:	f8ca 201c 	str.w	r2, [sl, #28]
 800b328:	3518      	adds	r5, #24
 800b32a:	f10a 0220 	add.w	r2, sl, #32
 800b32e:	e762      	b.n	800b1f6 <_realloc_r+0x20e>
 800b330:	20000570 	.word	0x20000570

0800b334 <__ascii_wctomb>:
 800b334:	b121      	cbz	r1, 800b340 <__ascii_wctomb+0xc>
 800b336:	2aff      	cmp	r2, #255	; 0xff
 800b338:	d804      	bhi.n	800b344 <__ascii_wctomb+0x10>
 800b33a:	700a      	strb	r2, [r1, #0]
 800b33c:	2001      	movs	r0, #1
 800b33e:	4770      	bx	lr
 800b340:	4608      	mov	r0, r1
 800b342:	4770      	bx	lr
 800b344:	238a      	movs	r3, #138	; 0x8a
 800b346:	6003      	str	r3, [r0, #0]
 800b348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop

0800b350 <_sbrk>:
 800b350:	4a04      	ldr	r2, [pc, #16]	; (800b364 <_sbrk+0x14>)
 800b352:	4905      	ldr	r1, [pc, #20]	; (800b368 <_sbrk+0x18>)
 800b354:	6813      	ldr	r3, [r2, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	bf08      	it	eq
 800b35a:	460b      	moveq	r3, r1
 800b35c:	4418      	add	r0, r3
 800b35e:	6010      	str	r0, [r2, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	4770      	bx	lr
 800b364:	20000c0c 	.word	0x20000c0c
 800b368:	200024b8 	.word	0x200024b8

0800b36c <_init>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr

0800b378 <_fini>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr
